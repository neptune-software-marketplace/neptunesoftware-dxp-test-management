{"app":{"id":"8ffa0c83-0ec7-44e9-f104-7706d22522aa","ver":"23.2.20.1126","status":"Active","application":"launchpad_2261","title":"","createdOn":"2023-02-20T10:26:36.987Z","createdBy":"testcafe","package":"ae5dd690-2555-ed11-ade6-000d3ab237df","description":"Planet 9 Launchpad ","disabled":false,"ui5_theme":"sap_fiori_3","cus_theme":"","ui5_version":"customCDN","ui5_url":"https://openui5.hana.ondemand.com/1.71.47/resources/sap-ui-core.js","enableStylesheet":true,"manifest":"","enableObfuscate":false,"compilerTarget":3,"printWidth":null,"tabWidth":null,"enableFileStorage":true,"useV2AppHandler":false,"onlyRunLaunchpad":false,"appType":"L","ui5_language":"","enableMultiDevelopment":false,"publicAccess":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"componentInterface":null,"roles":[],"enableManifest":false,"css":".sapUiLoSplitter.sapUiLoSplitterH>.sapUiLoSplitterBar.sapUiLoSplitterNoResize,\n.sapUiLoSplitter.sapUiLoSplitterV>.sapUiLoSplitterBar.sapUiLoSplitterNoResize {\n    height: 0 !important;\n    width: 0 !important;\n}\n\n.sapMBarPH {\n    display: inline-block !important;\n}\n\n.sapMShellBrandingBar {\n    background-color: transparent\n}\n\n.nepMobileTitle {\n    line-height: 48px;\n}\n\n.nepFormInput {\n    max-width: 800px;\n    margin-left: auto;\n    margin-right: auto;\n}\n\n/* HELP LABLE */\n\n.sapUiFormLblColon .sapUiFormElementLbl>.sapMLabel.nepLabelHelp:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    vertical-align: inherit;\n    margin-left: .325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n    pointer-events: all;\n}\n\n.sapUiFormResGridCont>.sapUiFormElementLbl>.nepLabelHelp.sapMLabel {\n    width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp {\n    width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:after {\n    content: \":\";\n    pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n/* HELP OBJECT HEADER */\n\n.sapMOHROuter.nepLabelHelp {\n    pointer-events: none;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMOHROuter.nepLabelHelp .sapMOHRTitleText:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-left: .325rem;\n    font-size: .875rem;\n    pointer-events: all;\n}\n\n/* DIALOG WITH OBJECTHEADER*/\n\n.nepDialogWithObjHeader .sapMOHR {\n    margin-top: -.5rem;\n    padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader .sapMSwt {\n    border-radius: 0;\n}\n\n.nepDialogWithObjHeader.nepDocPop .sapMOHR {\n    margin-top: 0;\n    padding-top: 1.1rem !important;\n    border: 1px solid #dedede;\n    border-bottom: none;\n    border-radius: .25rem;\n}\n\n.nepDialogWithObjHeader .sapContrastPlus.sapMOHR.sapMOHRBgTranslucent,\n.sapContrastPlus .nepDialogWithObjHeader .sapMOHR.sapMOHRBgTranslucent {\n    background: #2f3c48;\n    box-shadow: none;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n    height: 2.5rem;\n    border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog>.sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog>.sapMDialogTitle {\n    height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n    z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRTitle h1,\n.nepDialogWithObjHeader .sapMOHRIntro .sapMText,\n.nepDialogWithObjHeader .sapMOHRIcon .sapUiIcon {\n    color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStateSuccess .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateSuccess .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #abe2ab;\n}\n\n.nepDialogWithObjHeader .nepStateWarning .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateWarning .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #e78c07;\n}\n\n.nepDialogWithObjHeader .nepStateError .sapMOHRIcon .sapUiIcon,\n.nepDialogWithObjHeader .nepStateError .sapContrastPlus .sapMOHRIcon .sapUiIcon {\n    color: #ff8888;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n    top: .675rem;\n}\n\n.nepDialogWithObjHeader .sapMBtnIcon {\n    color: #cae4fb;\n}\n\n.nepDialogWithObjHeader .nepStackedToolBar.sapMTB {\n    border-left: 1px solid #ddd;\n    background: #fff;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n    border-radius: .25rem;\n}\n\n.nepDialogWithObjHeader .sapMITH {\n    border-bottom: none;\n}\n\n.nepDialogSubObjHeader {\n    background: #2f3c48;\n    margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n    color: #cae4fb;\n    padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog>.sapMDialogSection {\n    margin-top: -1rem;\n    height: calc(100% + 1rem);\n}\n\n.nepSubMenu.sapMPopover .sapMPopoverCont {\n    border-radius: 0 !important;\n}\n\n.nepSubMenu.sapMPopover {\n    border-radius: 0 !important;\n    box-shadow: rgba(0, 0, 0, 0.5) 5px 5px 10px 0px;\n    min-width: 200px;\n}\n\n.nepSubMenu .sapMSLITitleOnly {\n    font-size: 0.875rem;\n}\n\n.nepSubMenu .sapMLIB {\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard:not(.nepICCard) .sapFCardHeader:not(.nepFCardFooter) {\n    border-bottom: none;\n}\n\n.nepTileApplicationPanel .sapMPanelContent {\n    overflow: hidden\n}\n\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus .sapMIBar.sapMFooter-CTX,\nhtml.sap-desktop .nepDialogSubObjHeader .sapContrastPlus.sapMIBar.sapMFooter-CTX {\n    border-top-color: #2f3c48;\n}\n\n.nepDialogSubObjHeader .sapContrastPlus.sapMOHR:not(.sapMOHRNoBorder),\n.nepDialogSubObjHeader .sapContrastPlus .sapMOHR:not(.sapMOHRNoBorder) {\n    box-shadow: 0 0.125rem 0 0 #3f5161, inset 0 -0.125rem 0 0 #2F3C45;\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepDialogWithObjHeader.sapMDialog>header:last-of-type .sapMIBar {\n    box-shadow: none;\n    background-color: #2f3c48;\n    border-top: none;\n}\n\n/*NEPTUNE*/\n\n.nepSideCollapsed {\n    padding-left: 68px;\n}\n\n.nepSideExpanded {\n    padding-left: 300px;\n}\n\n.nepSideMenu {\n    padding-left: 300px;\n}\n\n.nepSideMenuCollapsed {\n    padding-left: 368px;\n}\n\n.nepSideMenuExpanded {\n    padding-left: 600px;\n}\n\n.nepSmallFont {\n    font-size: 12px !important;\n}\n\n.nepLinks {\n    position: absolute;\n    bottom: 20px;\n}\n\n.nepPanLinks .sapMTB {\n    border-bottom: none;\n    margin-top: 20px;\n}\n\n@media (max-height: 550px) {\n    .nepPanLinks {\n        display: none;\n    }\n}\n\n.nepPanLogon {\n    border-bottom: none;\n    background-color: rgba(255, 255, 255, 0.6);\n    box-shadow: 0 0 1rem 0 rgb(250 250 250 / 30%);\n}\n\n.nepPanLogon .sapMTB-Transparent-CTX.sapMTB {\n    background: transparent;\n}\n\n.sapUiTheme-sap_fiori_3_dark .nepPanLogon,\n.sapUiTheme-sap_horizon_dark .nepPanLogon {\n    background-color: rgba(0, 0, 0, 0.3);\n}\n\n.nepPanLogonBorder {\n    border-radius: 15px;\n}\n\n.nepFlexPhone .sapMFlexItem {\n    width: 100%;\n    height: 100%;\n}\n\n.nepLinkNoBorder.sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepDocPage .sapMTabStrip {\n    padding-top: 0;\n    height: 44px;\n}\n\n.nepDocPage .sapMTabContainer {\n    padding-top: 0;\n}\n\n.nepDocPage {\n    overflow: hidden;\n}\n\n.nepTopMenu {\n    min-height: auto;\n    border-radius: 0;\n}\n\n.nepTopMenu .iconNetwork .sapMBtnCustomIcon {\n    color: red !important;\n}\n\n#AppCacheDiaSettings .sapMITBContent {\n    border-bottom: none !important;\n}\n\n.sapMFT {\n    white-space: normal;\n}\n\n.nepUserList .sapMLIB.sapMObjLItem {\n    margin-bottom: 10px;\n    border-radius: 10px;\n}\n\n.nepUserList .sapMObjLIntro {\n    color: orange !important;\n}\n\n.nepNavBarBoxTitle {\n    padding-left: 15px;\n}\n\n.nepNavBarAction {\n    position: absolute;\n    top: -6px;\n}\n\n.nepNavBarAction .sapMBtnInner {\n    color: white;\n    border-radius: 6px !important;\n}\n\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n    color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n    color: white !important;\n}\n\n.nepNavBarBoxIcon {\n    text-align: center;\n    min-width: 45px;\n}\n\n.nepTopMenu .sapMPanelContent {\n    overflow: hidden;\n}\n\n.nepTopMenu.sapMTBStandard {\n    height: 60px;\n}\n\n.nepTopMenu .sapMTB-Transparent-CTX.sapMTB {\n    padding-left: 0;\n    /* height: 48px; */\n}\n\n.nepTopMenu .sapMTBNewFlex>* {\n    -webkit-flex-shrink: unset;\n    flex-shrink: unset;\n    overflow: hidden;\n}\n\n.nepTopMenu .sapMBtnIcon {\n    font-size: 1.375rem;\n}\n\n.nepTopMenu .sapMBtnInner {\n    background-color: transparent;\n}\n\n.nepTopMenu :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: transparent !important;\n    border-color: transparent !important;\n}\n\n.nepTopMenuActive {\n    border-bottom: 4px solid orange;\n}\n\n.nepIconActive {\n    border-left: 4px solid orange;\n}\n\n.nepNavBarTile {\n    cursor: pointer;\n}\n\n.nepShell .sapUiGlobalBackgroundColor,\n.nepShell .sapMShellGlobalInnerBackground {\n    background: transparent;\n}\n\n.nepShell .sapMShellBG.sapUiGlobalBackgroundImage {\n    background: transparent;\n}\n\n.nepListSetting .sapMLIB {\n    padding: 0 1rem 0 0.1rem;\n}\n\n/*OPENUI5*/\n\n.sapMDialogScroll {\n    height: 100%;\n}\n\n/*TILES*/\n\n.nepTile .sapUiBlockCellTitle {\n    margin-bottom: 6px;\n}\n\n.nepPopCards.sapMPopover {\n    background: transparent;\n}\n\n.nepPopCards.sapMPopover .sapMPopoverCont {\n    background: transparent;\n}\n\n.nepTileCardsPop {\n    margin: 0;\n    box-shadow: none;\n    border-radius: 0 6px 6px 0;\n    border-left: none;\n}\n\n.nepTileCardsPop .sapUiBlockCellContent {\n    padding: 10px 10px 10px 4px;\n}\n\n.nepTileCardsRunning {\n    margin: 4px 4px 4px 4px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    border-radius: 6px;\n    border-left: 4px solid transparent;\n}\n\n.nepTileCardsRunning .sapUiBlockCellContent {\n    padding: 10px 10px 10px 4px;\n}\n\n.nepTileCards {\n    margin: 8px 8px 8px 8px;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n    border-radius: 4px;\n}\n\n.nepTileCards:hover {\n    box-shadow: 0 10px 24px 0 rgba(0, 0, 0, 0.2);\n}\n\n\n.nepChartTile {\n    padding: 0 !important;\n}\n\n.nepCatPanel .sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepCatPanel .sapMPanelContent {\n    padding-bottom: 10px;\n    padding-top: 0px;\n}\n\n.nepCatPanel .sapMTB {\n    border-bottom: none;\n}\n\n.nepCatPaddingImage {\n    padding-left: 8px;\n    padding-right: 8px;\n    padding-top: 8px;\n    margin-bottom: -4px;\n}\n\n.nepCatNoPaddingImage {\n    margin-bottom: -4px;\n}\n\n.nepTileCardsFixed10 {\n    flex: unset !important;\n    width: calc(10% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed20 {\n    flex: unset !important;\n    width: calc(20% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed25 {\n    flex: unset !important;\n    width: calc(25% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed30 {\n    flex: unset !important;\n    width: calc(30% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed40 {\n    flex: unset !important;\n    width: calc(40% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed50 {\n    flex: unset !important;\n    width: calc(50% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed60 {\n    flex: unset !important;\n    width: calc(60% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed70 {\n    flex: unset !important;\n    width: calc(70% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed75 {\n    flex: unset !important;\n    width: calc(75% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed80 {\n    flex: unset !important;\n    width: calc(80% - 1rem);\n    min-width: 250px;\n}\n\n.nepTileCardsFixed90 {\n    flex: unset !important;\n    width: calc(90% - 1rem);\n    min-width: 250px;\n}\n\n/* SCROLLBAR */\n\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb,\nhtml.sap-desktop .sapContrast ::-webkit-scrollbar-thumb:hover {\n    background-color: #346187;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar {\n    width: 10px !important;\n    height: 10px !important;\n    background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-corner {\n    background-color: transparent !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb {\n    background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop ::-webkit-scrollbar-thumb:hover {\n    background-color: #6b7d8e !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableVSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableVSb::-webkit-scrollbar-thumb {\n    border-left: unset !important;\n    border-right: unset !important;\n}\n\nhtml.sap-desktop:not(.sap-tablet) .sapUiTableHSb::-webkit-scrollbar-thumb,\nhtml.sap-desktop.sap-tablet .sapUiTableHSb::-webkit-scrollbar-thumb {\n    border-top: unset !important;\n    border-bottom: unset !important;\n}\n\n/*PASSCODE APP*/\n\n#boxNumpadPanel .sapMBtn {\n    height: 4.6rem;\n    margin: 5px;\n}\n\n#butNumpadClear-inner {\n    padding-left: 0;\n    padding-right: 0;\n}\n\n#boxNumpadPanel .sapMPanelContent {\n    border-bottom: none;\n    background: transparent;\n    overflow: hidden;\n}\n\n#boxNumpad02 {\n    margin: auto;\n}\n\n.numPad .sapMBtnInner {\n    border-top-left-radius: 3rem;\n    border-top-right-radius: 3rem;\n    border-bottom-right-radius: 3rem;\n    border-bottom-left-radius: 3rem;\n    height: 3.9rem;\n    min-width: 4rem;\n    border: none;\n    padding-top: .8rem;\n    font-size: 1.875rem;\n    background: rgba(0, 0, 0, 0.5);\n    color: #fff;\n    text-shadow: none;\n}\n\n#boxNumpadPanel .sapMBtnIcon {\n    color: #ffffff;\n    font-size: 1.875rem;\n}\n\n#boxNumpadPanel .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n    background: rgba(0, 0, 0, 0.5);\n}\n\n#boxNumpadPanel .sapMCbBg.sapMCbMarkChecked:before {\n    content: \"\";\n}\n\n#boxNumpadPanel .sapMCbBg {\n    background: #fff;\n    border: none;\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n    border-bottom-right-radius: 1rem;\n    border-bottom-left-radius: 1rem;\n    -webkit-focus-ring-color: none;\n}\n\n#boxNumpadPanel .sapMCb {\n    padding: 0 0 0 2rem;\n}\n\n#boxNumpadPanel .sapMCbBgDis {\n    opacity: 1;\n}\n\n.sapUiTheme-sap_fiori_3_dark .numPad .sapMBtnInner {\n    background: #29313a;\n}\n\n.sapUiTheme-sap_fiori_3_dark #boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n    background: #29313a;\n}\n\n.animated {\n    -webkit-animation-duration: .9s;\n    -moz-animation-duration: .9s;\n    -o-animation-duration: .9s;\n    -ms-animation-duration: .9s;\n    animation-duration: .9s;\n    -webkit-animation-fill-mode: both;\n    -moz-animation-fill-mode: both;\n    -o-animation-fill-mode: both;\n    -ms-animation-fill-mode: both;\n    animation-fill-mode: both;\n}\n\n.shake {\n    -webkit-animation-name: shake;\n    -moz-animation-name: shake;\n    -o-animation-name: shake;\n    -ms-animation-name: shake;\n    animation-name: shake;\n}\n\n@-webkit-keyframes shake {\n    0%,\n    100% {\n        -webkit-transform: translateX(0);\n        -moz-transform: translateX(0);\n        -o-transform: translateX(0);\n        -ms-transform: translateX(0);\n    }\n    10%,\n    30%,\n    50%,\n    70%,\n    90% {\n        -webkit-transform: translateX(-20px);\n        -moz-transform: translateX(-20px);\n        -o-transform: translateX(-20px);\n        -ms-transofmr: translateX(-20px);\n    }\n    20%,\n    40%,\n    60%,\n    80% {\n        -webkit-transform: translateX(20px);\n        -moz-transform: translateX(20px);\n        -o-transform: translateX(20px);\n        -ms-transform: translateX(20px);\n    }\n}\n\n@keyframes shake {\n    0%,\n    100% {\n        transform: translateX(0);\n    }\n    10%,\n    30%,\n    50%,\n    70%,\n    90% {\n        transform: translateX(-20px);\n    }\n    20%,\n    40%,\n    60%,\n    80% {\n        transform: translateX(20px);\n    }\n}\n\n/*NAVIGATION SIDEBAR*/\n\n@media only screen and (max-width:1600px) {\n    .nepNavPanel {\n        display: none\n    }\n}\n\n.navHidden {\n    visibility: hidden;\n}\n\n.nepNavPanel {\n    position: fixed;\n    height: 100%;\n    z-index: 11;\n    width: 200px;\n    right: 0px;\n    top: 48px;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.minified {\n    pointer-events: none\n}\n\n.nepNavPanel.minified .nav-container {\n    pointer-events: auto;\n    width: 100px\n}\n\n.nepNavPanel.minified .nav-in-page {\n    pointer-events: none\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link {\n    height: 4px;\n    opacity: 1\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active {\n    height: 4px\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a {\n    transition-duration: 200ms;\n    transition-timing-function: linear;\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 14px\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link.active a.show {\n    opacity: 1;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.minified .nav-in-page .nav-link a {\n    opacity: 0;\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel .nav-container {\n    height: 100%\n}\n\n.nepNavPanel .nav-links {\n    display: inline-block;\n    width: 190px;\n    padding-left: 0px;\n}\n\n.nepNavPanel.full-state {\n    background: linear-gradient(to left, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.3));\n    transition-duration: 200ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link {\n    height: 26px;\n    opacity: 1\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active {\n    height: 42px\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link.active a {\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 16px\n}\n\n.nepNavPanel.full-state .nav-in-page .nav-link a {\n    display: block;\n    opacity: 1\n}\n\n.nepNavPanel .nav-in-page {\n    width: 200px;\n    transform: translateY(50%);\n    position: absolute;\n    bottom: 50%\n}\n\n.nepNavPanel .nav-in-page .nav-link {\n    padding: 0 0 0 10px;\n    cursor: pointer;\n    border-right: 4px solid orange;\n    height: 26px;\n    display: flex;\n    align-items: center;\n    margin-top: 8px;\n    margin-bottom: 8px;\n    transition-duration: 200ms;\n    transition-timing-function: linear;\n    opacity: 0\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a,\n.nepNavPanel .nav-in-page .nav-link:hover a {\n    color: #fff;\n    line-height: 1.1em\n}\n\n.nepNavPanel .nav-in-page .nav-link.active {\n    height: 42px\n}\n\n.nepNavPanel .nav-in-page .nav-link.active a {\n    font-weight: normal;\n    line-height: 1.1em;\n    font-size: 16px\n}\n\n.nepNavPanel .nav-in-page .nav-link.initial {\n    opacity: 1;\n    transition-duration: 1000ms;\n    transition-timing-function: linear\n}\n\n.nepNavPanel .nav-in-page .nav-link a {\n    display: block;\n    font-weight: normal;\n    font-size: 14px;\n    line-height: 1.1em;\n    color: rgba(255, 255, 255, 0.7);\n    text-decoration: none;\n}\n\n/* P8 */\n\nhtml[data-sap-ui-animation='on'] .nepCatPanel .sapMPanelContent {\n    transform: none;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.sapMPanel {\n    min-height: 60px;\n}\n\n.nepCatPanel.nepCatTitleLayoutTitle.nepCatTitleLayoutSubTitle.sapMPanel {\n    min-height: 82px;\n}\n\n.nepCatPanel .sapMPanelContent {\n    padding-bottom: 0;\n    padding-top: 0;\n}\n\n.nepCatPanel .sapMTB {\n    border-bottom: none;\n}\n\n.nepCatTitleLayout {\n    /* padding-left: 10px; */\n    /* padding-right: 10px; */\n    position: absolute;\n    top: 0;\n    left: 1rem;\n}\n\n.nepCatTitle.sapMTitle {\n    font-size: 1.125rem;\n    color: #346187;\n    text-shadow: none;\n    font-weight: bold;\n    padding-top: 1.25rem;\n}\n\n.nepCatSubTitle.sapMTitle {\n    color: #346187;\n    text-shadow: none;\n}\n\nhtml[dir=\"rtl\"] .nepCatTitleLayout {\n    right: 1rem;\n}\n\nhtml[dir=\"rtl\"] .nepCatPanel .sapMPanelContent {\n    background-position: left;\n}\n\n/* P8 COPY */\n\n:root {\n    --xsmall: 380px;\n    --small: 680px;\n    --medium: 980px;\n    --large: 1280px;\n    --xlarge: 1580px;\n    --xxlarge: 1880px;\n    --xxxlarge: 2360px;\n    --gridGap: 0px;\n    --gridHeight: 170px;\n    --grid1: 100%;\n    --grid2: 50%;\n    --grid3: 33.3333%;\n    --grid4: 25%;\n    --grid5: 20%;\n    --grid6: 16.6666%;\n    --grid8: 12.5%;\n    --grid10: 10%;\n    --grid12: 8.3333%;\n    --grid14: 7.1428%;\n    --cardMargin: .25rem;\n    --white: #fff;\n    --lightGreyPrimary: #dedede;\n    --lightGreySecondary: #ccc;\n    --darkGreyPrimary: #666;\n    --darkGreySecondary: #888;\n    --lightPrimaryColor: #fafafa;\n    --lightSecondaryColor: #d3d7d9;\n    --darkPrimaryColor: #333;\n    --darkSecondaryColor: #444;\n    --darkThemePrimaryBackground: #1C2228;\n    --darkThemeSecondaryBackground: #29313a;\n    --lightThemeNotification: #dd0000;\n    --darkThemeNotification: #dd0000;\n    --lightThemeRequired: #c14646;\n    --darkThemeRequired: #c14646;\n    --lightActiveMenuColor: var(--lightSecondaryColor);\n    --darkActiveMenuColor: var(--darkSecondaryColor);\n    --quartzDarkPrimary: #91c8f6;\n}\n\n.nepDialogWithObjHeader.sapMDialog {\n    transform: none;\n}\n\n.nepBtnIcon .sapMBtnContent {\n    margin-left: .5rem;\n}\n\n.nepLayout .nepFCard.sapFCard .nepFCardBody.sapFCardHeader {\n    padding: 0;\n    /*clip-path: initial !important;*/\n    box-shadow: none;\n}\n\n.nepFCardBody.sapFCardHeader .sapFCardIcon.sapFAvatar {\n    justify-content: flex-end;\n}\n\n.nepFCard.sapFCard:focus {\n    border: .125rem solid #4db1ff;\n}\n\n.nepSubMenu .sapMBtn .sapMBtnInner {\n    justify-content: flex-start;\n}\n\nhtml[dir=\"rtl\"] .nepTreeItemAction .sapMSTIIcon {\n    margin: 0.5rem 0 0.5rem 0.75rem;\n}\n\n.nepNavBarContent,\n.nepMainBar {\n    position: relative;\n    z-index: 89;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon:before {\n    content: \"\\f0da\";\n}\n\n.nepTreeCategory li[aria-expanded=\"true\"] .sapMTreeItemBaseExpander.sapUiIcon:before {\n    content: \"\\f0d7\";\n}\n\n.nepSideAppTab.sapMTabContainer {\n    padding-top: 0;\n}\n\n.nepLogonContainer {\n    height: 75%;\n}\n\n.nepLogonLayout {\n    padding: 1rem;\n    border-radius: .5rem;\n    margin: auto;\n}\n\n@media (max-width: 420px) {\n    .nepLogonContainer {\n        height: auto;\n    }\n    .nepLogonLayout {\n        padding: 0;\n        border-radius: 0;\n        margin: auto;\n    }\n}\n\n.nepLaunchpadOverflowContainer {\n    position: absolute;\n    top: 0;\n    width: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n    z-index: 97;\n}\n\n.nepLaunchpadOverflowClickArea {\n    position: absolute;\n    top: 0;\n    z-index: 98;\n    bottom: 0;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadOverflowClickArea {\n    right: 0;\n    left: 300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadOverflowClickArea {\n    right: 300px;\n    left: 0;\n}\n\n.nepLaunchpadMenuOverflow {\n    position: absolute;\n    top: 0;\n    width: 300px;\n    height: 100%;\n    z-index: 99;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuOverflow {\n    left: -300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuOverflow {\n    right: -300px;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuOverflowOpen {\n    left: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuOverflowOpen {\n    right: 0;\n}\n\n.nepLaunchpadSettingsContainer {\n    position: absolute;\n    top: 0;\n    right: 0;\n    width: 0;\n    background-color: rgba(0, 0, 0, 0.4);\n    z-index: 97;\n}\n\n.nepLaunchpadSettingsClickArea {\n    position: absolute;\n    top: 0;\n    z-index: 98;\n    bottom: 0;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadSettingsClickArea {\n    right: 300px;\n    left: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadSettingsClickArea {\n    right: 0;\n    left: 300px;\n}\n\n.nepLaunchpadMenuSettings {\n    position: absolute;\n    top: 0;\n    /*right: -300px;*/\n    width: 300px;\n    height: 100%;\n    z-index: 99;\n    /*-webkit-transition: all .3s ease-out;*/\n    /*-moz-transition: all .3s ease-out;*/\n    /*-o-transition: all .3s ease-out;*/\n    /*transition: all .3s ease-out;*/\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuSettings {\n    right: -300px;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuSettings {\n    left: -300px;\n    display: none;\n}\n\nhtml[dir=\"ltr\"] .nepLaunchpadMenuSettingsOpen {\n    right: 0;\n}\n\nhtml[dir=\"rtl\"] .nepLaunchpadMenuSettingsOpen {\n    left: 0;\n}\n\n.nepLaunchpadContentSideApp {\n    position: absolute;\n    top: 0;\n    right: 0;\n    height: 100%;\n    border-left: 1px solid #d9d9d9;\n    border-top: 1px solid #d9d9d9;\n}\n\n.nepThemeDark .nepLaunchpadContentSideApp {\n    border-left: 1px solid #4b596a;\n    border-top: 1px solid #4b596a;\n}\n\n.nepHeaderSearch .sapMInput {\n    padding-right: .5rem;\n}\n\n.nepFCard .sapMListBGTranslucent .sapMListTblHeader,\n.nepFCard .sapMListBGTranslucent .sapMListTblFooter,\n.nepFCard .sapMListTblHeader>.sapMTableTH {\n    background-color: transparent;\n}\n\n.nepGridMany .nepTileSmall .sapFCardHeaderSideIndicators .sapFCardHeaderSideIndicator:last-child {\n    display: none;\n}\n\n.nepFCard.sapFCard.nepICCard {\n    height: 100%;\n}\n\n.nepFCard.sapFCard.nepICCardActionBottom {\n    min-height: calc(3rem - 2px);\n    height: calc(3rem - 2px);\n    clip-path: inset(0 -5px -5px -5px);\n    clip-path: inset(0 -5px -5px -5px);\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n\n.nepFCard.sapFCard.nepICCardActionTop {\n    clip-path: inset(-5px -5px 0 -5px);\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    height: 100%;\n}\n\n.nepFCardContainer,\n.nepTileContainer {\n    padding: .25rem;\n    padding: var(--cardMargin);\n    min-height: var(--gridHeight);\n}\n\n.nepFCardContainer.nepFCardPlain,\n.nepTileContainer.nepTilePlain {\n    padding: 0;\n}\n\n.nepFCardContainer>.sapMFlexItem,\n.nepFCardBody>.sapMFlexItem {\n    width: 100%;\n}\n\n.nepICCardContainer>.sapMFlexItem {\n    height: 100%;\n}\n\n.nepLaunchpadContent {\n    height: 100%;\n}\n\n.nepLaunchpadContentMain {\n    position: absolute;\n    left: 0;\n    right: 0;\n    width: 100%;\n    height: 100%;\n}\n\n.nepLaunchpadShell {\n    position: relative;\n}\n\n.nepLaunchpadMenuOverflow>.sapMFlexItem:last-child,\n.nepLaunchpadContentMenu>.sapMFlexItem,\n.nepLaunchpadContentNavigator>.sapMFlexItem,\n.nepLaunchpadContentMain>.sapMFlexItem,\n.nepLaunchpadContentSideApp>.sapMFlexItem {\n    height: 100% !important;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n    box-shadow: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n    padding: 0;\n    width: 100%;\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard.nepTileClickable .sapFCardHeader.nepFCardFooter {\n    border-bottom: none;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n    padding: .25rem 1rem .25rem 0;\n    margin: 0;\n}\n\nhtml[dir=\"rtl\"] .nepFCard.sapFCard .sapFCardHeader.nepFCardFooter .sapFCardStatus {\n    padding: .25rem 0 .25rem 1rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader {\n    background-color: transparent;\n}\n\n.nepFCard.sapFCard .sapFCardContent {\n    flex: 1;\n}\n\n.nepFCard.sapFCard {\n    height: 100%;\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.16), 0 3px 6px rgba(0, 0, 0, 0.23);\n}\n\n.nepFCard.sapFCard.sapFCardFitContent {\n    height: auto;\n}\n\n.nepFCardInlineImage {\n    margin-bottom: .5rem;\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter {\n    clip-path: inset(1px 0 -5px);\n}\n\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter,\n.nepFCard.sapFCard .sapFCardHeader.nepFCardFooter.sapFCardNumericHeader .sapFCardHeaderIndicators {\n    flex-direction: row-reverse;\n}\n\n.nepFCard.sapFCard .nepCardAction {\n    padding: .25rem 0.85rem;\n    min-height: 2.5rem;\n}\n\n.nepFCard .sapSuiteRMCCircleBackground,\n.nepTile .sapSuiteRMCCircleBackground {\n    stroke: transparent;\n    fill: transparent;\n}\n\n.nepFCard .sapSuiteUiMicroChartNoData {\n    border-radius: .5rem;\n}\n\nhtml.sapUiMedia-Std-Phone .nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeAuto,\n.nepFCard .sapSuiteCpMCChartContent.sapSuiteCpMCSizeS {\n    height: auto;\n}\n\n.nepTileClickable .sapFCardHeaderTitle,\n.nepTileClickable .sapFCardSubtitle {\n    pointer-events: none;\n}\n\n.nepTileClickable {\n    cursor: pointer;\n}\n\n.nepICCard .sapMLIB {\n    background: transparent;\n}\n\n.nepFCard .sapFCardHeaderSINumber span:first-child {\n    margin-right: .125rem;\n}\n\nhtml.sap-desktop .sapMDialog .sapMShellAppWidthLimited .sapMShellCentralBox {\n    width: 100%;\n    margin-left: auto;\n    left: auto;\n}\n\n@media (min-width: 1280px) {\n    html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        width: 100%;\n        left: auto;\n        right: auto;\n        /* max-width: var(--large); */\n        margin: 0 auto 0 auto;\n    }\n}\n\n/* DIALOG WITH OBJECTHEADER */\n\n.nepDialogWithObjHeader .sapMOHR {\n    padding-top: 0 !important;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMBar {\n    height: 2.5rem;\n    border-radius: 4px 4px 0px 0px;\n}\n\n.nepDialogWithObjHeader.sapUiSizeCompact.sapMDialog>.sapMDialogTitle,\n.nepDialogWithObjHeader.sapUiSizeCompact .sapMDialog>.sapMDialogTitle {\n    height: 2.5rem;\n}\n\n.nepDialogWithObjHeader .nepCloseBtn {\n    z-index: 9999;\n}\n\n.nepDialogWithObjHeader .sapMOHRIcon {\n    top: .675rem;\n}\n\n.nepDialogWithObjHeader .sapUiLocalBusyIndicatorSizeMedium {\n    border-radius: .25rem;\n}\n\n.nepDialogSubObjHeader {\n    margin-top: -1rem;\n}\n\n.nepDialogSubObjHeader .sapMText {\n    padding: 0 1rem 1rem 7rem;\n}\n\n.nepDialogSubObjHeader .sapMDialog>.sapMDialogSection {\n    margin-top: -1rem;\n    height: calc(100% + 1rem);\n}\n\n.nepDialogWithObjHeader.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepDialogWithObjHeader.sapMDialog>header:last-of-type .sapMIBar,\n.nepPopover.sapMDialog:not(.sapMDialogWithSubHeader)>header>.sapMIBar,\n.nepPopover.sapMDialog>header:last-of-type .sapMIBar {\n    box-shadow: none;\n}\n\n.nepNotificationImage {\n    max-width: 2.25rem;\n    max-height: 2.25rem;\n}\n\n@media (max-width: 680px) {\n    .nepClientInstall {\n        flex-direction: column;\n    }\n}\n\n.nepClientInstallContainer {\n    padding: .5rem;\n}\n\n.nepClientInstallLayout {\n    padding: 1rem;\n    border-radius: .5rem;\n    width: 100%;\n}\n\n.nepAppIcon {\n    border-radius: 2rem;\n}\n\n.nepOverflowMenu .sapMLIB,\n.nepMainBar .sapMLIB {\n    border: none;\n}\n\n.nepOverflowMenu .sapMBtn:hover>.sapMBtnHoverable,\n.nepMainBar .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: transparent;\n}\n\n.nepOverflowLogo {\n    margin-top: -.5rem;\n}\n\n.nepOverflowMenu .sapMBarLeft,\n.nepMainBar .sapMBarLeft {\n    padding: 0;\n    height: 2.75rem !important;\n}\n\n.nepOverflowMenu.sapMDialog>header.sapMDialogTitle .sapMImg {\n    margin-right: 0;\n    width: auto;\n}\n\n.nepMenuBtnHidden {\n    position: relative;\n    top: 48px;\n}\n\n.nepOpenAppsBtn {\n    margin-left: .3125rem;\n}\n\n.sapMBtn.nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnContent {\n    max-width: 200px;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn {\n    margin-left: 0;\n}\n\n.nepOpenAppsBtnItem {\n    margin-left: 2.4375rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtnItem {\n    margin-left: 1.675rem;\n}\n\n.nepOpenAppsAlone .nepOpenAppsBtn {\n    margin-left: 0;\n}\n\n.nepOpenAppsBtn .sapMBtnInner {\n    border: none;\n    background-color: transparent;\n}\n\n.nepOpenAppsBtn .sapMBtnContent {\n    padding-left: .5rem;\n}\n\n.sapUiSizeCompact .nepOpenAppsBtn .sapMBtnContent {\n    padding-left: .325rem;\n}\n\n.nepOpenAppsClose.sapUiIcon {\n    margin-right: 1rem;\n    font-size: 1rem !important;\n}\n\n.nepOverflowMenu .sapMBtnInner,\n.nepMainBar .sapMBtnInner {\n    border: none;\n    background-color: transparent;\n}\n\n.nepOverflowMenu .headerMobileMenu .sapMBtnIcon,\n.nepMainBar .headerMobileMenu .sapMBtnIcon {\n    font-size: 1.375rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn .sapMBtnIcon {\n    font-size: 1.125rem;\n    padding-left: .5rem;\n}\n\n.nepOverflowMenu .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon,\n.nepMainBar .sapUiSizeCompact .nepOpenAppsBtn.nepOpenAppsBtnItem .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n.nepOverflowMenu.sapUiPopupWithPadding .sapMDialogScrollCont {\n    padding: 0;\n}\n\n.nepTopMenuIconContainerDesktop,\n.nepTopMenuIconContainerMobile {\n    min-width: 48px;\n}\n\n.nepTopMenuIconContainerMobile {\n    max-width: 48px;\n}\n\n.nepTopMenuIconDesktop,\n.nepTopMenuIconMobile {\n    max-height: 36px;\n}\n\n.nepUserActionText.sapMText {\n    text-align: left;\n    margin: .5rem 0 .5rem 1rem;\n    font-weight: bold;\n    font-size: 1rem;\n}\n\n.nepTopMenuIcon.sapMImg.sapMNoImg {\n    visibility: visible;\n}\n\n@media (max-width: 800px) {\n    .nepUserButton .sapMBtnContent {\n        display: none;\n    }\n}\n\n.nepTile .sapMNCIconImage {\n    margin-top: .75rem;\n}\n\n.nepFeed,\n.nepFeed .sapMText {\n    cursor: grab;\n}\n\n.nepTileContentContainer {\n    width: 100%;\n}\n\n.nepAppCacheUser .sapMLIB.sapMObjLItem {\n    margin-bottom: 5px;\n    border-radius: 10px;\n}\n\n.nepSelectUser {\n    padding: 0 .5rem;\n    border-radius: 0.25rem;\n    border-width: 1px;\n    border-style: solid;\n}\n\n.nepSelectUserBtn.sapMBtn,\n.nepSelectUserBtn .sapMBtnInner.sapMBtnText {\n    padding: 0;\n}\n\n.nepSelectUserBtn .sapMBtnInner {\n    height: 3rem;\n}\n\n.nepSelectUserBtn .sapMBtnContent {\n    line-height: 2.875rem;\n}\n\n/* CHART FIX */\n\n.sapSuiteRMC.sapSuiteRMCSizeResponsive {\n    max-height: 4.75rem;\n    max-width: 4.75rem;\n}\n\n.nepMinimized .sapMTextLineClamp,\n.nepMinimized .sapMOHRTitleTextWrappable {\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    display: block;\n}\n\n.sapMNC {\n    width: 100%;\n}\n\n.nepHiddenItem {\n    opacity: .25;\n    pointer-events: none;\n}\n\n.nepHiddenItem .sapMLIBIconDel {\n    opacity: 0;\n    pointer-events: none;\n}\n\n/* HELP LABLE */\n\n.sapUiFormLblColon .sapUiFormElementLbl>.sapMLabel.nepLabelHelp:after {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    vertical-align: inherit;\n    margin-left: .325rem;\n}\n\n.sapMLabel.nepLabelHelp {\n    pointer-events: none;\n    cursor: pointer;\n}\n\n.sapMLabel.nepLabelHelp::after {\n    pointer-events: all;\n}\n\n.sapUiFormResGridCont>.sapUiFormElementLbl>.nepLabelHelp.sapMLabel {\n    width: auto;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp {\n    width: 100%;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:after,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:after {\n    content: \":\";\n    pointer-events: none;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n.sapUiRespGridMedia-Std-Phone.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanS12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Tablet.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanM12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-Desktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanL12)>.sapMLabel.nepLabelHelp:before,\n.sapUiRespGridMedia-Std-LargeDesktop.sapUiFormResGridCont>.sapUiFormElementLbl:not(.sapUiRespGridSpanXL12)>.sapMLabel.nepLabelHelp:before {\n    font-family: 'SAP-icons';\n    content: \"\\e1c4\";\n    margin-right: .325rem;\n    vertical-align: inherit;\n    pointer-events: all;\n}\n\n.sapMLabelRequired.nepLabelHelp:before {\n    content: inherit;\n    font-size: inherit;\n    font-weight: inherit;\n    position: inherit;\n    vertical-align: inherit;\n    line-height: inherit;\n}\n\n/* SCROLLBAR COLOR */\n\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeLight ::-webkit-scrollbar-thumb:hover {\n    background-color: var(--lightGreySecondary);\n}\n\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb,\nhtml.sap-desktop.nepThemeDark ::-webkit-scrollbar-thumb:hover {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* BACKGROUND COLOR */\n\n.nepThemeLight .nepTopMenu {\n    background: var(--white);\n}\n\n.nepThemeDark .nepTopMenu {\n    background: var(--darkThemePrimaryBackground);\n    border-radius: 0;\n}\n\n.nepThemeLight .nepNavBarContent {\n    background: var(--white);\n}\n\n.nepThemeDark .nepNavBarContent {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepMainBar {\n    background: var(--white);\n}\n\n.nepThemeDark .nepMainBar {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLayoutOpenApps {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepLayoutOpenApps {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: var(--lightThemeNotification);\n}\n\n.nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n    background-color: var(--darkThemeNotification);\n}\n\n.nepThemeLight .nepSelectUser {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepSelectUser {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .nepLaunchpadMenuSettings {\n    background: var(--white);\n}\n\n.nepThemeDark .nepLaunchpadMenuSettings {\n    background: var(--darkThemeSecondaryBackground);\n}\n\n.nepThemeLight .numPad .sapMBtnInner,\n.nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeLight .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .numPad .sapMBtnInner,\n.nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n.nepThemeDark .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    background-color: rgba(255, 255, 255, 0.2);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMCbBg {\n    background: rgba(0, 0, 0, 0.1);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMCbBg {\n    background: rgba(255, 255, 255, 0.1);\n}\n\n.nepThemeLight .nepLogonLayout {\n    background: rgba(0, 0, 0, 0.2);\n}\n\n.nepThemeDark .nepLogonLayout {\n    background-color: rgb(255, 255, 255, 0.2);\n}\n\n@media (max-width: 420px) {\n    .nepThemeLight .nepLogonLayout,\n    .nepThemeDark .nepLogonLayout {\n        background-color: transparent;\n    }\n}\n\n.nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n    background-color: var(--white);\n}\n\n.nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n    background-color: var(--darkThemeSecondaryBackground);\n}\n\n/* TEXT COLOR */\n\n.nepNavBarActionInverse .sapMBtnCustomIcon {\n    color: white !important;\n}\n\n.nepNavBarActionInverse .sapMBtnInner {\n    color: white !important;\n}\n\n.nepThemeLight .nepMainBar .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent .sapMBtn,\n.nepThemeLight .nepTopMenuContent .sapMBtnInner,\n.nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n    color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepMainBar .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent .sapMBtn,\n.nepThemeDark .nepTopMenuContent .sapMBtnInner,\n.nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n.nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n.nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .sapMNCIconImage {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMNCIconImage {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepSubMenu .sapMBtnInner {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepSubMenu .sapMBtnInner {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFB,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFB {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFB,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFB {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n.nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n.nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepOpenAppsClose.sapUiIcon {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepOpenAppsClose.sapUiIcon {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepPopover .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMBtnIcon {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMBtnIcon {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n.nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeLight .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n.nepThemeDark .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n.nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepUserActionText.sapMText {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepUserActionText.sapMText {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepPopSimpleTitle.sapMText {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepPopSimpleTitle.sapMText {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n    color: var(--lightThemeRequired);\n}\n\n.nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n    color: var(--lightThemeRequired);\n}\n\n.nepThemeLight .nepNotifHeader.sapMText {\n    color: var(--darkGreyPrimary);\n}\n\n.nepThemeDark .nepNotifHeader.sapMText {\n    color: var(--lightGreyPrimary);\n}\n\n.nepThemeLight .nepFeed .sapMText {\n    color: var(--darkSecondaryColor);\n}\n\n.nepThemeDark .nepFeed .sapMText {\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n    color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n    color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n.nepThemeLight .numPad .sapMBtnInner {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n.nepThemeDark .numPad .sapMBtnInner {\n    color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner,\n.nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n.nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner,\n.nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n.nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n    color: var(--lightPrimaryColor);\n}\n\n/* BORDER COLOR */\n\n.nepThemeLight .nepMainBar .sapMSFF,\n.nepThemeLight .nepPopover .sapMSFF,\n.nepThemeLight .nepMainBar .sapMSFF:hover,\n.nepThemeLight .nepPopover .sapMSFF:hover,\n.nepThemeLight .nepLaunchpadMenuSettings {\n    border-color: var(--lightGreyPrimary);\n}\n\n.nepThemeDark .nepMainBar .sapMSFF,\n.nepThemeDark .nepPopover .sapMSFF,\n.nepThemeDark .nepMainBar .sapMSFF:hover,\n.nepThemeDark .nepPopover .sapMSFF:hover,\n.nepThemeDark .nepLaunchpadMenuSettings {\n    border-color: var(--darkGreyPrimary);\n}\n\n.nepThemeLight .nepTopMenu,\n.nepThemeLight .nepMainBar,\n.nepThemeLight .nepNavBarContent,\n.nepThemeLight .nepNavBarContent .sapMTBStandard,\n.nepThemeLight .nepDocPage {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeDark .nepTopMenu,\n.nepThemeDark .nepMainBar,\n.nepThemeDark .nepNavBarContent,\n.nepThemeDark .nepNavBarContent .sapMTBStandard,\n.nepThemeDark .nepDocPage {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeLight .nepCatTitle.sapMTitle,\n.nepThemeLight .nepCatSubTitle.sapMTitle {\n    border-color: var(--darkPrimaryColor);\n}\n\n.nepThemeDark .nepCatTitle.sapMTitle,\n.nepThemeDark .nepCatSubTitle.sapMTitle {\n    border-color: var(--lightPrimaryColor);\n}\n\n.nepThemeLight .nepTopMenuActive,\n.nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeLight .nepLayoutOpenApps.nepIconActive {\n    border-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepTopMenuActive,\n.nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n.nepThemeDark .nepLayoutOpenApps.nepIconActive {\n    border-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n    border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepOverflowMenu.sapMPopover {\n    border-top-color: var(--darkActiveMenuColor);\n}\n\n.nepThemeDark .nepOverflowMenu.sapMPopover {\n    border-top-color: var(--lightActiveMenuColor);\n}\n\n.nepThemeLight .nepSelectUser {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepSelectUser {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .nepLogonLayout .sapMBtnInner {\n    border-color: var(--darkGreySecondary);\n}\n\n.nepThemeDark .nepLogonLayout .sapMBtnInner {\n    border-color: var(--lightGreySecondary);\n}\n\n.nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    border-color: rgba(0, 0, 0, 0.5);\n}\n\n.nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n    border-color: rgba(255, 255, 255, 0.5);\n}\n\n/* BOX SHADOW */\n\n.nepThemeLight .nepLayoutOpenApps,\n.nepThemeLight .nepPinOpenApps,\n.nepThemeLight .nepOverflowMenu.sapMPopover,\n.nepThemeLight .nepPopover.sapMPopover,\n.nepThemeLight .nepTileCards,\n.nepThemeLight .nepFioriStyle .nepTile,\n.nepThemeLight .nepClientInstallLayout {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepLayoutOpenApps,\n.nepThemeDark .nepPinOpenApps,\n.nepThemeDark .nepOverflowMenu.sapMPopover,\n.nepThemeDark .nepPopover.sapMPopover,\n.nepThemeDark .nepTileCards,\n.nepThemeDark .nepFioriStyle .nepTile,\n.nepThemeDark .nepClientInstallLayout {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeLight .nepFCard:hover,\n.nepThemeLight .nepLayoutOpenApps:hover,\n.nepThemeLight .nepPinOpenApps:hover,\n.nepThemeLight .nepOverflowMenu.sapMPopover:hover,\n.nepThemeLight .nepTileCards:hover,\n.nepThemeLight .nepFioriStyle .nepTile:hover,\n.nepThemeLight .nepICCardActionHover {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n.nepThemeDark .nepFCard:hover,\n.nepThemeDark .nepLayoutOpenApps:hover,\n.nepThemeDark .nepPinOpenApps:hover,\n.nepThemeDark .nepOverflowMenu.sapMPopover:hover,\n.nepThemeDark .nepTileCards:hover,\n.nepThemeDark .nepFioriStyle .nepTile:hover,\n.nepThemeDark .nepICCardActionHover {\n    box-shadow: 0 8px 18px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n}\n\n/* SAP QUARTZ LIGHT */\n\n.nepThemeLight .nepActionContainer .sapMBtnInner,\n.nepThemeLight .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: var(--darkPrimaryColor);\n    color: var(--darkPrimaryColor);\n}\n\n.nepThemeLight .nepActionContainer .sapMBtnIcon {\n    color: var(--darkPrimaryColor);\n}\n\n/* SAP QUARTZ DARK */\n\n.nepThemeDark .nepActionContainer .sapMBtnInner,\n.nepThemeDark .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n    background-color: transparent;\n    border-color: var(--lightSecondaryColor);\n    color: var(--lightSecondaryColor);\n}\n\n.nepThemeDark .nepActionContainer .sapMBtnIcon,\n.nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n    color: var(--lightSecondaryColor);\n}\n\n/* NEPTUNE TREE CATEGORY (TILE GROUPS)*/\n\n.nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 1rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 2.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 4rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"] {\n    padding-left: 5.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"2\"].nepTreeItemAction {\n    padding-left: 1.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"3\"].nepTreeItemAction {\n    padding-left: 3.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"4\"].nepTreeItemAction {\n    padding-left: 5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"5\"].nepTreeItemAction {\n    padding-left: 6.5rem !important;\n}\n\n.nepTreeCategory li[aria-level=\"6\"].nepTreeItemAction {\n    padding-left: 7rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 0 !important;\n    padding-right: 2rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 0 !important;\n    padding-right: 4rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 0 !important;\n    padding-right: 6rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"2\"] {\n    padding-left: 0 !important;\n    padding-right: 1.5rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"3\"] {\n    padding-left: 0 !important;\n    padding-right: 3rem !important;\n}\n\nhtml[dir=\"rtl\"] .nepTreeCategory li[aria-level=\"4\"] {\n    padding-left: 0 !important;\n    padding-right: 4.5rem !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseChildren {\n    background-color: transparent;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander {\n    font-family: 'fa-solid' !important;\n}\n\n.nepTreeCategory .sapMTreeItemBaseLeaf>.sapMTreeItemBaseExpander {\n    opacity: 1;\n}\n\n.nepTreeCategory .nepTreeItemAction.sapMTreeItemBaseLeaf>.sapMTreeItemBaseExpander.sapUiIcon {\n    display: none;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n    font-family: 'fa-solid' !important;\n    font-size: 1.5rem;\n    margin-right: .125rem;\n}\n\n.nepTreeCategory .sapMTreeItemBaseExpander.sapUiIcon {\n    font-size: 1.125rem;\n}\n\n.nepOpenAppsBtn:not(.nepOpenAppsBtnItem) .sapMBtnIcon {\n    font-size: 1.5rem;\n}\n\n.nepOpenAppsBtn .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n.nepOpenAppsBtnMaster .sapMBtnIcon {\n    font-size: 1.125rem;\n    padding-left: .5rem;\n}\n\n.nepTreeCategory .sapMBtnInner.sapMBtnText .sapMBtnIcon {\n    font-size: 1rem;\n}\n\n@-webkit-keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n@-moz-keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n@keyframes fadein {\n    0% {\n        opacity: 0;\n    }\n    100% {\n        opacity: 1;\n    }\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* MENU*/\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTopMenuContent {\n    overflow: hidden;\n}\n\n.nepTopMenuContent .sapMBtnIcon {\n    font-size: 1.375rem;\n    line-height: 2.375rem;\n    width: 2.375rem;\n}\n\n.nepTopMenuContent .sapMBtn {\n    height: 3rem;\n}\n\n.nepTopMenuContent .sapMBtnInner {\n    height: 2.5rem;\n    min-width: 2.5rem;\n    border-radius: 0.2rem;\n}\n\n.nepTopMenuContent .sapMBtnContent {\n    line-height: 2.375rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner {\n    height: 1.5rem;\n    min-width: 1.5rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnInner.sapMBtnText,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft+.sapMBtnIconRight,\n.nepTopMenuContent .nepNotificationButton .sapMBtnIconLeft+.sapMBtnIconLeft {\n    padding-left: .25rem;\n    padding-right: .25rem;\n}\n\n.nepTopMenuContent .nepNotificationButton .sapMBtnContent {\n    line-height: 1.5rem;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* CANVAS */\n\n/*--------------------------------------------------------------------------------------------------*/\n\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:before {\n    box-shadow: -15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n    content: \" \";\n    height: 100%;\n    left: -15px;\n    position: absolute;\n    top: 0;\n    width: 15px;\n}\n\nhtml.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox:after {\n    box-shadow: 15px 0 15px -15px rgba(0, 0, 0, 0.15) inset;\n    content: \" \";\n    height: 100%;\n    position: absolute;\n    top: 0;\n    right: -15px;\n    width: 15px;\n}\n\nhtml.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xxxlarge);\n}\n\nhtml.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xxlarge);\n}\n\nhtml.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xlarge);\n}\n\nhtml.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--large);\n}\n\nhtml.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--medium);\n}\n\nhtml.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--small);\n}\n\nhtml.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n    max-width: var(--xsmall);\n}\n\n.nepShellWidthApp .sapMShellCentralBox {\n    max-width: var(--large);\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* NORMAL GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid {\n    display: grid;\n    grid-gap: var(--gridGap);\n    grid-template-columns: repeat(12, var(--grid12));\n    width: 100%;\n    margin-bottom: 8px;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n    grid-template-columns: repeat(10, var(--grid10));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge,\n.nepGrid.nepGroupXXLarge {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge,\n.nepGrid.nepGroupXLarge {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge,\n.nepGrid.nepGroupLarge {\n    grid-template-columns: repeat(4, var(--grid4));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium,\n.nepGrid.nepGroupMedium {\n    grid-template-columns: repeat(3, var(--grid3));\n    width: 100%;\n}\n\n.nepGrid.nepGridSmall,\n.nepGrid.nepGroupSmall {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridXSmall,\n.nepGrid.nepGroupXSmall {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n.nepHeaderXXXLarge,\n.nepGrid.nepGroupXXXLarge {\n    max-width: var(--xxxlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXXLarge,\n.nepGrid.nepGroupXXLarge {\n    max-width: var(--xxlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXLarge,\n.nepGrid.nepGroupXLarge {\n    max-width: var(--xlarge);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderLarge,\n.nepGrid.nepGroupLarge {\n    max-width: var(--large);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderMedium,\n.nepGrid.nepGroupMedium {\n    max-width: var(--medium);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderSmall,\n.nepGrid.nepGroupSmall {\n    max-width: var(--small);\n    margin: 0 auto 0 auto;\n}\n\n.nepHeaderXSmall,\n.nepGrid.nepGroupXSmall {\n    max-width: var(--xsmall);\n    margin: 0 auto 0 auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* MANY GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridMany {\n    grid-template-columns: repeat(14, var(--grid14));\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridMany,\n.nepGrid.nepGroupXXXLarge.nepGridMany {\n    grid-template-columns: repeat(12, var(--grid12));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridMany,\n.nepGrid.nepGroupXXLarge.nepGridMany {\n    grid-template-columns: repeat(10, var(--grid10));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridMany,\n.nepGrid.nepGroupXLarge.nepGridMany {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridMany,\n.nepGrid.nepGroupLarge.nepGridMany {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridMany,\n.nepGrid.nepGroupMedium.nepGridMany {\n    grid-template-columns: repeat(3, var(--grid3));\n    width: 100%;\n}\n\n.nepGrid.nepGridSmall.nepGridMany,\n.nepGrid.nepGroupSmall.nepGridMany {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridXSmall.nepGridMany,\n.nepGrid.nepGroupXSmall.nepGridMany {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* FEW GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridFew {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridFew,\n.nepGrid.nepGroupXXXLarge.nepGridFew {\n    grid-template-columns: repeat(8, var(--grid8));\n    width: 100%;\n}\n\n.nepGrid.nepGridXXLarge.nepGridFew,\n.nepGrid.nepGroupXXLarge.nepGridFew {\n    grid-template-columns: repeat(6, var(--grid6));\n    width: 100%;\n}\n\n.nepGrid.nepGridXLarge.nepGridFew,\n.nepGrid.nepGroupXLarge.nepGridFew {\n    grid-template-columns: repeat(4, var(--grid4));\n    width: 100%;\n}\n\n.nepGrid.nepGridLarge.nepGridFew,\n.nepGrid.nepGroupLarge.nepGridFew {\n    grid-template-columns: repeat(2, var(--grid2));\n    width: 100%;\n}\n\n.nepGrid.nepGridMedium.nepGridFew,\n.nepGrid.nepGroupMedium.nepGridFew,\n.nepGrid.nepGridSmall.nepGridFew,\n.nepGrid.nepGroupSmall.nepGridFew,\n.nepGrid.nepGridXSmall.nepGridFew,\n.nepGrid.nepGroupXSmall.nepGridFew {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* ONE GRID */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridOne {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n    margin-bottom: var(--gridGap);\n}\n\n.nepGrid.nepGridXXXLarge.nepGridOne,\n.nepGrid.nepGroupXXXLarge.nepGridOne,\n.nepGrid.nepGridXXLarge.nepGridOne,\n.nepGrid.nepGroupXXLarge.nepGridOne,\n.nepGrid.nepGridXLarge.nepGridOne,\n.nepGrid.nepGroupXLarge.nepGridOne,\n.nepGrid.nepGridLarge.nepGridOne,\n.nepGrid.nepGroupLarge.nepGridOne,\n.nepGrid.nepGridMedium.nepGridOne,\n.nepGrid.nepGroupMedium.nepGridOne,\n.nepGrid.nepGridSmall.nepGridOne,\n.nepGrid.nepGroupSmall.nepGridOne,\n.nepGrid.nepGridXSmall.nepGridOne,\n.nepGrid.nepGroupXSmall.nepGridOne {\n    grid-template-columns: var(--grid1);\n    width: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTile,\n.nepTileContentContainer {\n    height: calc(100% - 2 * var(--cardMargin));\n    min-height: var(--gridHeight);\n}\n\n.nepTile.nepTileCards>.sapMFlexItem {\n    height: 100%;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE HEIGHT */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTileTall {\n    grid-row: auto / span 2;\n    min-height: calc(2 * var(--gridHeight));\n}\n\n.nepTileTower {\n    grid-row: auto / span 3;\n    min-height: calc(3 * var(--gridHeight));\n}\n\n.nepTileSkyscraper {\n    grid-row: auto / span 4;\n    min-height: calc(4 * var(--gridHeight));\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepTileMedium {\n    grid-column: auto / span 2;\n}\n\n.nepTileWide {\n    grid-column: auto / span 3;\n}\n\n.nepTileWider {\n    grid-column: auto / span 4;\n}\n\n.nepTileMax {\n    grid-column: auto / span 12;\n}\n\n.nepGroupXXXLarge .nepTileMax,\n.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 10;\n}\n\n.nepGroupXXLarge .nepTileMax,\n.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGroupXLarge .nepTileMax,\n.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGroupLarge .nepTileMax,\n.nepGridLarge .nepTileMax {\n    grid-column: auto / span 4;\n}\n\n.nepGroupMedium .nepTileWider,\n.nepGroupMedium .nepTileMax,\n.nepGridMedium .nepTileWider,\n.nepGridMedium .nepTileMax {\n    grid-column: auto / span 3;\n}\n\n.nepGroupSmall .nepTileWide,\n.nepGroupSmall .nepTileWider,\n.nepGroupSmall .nepTileMax,\n.nepGridSmall .nepTileWide,\n.nepGridSmall .nepTileWider,\n.nepGridSmall .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGroupXSmall .nepTileMedium,\n.nepGroupXSmall .nepTileWide,\n.nepGroupXSmall .nepTileWider,\n.nepGroupXSmall .nepTileMax,\n.nepGridXSmall .nepTileMedium,\n.nepGridXSmall .nepTileWide,\n.nepGridXSmall .nepTileWider,\n.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH MANY */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGridMany .nepTileMax {\n    grid-column: auto / span 14;\n}\n\n.nepGridMany.nepGroupXXXLarge .nepTileMax,\n.nepGridMany.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 12;\n}\n\n.nepGridMany.nepGroupXXLarge .nepTileMax,\n.nepGridMany.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 10;\n}\n\n.nepGridMany.nepGroupXLarge .nepTileMax,\n.nepGridMany.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridMany.nepGroupLarge .nepTileMax,\n.nepGridMany.nepGridLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGridMany.nepGroupMedium .nepTileWider,\n.nepGridMany.nepGroupMedium .nepTileMax,\n.nepGridMany.nepGridMedium .nepTileWider,\n.nepGridMany.nepGridMedium .nepTileMax {\n    grid-column: auto / span 3;\n}\n\n.nepGridMany.nepGroupSmall .nepTileWide,\n.nepGridMany.nepGroupSmall .nepTileWider,\n.nepGridMany.nepGroupSmall .nepTileMax,\n.nepGridMany.nepGridSmall .nepTileWide,\n.nepGridMany.nepGridSmall .nepTileWider,\n.nepGridMany.nepGridSmall .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGridMany.nepGroupXSmall .nepTileMedium,\n.nepGridMany.nepGroupXSmall .nepTileWide,\n.nepGridMany.nepGroupXSmall .nepTileWider,\n.nepGridMany.nepGroupXSmall .nepTileMax,\n.nepGridMany.nepGridXSmall .nepTileMedium,\n.nepGridMany.nepGridXSmall .nepTileWide,\n.nepGridMany.nepGridXSmall .nepTileWider,\n.nepGridMany.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH FEW */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGridFew .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridFew.nepGroupXXXLarge .nepTileMax,\n.nepGridFew.nepGridXXXLarge .nepTileMax {\n    grid-column: auto / span 8;\n}\n\n.nepGridFew.nepGroupXXLarge .nepTileMax,\n.nepGridFew.nepGridXXLarge .nepTileMax {\n    grid-column: auto / span 6;\n}\n\n.nepGridFew.nepGroupXLarge .nepTileMax,\n.nepGridFew.nepGridXLarge .nepTileMax {\n    grid-column: auto / span 4;\n}\n\n.nepGridFew.nepGroupLarge .nepTileWide,\n.nepGridFew.nepGroupLarge .nepTileWider,\n.nepGridFew.nepGroupLarge .nepTileMax,\n.nepGridFew.nepGridLarge .nepTileWide,\n.nepGridFew.nepGridLarge .nepTileWider,\n.nepGridFew.nepGridLarge .nepTileMax {\n    grid-column: auto / span 2;\n}\n\n.nepGridFew.nepGroupMedium .nepTileMedium,\n.nepGridFew.nepGroupMedium .nepTileWide,\n.nepGridFew.nepGroupMedium .nepTileWider,\n.nepGridFew.nepGroupMedium .nepTileMax,\n.nepGridFew.nepGridMedium .nepTileMedium,\n.nepGridFew.nepGridMedium .nepTileWide,\n.nepGridFew.nepGridMedium .nepTileWider,\n.nepGridFew.nepGridMedium .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n.nepGridFew.nepGroupSmall .nepTileMedium,\n.nepGridFew.nepGroupSmall .nepTileWide,\n.nepGridFew.nepGroupSmall .nepTileWider,\n.nepGridFew.nepGroupSmall .nepTileMax,\n.nepGridFew.nepGridSmall .nepTileMedium,\n.nepGridFew.nepGridSmall .nepTileWide,\n.nepGridFew.nepGridSmall .nepTileWider,\n.nepGridFew.nepGridSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n.nepGridFew.nepGroupXSmall .nepTileMedium,\n.nepGridFew.nepGroupXSmall .nepTileWide,\n.nepGridFew.nepGroupXSmall .nepTileWider,\n.nepGridFew.nepGroupXSmall .nepTileMax,\n.nepGridFew.nepGridXSmall .nepTileMedium,\n.nepGridFew.nepGridXSmall .nepTileWide,\n.nepGridFew.nepGridXSmall .nepTileWider,\n.nepGridFew.nepGridXSmall .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE WIDTH ONE */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridOne .nepTileMedium,\n.nepGrid.nepGridOne .nepTileWide,\n.nepGrid.nepGridOne .nepTileWider,\n.nepGrid.nepGridOne .nepTileMax {\n    grid-column: auto / span 1;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* TILE ALIGNMENT \n/*--------------------------------------------------------------------------------------------------*/\n\n.nepHeaderAlignLeft,\n.nepGrid.nepGridAlignLeft {\n    margin: 0 auto 0 0;\n}\n\n.nepHeaderAlignRight,\n.nepGrid.nepGridAlignRight {\n    margin: 0 0 0 auto;\n}\n\n/* --------------------------------------------------------------------------------------------------\n/* FIORI TILES \n/*--------------------------------------------------------------------------------------------------*/\n\n.nepGrid.nepGridFiori {\n    display: flex;\n    flex-wrap: wrap;\n}\n\n.nepGridFiori .nepTileMax {\n    width: 100%;\n}\n\n.nepGridFiori .nepTile {\n    width: 11rem;\n    height: 11rem;\n}\n\n.nepGridFiori .nepTile.nepFioriStyleTwoByOne {\n    width: 22.5rem;\n}\n\n.nepTileCards {\n    height: 100%;\n}\n\n.nepTileCards,\n.nepFioriStyle .nepTile {\n    border-radius: 4px;\n}\n\n.nepFitTileContent .nepTileContentContainer {\n    min-height: auto;\n}\n\n.nepFitTileContent.nepTileCards {\n    height: auto;\n}\n\n/*--------------------------------------------------------------------------------------------------*/\n\n/* INTERNET EXPLORER */\n\n/*--------------------------------------------------------------------------------------------------*/\n\n@media all and (-ms-high-contrast: none),\n(-ms-high-contrast: active) {\n    .sapFCard .sapFCardHeader {\n        box-shadow: none !important;\n    }\n    .nepFCardContainer>.sapMFlexItem,\n    .nepFCardBody>.sapMFlexItem {\n        width: 100% !important;\n    }\n    .nepGrid {\n        display: flex;\n        flex-wrap: wrap;\n    }\n    html.sap-desktop .nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    html.sap-desktop .nepShellXXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 2360px;\n    }\n    html.sap-desktop .nepShellXXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1880px;\n    }\n    html.sap-desktop .nepShellXLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1580px;\n    }\n    html.sap-desktop .nepShellLarge.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    html.sap-desktop .nepShellMedium.nepShell.sapMShellAppWidthLimited>.sapMShellCentralBox {\n        max-width: 980px;\n    }\n    html.sap-desktop .nepShellSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 680px;\n    }\n    html.sap-desktop .nepShellXSmall.nepShell.sapMShellAppWidthLimited .sapMShellCentralBox {\n        max-width: 380px;\n    }\n    .nepShellWidthApp .sapMShellCentralBox {\n        max-width: 1280px;\n    }\n    .nepHeaderXXXLarge,\n    .nepGrid.nepGroupXXXLarge {\n        max-width: 2360px;\n    }\n    .nepHeaderXXLarge,\n    .nepGrid.nepGroupXXLarge {\n        max-width: 1880px;\n    }\n    .nepHeaderXLarge,\n    .nepGrid.nepGroupXLarge {\n        max-width: 1580px;\n    }\n    .nepHeaderLarge,\n    .nepGrid.nepGroupLarge {\n        max-width: 1280px;\n    }\n    .nepHeaderMedium,\n    .nepGrid.nepGroupMedium {\n        max-width: 980px;\n    }\n    .nepHeaderSmall,\n    .nepGrid.nepGroupSmall {\n        max-width: 680px;\n    }\n    .nepHeaderXSmall,\n    .nepGrid.nepGroupXSmall {\n        max-width: 380px;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE HEIGHT */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepTile,\n    .nepTileContentContainer,\n    .nepFCardContainer,\n    .nepTileContainer {\n        min-height: 270px;\n    }\n    .nepTileTall {\n        min-height: 540px;\n    }\n    .nepTileTower {\n        min-height: 710px;\n    }\n    .nepTileSkyscraper {\n        min-height: 880px;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGrid .nepTileSmall {\n        width: 8.3333% !important;\n    }\n    .nepPageXXXLarge .nepGrid .nepTileSmall,\n    .nepGridXXXLarge.nepGrid .nepTileSmall {\n        width: 10% !important;\n    }\n    .nepPageXXLarge .nepGrid .nepTileSmall,\n    .nepGridXXLarge.nepGrid .nepTileSmall {\n        width: 12.5% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileSmall,\n    .nepGridXLarge.nepGrid .nepTileSmall {\n        width: 16.6666% !important;\n    }\n    .nepPageLarge .nepGrid .nepTileSmall,\n    .nepGridLarge.nepGrid .nepTileSmall {\n        width: 25% !important;\n    }\n    .nepPageMedium .nepGrid .nepTileSmall,\n    .nepGridMedium.nepGrid .nepTileSmall {\n        width: 50% !important;\n    }\n    .nepPageSmall .nepGrid .nepTileSmall,\n    .nepGridSmall.nepGrid .nepTileSmall,\n    .nepPageXSmall .nepGrid .nepTileSmall,\n    .nepGridXSmall.nepGrid .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileMedium {\n        width: 25% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileMedium,\n    .nepGridXLarge.nepGrid .nepTileMedium,\n    .nepPageLarge .nepGrid .nepTileMedium,\n    .nepGridLarge.nepGrid .nepTileMedium {\n        width: 50% !important;\n    }\n    .nepPageMedium .nepGrid .nepTileMedium,\n    .nepGridMedium.nepGrid .nepTileMedium,\n    .nepPageSmall .nepGrid .nepTileMedium,\n    .nepGridSmall.nepGrid .nepTileMedium,\n    .nepPageXSmall .nepGrid .nepTileMedium,\n    .nepGridXSmall.nepGrid .nepTileMedium {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileWide {\n        width: 25% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileWide,\n    .nepGridXLarge.nepGrid .nepTileWide {\n        width: 50% !important;\n    }\n    .nepPageLarge .nepGrid .nepTileWide,\n    .nepGridLarge.nepGrid .nepTileWide,\n    .nepPageMedium .nepGrid .nepTileWide,\n    .nepGridMedium.nepGrid .nepTileWide,\n    .nepPageSmall .nepGrid .nepTileWide,\n    .nepGridSmall.nepGrid .nepTileWide,\n    .nepPageXSmall .nepGrid .nepTileWide,\n    .nepGridXSmall.nepGrid .nepTileWide {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileWider {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGrid .nepTileWider,\n    .nepGridXLarge.nepGrid .nepTileWider,\n    .nepPageLarge .nepGrid .nepTileWider,\n    .nepGridLarge.nepGrid .nepTileWider,\n    .nepPageMedium .nepGrid .nepTileWider,\n    .nepGridMedium.nepGrid .nepTileWider,\n    .nepPageSmall .nepGrid .nepTileWider,\n    .nepGridSmall.nepGrid .nepTileWider,\n    .nepPageXSmall .nepGrid .nepTileWide,\n    .nepGridXSmall.nepGrid .nepTileWider {\n        width: 100% !important;\n    }\n    .nepGrid .nepTileMax {\n        width: 100% !important;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH FEW */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGridFew .nepTileSmall {\n        width: 10% !important;\n    }\n    .nepPageXXXLarge .nepGridFew .nepTileSmall,\n    .nepGridXXXLarge.nepGridFew .nepTileSmall {\n        width: 12.5% !important;\n    }\n    .nepPageXXLarge .nepGridFew .nepTileSmall,\n    .nepGridXXLarge.nepGridFew .nepTileSmall {\n        width: 16.6666% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileSmall,\n    .nepGridXLarge.nepGridFew .nepTileSmall {\n        width: 25% !important;\n    }\n    .nepPageLarge .nepGridFew .nepTileSmall,\n    .nepGridLarge.nepGridFew .nepTileSmall {\n        width: 50% !important;\n    }\n    .nepPageMedium .nepGridFew .nepTileSmall,\n    .nepGridMedium.nepGridFew .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepPageSmall .nepGridFew .nepTileSmall,\n    .nepGridSmall.nepGridFew .nepTileSmall,\n    .nepPageXSmall .nepGridFew .nepTileSmall,\n    .nepGridXSmall.nepGridFew .nepTileSmall {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileMedium {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileMedium,\n    .nepGridXLarge.nepGridFew .nepTileMedium,\n    .nepPageLarge .nepGridFew .nepTileMedium,\n    .nepGridLarge.nepGridFew .nepTileMedium,\n    .nepPageMedium .nepGridFew .nepTileMedium,\n    .nepGridMedium.nepGridFew .nepTileMedium,\n    .nepPageSmall .nepGridFew .nepTileMedium,\n    .nepGridSmall.nepGridFew .nepTileMedium,\n    .nepPageXSmall .nepGridFew .nepTileMedium,\n    .nepGridXSmall.nepGridFew .nepTileMedium {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileWide {\n        width: 50% !important;\n    }\n    .nepPageXLarge .nepGridFew .nepTileWide,\n    .nepGridXLarge.nepGridFew .nepTileWide,\n    .nepPageLarge .nepGridFew .nepTileWide,\n    .nepGridLarge.nepGridFew .nepTileWide,\n    .nepPageMedium .nepGridFew .nepTileWide,\n    .nepGridMedium.nepGridFew .nepTileWide,\n    .nepPageSmall .nepGridFew .nepTileWide,\n    .nepGridSmall.nepGridFew .nepTileWide,\n    .nepPageXSmall .nepGridFew .nepTileWide,\n    .nepGridXSmall.nepGridFew .nepTileWide {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileWider,\n    .nepPageXLarge .nepGridFew .nepTileWider,\n    .nepGridXLarge.nepGridFew .nepTileWider,\n    .nepPageLarge .nepGridFew .nepTileWider,\n    .nepGridLarge.nepGridFew .nepTileWider,\n    .nepPageMedium .nepGridFew .nepTileWider,\n    .nepGridMedium.nepGridFew .nepTileWider,\n    .nepPageSmall .nepGridFew .nepTileWider,\n    .nepGridSmall.nepGridFew .nepTileWider,\n    .nepPageXSmall .nepGridFew .nepTileWide,\n    .nepGridXSmall.nepGridFew .nepTileWider {\n        width: 100% !important;\n    }\n    .nepGridFew .nepTileMax {\n        width: 100% !important;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* TILE WIDTH ONE */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepGridOne .nepTileSmall,\n    .nepPageXXXLarge .nepGridOne .nepTileSmall,\n    .nepGridXXXLarge.nepGridOne .nepTileSmall,\n    .nepPageXXLarge .nepGridOne .nepTileSmall,\n    .nepGridXXLarge.nepGridOne .nepTileSmall,\n    .nepPageXLarge .nepGridOne .nepTileSmall,\n    .nepGridXLarge.nepGridOne .nepTileSmall,\n    .nepPageLarge .nepGridOne .nepTileSmall,\n    .nepGridLarge.nepGridOne .nepTileSmall,\n    .nepPageMedium .nepGridOne .nepTileSmall,\n    .nepGridMedium.nepGridOne .nepTileSmall,\n    .nepPageSmall .nepGridOne .nepTileSmall,\n    .nepGridSmall.nepGridOne .nepTileSmall,\n    .nepPageXSmall .nepGridOne .nepTileSmall,\n    .nepGridXSmall.nepGridOne .nepTileSmall,\n    .nepGridOne .nepTileMedium,\n    .nepPageXLarge .nepGridOne .nepTileMedium,\n    .nepGridXLarge.nepGridOne .nepTileMedium,\n    .nepPageLarge .nepGridOne .nepTileMedium,\n    .nepGridLarge.nepGridOne .nepTileMedium,\n    .nepPageMedium .nepGridOne .nepTileMedium,\n    .nepGridMedium.nepGridOne .nepTileMedium,\n    .nepPageSmall .nepGridOne .nepTileMedium,\n    .nepGridSmall.nepGridOne .nepTileMedium,\n    .nepPageXSmall .nepGridOne .nepTileMedium,\n    .nepGridXSmall.nepGridOne .nepTileMedium,\n    .nepGridOne .nepTileWide,\n    .nepPageXLarge .nepGridOne .nepTileWide,\n    .nepGridXLarge.nepGridOne .nepTileWide,\n    .nepPageLarge .nepGridOne .nepTileWide,\n    .nepGridLarge.nepGridOne .nepTileWide,\n    .nepPageMedium .nepGridOne .nepTileWide,\n    .nepGridMedium.nepGridOne .nepTileWide,\n    .nepPageSmall .nepGridOne .nepTileWide,\n    .nepGridSmall.nepGridOne .nepTileWide,\n    .nepPageXSmall .nepGridOne .nepTileWide,\n    .nepGridXSmall.nepGridOne .nepTileWide,\n    .nepGridOne .nepTileWider,\n    .nepPageXLarge .nepGridOne .nepTileWider,\n    .nepGridXLarge.nepGridOne .nepTileWider,\n    .nepPageLarge .nepGridOne .nepTileWider,\n    .nepGridLarge.nepGridOne .nepTileWider,\n    .nepPageMedium .nepGridOne .nepTileWider,\n    .nepGridMedium.nepGridOne .nepTileWider,\n    .nepPageSmall .nepGridOne .nepTileWider,\n    .nepGridSmall.nepGridOne .nepTileWider,\n    .nepPageXSmall .nepGridOne .nepTileWide,\n    .nepGridXSmall.nepGridOne .nepTileWider,\n    .nepGridOne .nepTileMax {\n        width: 100% !important;\n    }\n    .nepGrid.nepGridFiori .nepTileContainer {\n        width: 11.5rem !important;\n    }\n    .nepGrid.nepGridFiori .nepTileContainer.nepFioriStyleTwoByOne {\n        width: 23rem !important;\n    }\n    /* BACKGROUND COLOR */\n    .nepThemeLight .nepTopMenu {\n        background: white;\n    }\n    .nepThemeDark .nepTopMenu {\n        background: #1C2228;\n    }\n    .nepThemeLight .nepNavBarContent {\n        background: white;\n    }\n    .nepThemeDark .nepNavBarContent {\n        background: #29313a;\n    }\n    .nepThemeLight .nepMainBar {\n        background: white;\n    }\n    .nepThemeDark .nepMainBar {\n        background: #29313a;\n    }\n    .nepThemeLight .nepLayoutOpenApps {\n        background-color: white;\n    }\n    .nepThemeDark .nepLayoutOpenApps {\n        background-color: #29313a;\n    }\n    .nepThemeLight .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n        background-color: #dd0000;\n    }\n    .nepThemeDark .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n        background-color: #dd0000;\n    }\n    .nepThemeLight .nepSelectUser {\n        background-color: white;\n    }\n    .nepThemeDark .nepSelectUser {\n        background-color: #29313a;\n    }\n    .nepThemeLight .nepLaunchpadMenuSettings {\n        background: white;\n    }\n    .nepThemeDark .nepLaunchpadMenuSettings {\n        background: #29313a;\n    }\n    .nepThemeLight .numPad .sapMBtnInner,\n    .nepThemeLight .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n    .nepThemeLight .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        background-color: rgba(0, 0, 0, 0.2);\n    }\n    .nepThemeDark .numPad .sapMBtnInner,\n    .nepThemeDark .nepNumpadPanel .sapMCbBg.sapMCbMarkChecked,\n    .nepThemeDark .nepNumpadPanel .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        background-color: rgba(255, 255, 255, 0.2);\n    }\n    .nepThemeLight .nepNumpadPanel .sapMCbBg {\n        background: rgba(0, 0, 0, 0.1);\n    }\n    .nepThemeDark .nepNumpadPanel .sapMCbBg {\n        background: rgba(255, 255, 255, 0.1);\n    }\n    .nepThemeLight .nepLogonLayout {\n        background: rgba(0, 0, 0, 0.1);\n    }\n    .nepThemeDark .nepLogonLayout {\n        background-color: rgb(255, 255, 255, 0.1);\n    }\n    .nepThemeLight .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n        background-color: white;\n    }\n    .nepThemeDark .nepLogonLayoutBtn .sapMBtn:not(.numPad):hover>.sapMBtnHoverable {\n        background-color: #29313a;\n    }\n    /* TEXT COLOR */\n    .nepNavBarActionInverse .sapMBtnCustomIcon {\n        color: white !important;\n    }\n    .nepNavBarActionInverse .sapMBtnInner {\n        color: white !important;\n    }\n    .nepThemeLight .nepMainBar .sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent .sapMBtn,\n    .nepThemeLight .nepTopMenuContent .sapMBtnInner,\n    .nepThemeLight .nepTopMenuContent .sapMBtnIcon {\n        color: #444;\n    }\n    .nepThemeDark .nepMainBar .sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent .sapMBtn,\n    .nepThemeDark .nepTopMenuContent .sapMBtnInner,\n    .nepThemeDark .nepTopMenuContent .sapMBtnIcon {\n        color: #d3d7d9;\n    }\n    .nepThemeLight .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n    .nepThemeLight .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeLight .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n        color: #333;\n    }\n    .nepThemeDark .nepTopMenuContent .sapMBtn:hover>.sapMBtnHoverable,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent span.sapMBtnInner.sapMBtnEmphasized,\n    .nepThemeDark .nepTopMenuContent .sapMBtn:hover:not(.sapMBtnDisabled)>.sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent *.sapMBtn:hover:not(.sapMBtnDisabled)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed)>.sapMBtnIcon,\n    .nepThemeDark .nepTopMenuContent :not(.sapMBtnDisabled):not(.sapMSBActive)>span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover>.sapMBtnIcon {\n        color: #fafafa;\n    }\n    .nepThemeLight .sapMNCIconImage {\n        color: #333;\n    }\n    .nepThemeDark .sapMNCIconImage {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepSubMenu .sapMBtnInner {\n        color: #666;\n    }\n    .nepThemeDark .nepSubMenu .sapMBtnInner {\n        color: #dedede;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #666;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #dedede;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMSFF,\n    .nepThemeLight .nepMainBar .sapMSFB,\n    .nepThemeLight .nepPopover .sapMSFF,\n    .nepThemeLight .nepPopover .sapMSFB {\n        color: #888;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMSFF,\n    .nepThemeDark .nepMainBar .sapMSFB,\n    .nepThemeDark .nepPopover .sapMSFF,\n    .nepThemeDark .nepPopover .sapMSFB {\n        color: #ccc;\n    }\n    .nepThemeLight .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeLight .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #888;\n    }\n    .nepThemeDark .sapMDialogStretched.nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n    .nepThemeDark .sapMDialogStretched .nepOpenAppsClose.sapUiIcon,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMSTIIcon,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander {\n        color: #ccc;\n    }\n    .nepThemeLight .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n    .nepThemeLight .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n        color: #333;\n    }\n    .nepThemeDark .sapMDialogStretched .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMBtnInner,\n    .nepThemeDark .sapMDialogStretched.nepOverflowMenu .sapMTreeItemBase {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepOpenAppsClose.sapUiIcon {\n        color: #333;\n    }\n    .nepThemeDark .nepOpenAppsClose.sapUiIcon {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepPopover .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMBtnIcon {\n        color: #888;\n    }\n    .nepThemeDark .nepPopover .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMBtnIcon {\n        color: #ccc;\n    }\n    .nepThemeLight .nepOpenAppsBtn .sapMBtnIcon {\n        color: #888;\n    }\n    .nepThemeDark .nepOpenAppsBtn .sapMBtnIcon {\n        color: #ccc;\n    }\n    .nepThemeLight .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n        color: #888;\n    }\n    .nepThemeDark .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled)>.sapMBtnActive,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled)>.sapMBtnActive {\n        color: #ccc;\n    }\n    .nepThemeLight .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepPopover .sapMIBar-CTX .sapMLabel,\n    .nepThemeLight .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeLight .nepMainBar .sapMIBar-CTX .sapMLabel {\n        color: #333;\n    }\n    .nepThemeDark .nepPopover :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepPopover .sapMIBar-CTX .sapMLabel,\n    .nepThemeDark .nepMainBar :not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n    .nepThemeDark .nepMainBar .sapMIBar-CTX .sapMLabel {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepListSetting .sapMLIB.sapMLIBActive {\n        color: #333;\n    }\n    .nepThemeDark .nepListSetting .sapMLIB.sapMLIBActive {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepUserActionText.sapMText {\n        color: #333;\n    }\n    .nepThemeDark .nepUserActionText.sapMText {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n        color: #666;\n    }\n    .nepThemeDark .nepNotificationItem .sapMLIBIconDel:not(.sapMBtnDisabled) .sapMBtnTransparent>.sapMBtnIcon {\n        color: #dedede;\n    }\n    .nepThemeLight .nepPopSimpleTitle.sapMText {\n        color: #666;\n    }\n    .nepThemeDark .nepPopSimpleTitle.sapMText {\n        color: #dedede;\n    }\n    .nepThemeLight .sapMLabelRequired.nepLabelHelp:before {\n        color: #c14646;\n    }\n    .nepThemeDark .sapMLabelRequired.nepLabelHelp:before {\n        color: #c14646;\n    }\n    .nepThemeLight .nepNotifHeader.sapMText {\n        color: #666;\n    }\n    .nepThemeDark .nepNotifHeader.sapMText {\n        color: #dedede;\n    }\n    .nepThemeLight .nepFeed .sapMText {\n        color: #444;\n    }\n    .nepThemeDark .nepFeed .sapMText {\n        color: #d3d7d9;\n    }\n    .nepThemeLight .nepFCard .sapSuiteUiMicroChartNoData {\n        color: #ccc;\n    }\n    .nepThemeDark .nepFCard .sapSuiteUiMicroChartNoData {\n        color: #888;\n    }\n    .nepThemeLight .nepNumpadPanel .sapMBtnIcon,\n    .nepThemeLight .numPad .sapMBtnInner {\n        color: #333;\n    }\n    .nepThemeDark .nepNumpadPanel .sapMBtnIcon,\n    .nepThemeDark .numPad .sapMBtnInner {\n        color: #fafafa;\n    }\n    .nepThemeLight .nepLogonLayout .sapMBtnInner,\n    .nepThemeLight .nepAppCacheUser .sapMLIB.sapMLIBActive,\n    .nepThemeLight .nepAppCacheUser .sapMLIBActive div,\n    .nepThemeLight .nepAppCacheUser .sapMLIBActive .sapMText {\n        color: #333;\n    }\n    .nepThemeDark .nepLogonLayout .sapMBtnInner,\n    .nepThemeDark .nepAppCacheUser .sapMLIB.sapMLIBActive,\n    .nepThemeDark .nepAppCacheUser .sapMLIBActive div,\n    .nepThemeDark .nepAppCacheUser .sapMLIBActive .sapMText {\n        color: #fafafa;\n    }\n    /* BORDER COLOR */\n    .nepThemeLight .nepMainBar .sapMSFF,\n    .nepThemeLight .nepPopover .sapMSFF,\n    .nepThemeLight .nepMainBar .sapMSFF:hover,\n    .nepThemeLight .nepPopover .sapMSFF:hover,\n    .nepThemeLight .nepLaunchpadMenuSettings {\n        border-color: #dedede;\n    }\n    .nepThemeDark .nepMainBar .sapMSFF,\n    .nepThemeDark .nepPopover .sapMSFF,\n    .nepThemeDark .nepMainBar .sapMSFF:hover,\n    .nepThemeDark .nepPopover .sapMSFF:hover,\n    .nepThemeDark .nepLaunchpadMenuSettings {\n        border-color: #666;\n    }\n    .nepThemeLight .nepTopMenu,\n    .nepThemeLight .nepMainBar,\n    .nepThemeLight .nepNavBarContent,\n    .nepThemeLight .nepNavBarContent .sapMTBStandard,\n    .nepThemeLight .nepDocPage {\n        border-color: #ccc;\n    }\n    .nepThemeDark .nepTopMenu,\n    .nepThemeDark .nepMainBar,\n    .nepThemeDark .nepNavBarContent,\n    .nepThemeDark .nepNavBarContent .sapMTBStandard,\n    .nepThemeDark .nepDocPage {\n        border-color: #888;\n    }\n    .nepThemeLight .nepCatTitle.sapMTitle,\n    .nepThemeLight .nepCatSubTitle.sapMTitle {\n        border-color: #333;\n    }\n    .nepThemeDark .nepCatTitle.sapMTitle,\n    .nepThemeDark .nepCatSubTitle.sapMTitle {\n        border-color: #fafafa;\n    }\n    .nepThemeLight .nepTopMenuActive,\n    .nepThemeLight .nepTopMenuBtn.sapMBtn:hover,\n    .nepThemeLight .nepIconActive {\n        border-color: #d3d7d9;\n    }\n    .nepThemeDark .nepTopMenuActive,\n    .nepThemeDark .nepTopMenuBtn.sapMBtn:hover,\n    .nepThemeDark .nepIconActive {\n        border-color: #d3d7d9;\n    }\n    .nepThemeLight .nepOverflowMenu.nepPopover.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeDark .nepOverflowMenu.nepPopover.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeLight .nepOverflowMenu.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeDark .nepOverflowMenu.sapMPopover {\n        border-top-color: #d3d7d9;\n    }\n    .nepThemeLight .nepSelectUser {\n        border-color: #888;\n    }\n    .nepThemeDark .nepSelectUser {\n        border-color: #ccc;\n    }\n    .nepThemeLight .nepLogonLayout .sapMBtnInner {\n        border-color: #888;\n    }\n    .nepThemeDark .nepLogonLayout .sapMBtnInner {\n        border-color: #ccc;\n    }\n    .nepThemeLight .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        border-color: rgba(0, 0, 0, 0.5);\n    }\n    .nepThemeDark .numPad:not(.sapMBtnDisabled)>.sapMBtnInner.sapMBtnActive {\n        border-color: rgba(255, 255, 255, 0.5);\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* SAP QUARTZ LIGHT */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepThemeLight .nepActionContainer .sapMBtnInner,\n    .nepThemeLight .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n        background-color: transparent;\n        border-color: #333;\n        color: #333;\n    }\n    .nepThemeLight .nepActionContainer .sapMBtnIcon {\n        color: #333;\n    }\n    /*--------------------------------------------------------------------------------------------------*/\n    /* SAP QUARTZ DARK */\n    /*--------------------------------------------------------------------------------------------------*/\n    .nepThemeDark .nepActionContainer .sapMBtnInner,\n    .nepThemeDark .nepActionContainer .sapMBtn:hover>.sapMBtnHoverable {\n        background-color: transparent;\n        border-color: #d3d7d9;\n        color: #d3d7d9;\n    }\n    .nepThemeDark .nepActionContainer .sapMBtnIcon,\n    .nepThemeDark .nepFCard.sapFCard .sapFCardHeader .sapFCardIcon.sapFAvatar .sapUiIcon {\n        color: #d3d7d9;\n    }\n}\n\n/* QUARTZ LIGHT CARD BACKGROUNDS */\n\n.nepThemeLight .sapColorSet1A {\n    background-color: #fefaf4;\n}\n\n.nepThemeLight .sapColorSet1B {\n    background-color: #fdf5eb;\n}\n\n.nepThemeLight .sapColorSet1C {\n    background-color: #fcf1e2;\n}\n\n.nepThemeLight .sapColorSet1D {\n    background-color: #fbecd8;\n}\n\n.nepThemeLight .sapColorSet2A {\n    background-color: #fdf7f7;\n}\n\n.nepThemeLight .sapColorSet2B {\n    background-color: #fbeeee;\n}\n\n.nepThemeLight .sapColorSet2C {\n    background-color: #f9e6e6;\n}\n\n.nepThemeLight .sapColorSet2D {\n    background-color: #f7dede;\n}\n\n.nepThemeLight .sapColorSet3A {\n    background-color: #fef6fa;\n}\n\n.nepThemeLight .sapColorSet3B {\n    background-color: #fcedf4;\n}\n\n.nepThemeLight .sapColorSet3C {\n    background-color: #fbe4ef;\n}\n\n.nepThemeLight .sapColorSet3D {\n    background-color: #fadbea;\n}\n\n.nepThemeLight .sapColorSet4A {\n    background-color: #fefafd;\n}\n\n.nepThemeLight .sapColorSet4B {\n    background-color: #fbf3f9;\n}\n\n.nepThemeLight .sapColorSet4C {\n    background-color: #f9ebf5;\n}\n\n.nepThemeLight .sapColorSet4D {\n    background-color: #f7e3f2;\n}\n\n.nepThemeLight .sapColorSet5A {\n    background-color: #f6f7fd;\n}\n\n.nepThemeLight .sapColorSet5B {\n    background-color: #eeeefb;\n}\n\n.nepThemeLight .sapColorSet5C {\n    background-color: #e5e6fa;\n}\n\n.nepThemeLight .sapColorSet5D {\n    background-color: #dddef8;\n}\n\n.nepThemeLight .sapColorSet6A {\n    background-color: #f7fafd;\n}\n\n.nepThemeLight .sapColorSet6B {\n    background-color: #eff5fb;\n}\n\n.nepThemeLight .sapColorSet6C {\n    background-color: #e7f0fa;\n}\n\n.nepThemeLight .sapColorSet6D {\n    background-color: #deebf8;\n}\n\n.nepThemeLight .sapColorSet7A {\n    background-color: #f6fdfe;\n}\n\n.nepThemeLight .sapColorSet7B {\n    background-color: #ecfbfd;\n}\n\n.nepThemeLight .sapColorSet7C {\n    background-color: #e3fafc;\n}\n\n.nepThemeLight .sapColorSet7D {\n    background-color: #daf8fb;\n}\n\n.nepThemeLight .sapColorSet8A {\n    background-color: #fcfef5;\n}\n\n.nepThemeLight .sapColorSet8B {\n    background-color: #f9feec;\n}\n\n.nepThemeLight .sapColorSet8C {\n    background-color: #f6fde2;\n}\n\n.nepThemeLight .sapColorSet8D {\n    background-color: #f3fcd9;\n}\n\n.nepThemeLight .sapColorSet9A {\n    background-color: #ffffff;\n}\n\n.nepThemeLight .sapColorSet9B {\n    background-color: #fafafa;\n}\n\n.nepThemeLight .sapColorSet9C {\n    background-color: #f5f5f5;\n}\n\n.nepThemeLight .sapColorSet9D {\n    background-color: #f0f0f0;\n}\n\n.nepThemeLight .sapColorSet10A {\n    background-color: #ebebeb;\n}\n\n.nepThemeLight .sapColorSet10B {\n    background-color: #e6e6e6;\n}\n\n.nepThemeLight .sapColorSet10C {\n    background-color: #e0e0e0;\n}\n\n.nepThemeLight .sapColorSet10D {\n    background-color: #dbdbdb;\n}\n\n.nepThemeLight .sapColorSet11A {\n    background-color: #f5faff;\n}\n\n.nepThemeLight .sapColorSet11B {\n    background-color: #ebf5fe;\n}\n\n.nepThemeLight .sapColorSet11C {\n    background-color: #e2f0fe;\n}\n\n.nepThemeLight .sapColorSet11D {\n    background-color: #d8ebfd;\n}\n\n/* QUARTZ DARK CARD BACKGROUNDS */\n\n.nepThemeDark .sapColorSet1A {\n    background-color: #382700;\n}\n\n.nepThemeDark .sapColorSet1B {\n    background-color: #422e00;\n}\n\n.nepThemeDark .sapColorSet1C {\n    background-color: #4c3500;\n}\n\n.nepThemeDark .sapColorSet1D {\n    background-color: #563d00;\n}\n\n.nepThemeDark .sapColorSet2A {\n    background-color: #6d1c1c;\n}\n\n.nepThemeDark .sapColorSet2B {\n    background-color: #751e1e;\n}\n\n.nepThemeDark .sapColorSet2C {\n    background-color: #7d2020;\n}\n\n.nepThemeDark .sapColorSet2D {\n    background-color: #862222;\n}\n\n.nepThemeDark .sapColorSet3A {\n    background-color: #6a0a29;\n}\n\n.nepThemeDark .sapColorSet3B {\n    background-color: #730a2d;\n}\n\n.nepThemeDark .sapColorSet3C {\n    background-color: #7c0b31;\n}\n\n.nepThemeDark .sapColorSet3D {\n    background-color: #860c34;\n}\n\n.nepThemeDark .sapColorSet4A {\n    background-color: #400c35;\n}\n\n.nepThemeDark .sapColorSet4B {\n    background-color: #480e3c;\n}\n\n.nepThemeDark .sapColorSet4C {\n    background-color: #51104a;\n}\n\n.nepThemeDark .sapColorSet4D {\n    background-color: #59114a;\n}\n\n.nepThemeDark .sapColorSet5A {\n    background-color: #1c2d4c;\n}\n\n.nepThemeDark .sapColorSet5B {\n    background-color: #1e3253;\n}\n\n.nepThemeDark .sapColorSet5C {\n    background-color: #21365a;\n}\n\n.nepThemeDark .sapColorSet5D {\n    background-color: #243b62;\n}\n\n.nepThemeDark .sapColorSet6A {\n    background-color: #003952;\n}\n\n.nepThemeDark .sapColorSet6B {\n    background-color: #00405c;\n}\n\n.nepThemeDark .sapColorSet6C {\n    background-color: #004866;\n}\n\n.nepThemeDark .sapColorSet6D {\n    background-color: #004f70;\n}\n\n.nepThemeDark .sapColorSet7A {\n    background-color: #2a5e5e;\n}\n\n.nepThemeDark .sapColorSet7B {\n    background-color: #2d6565;\n}\n\n.nepThemeDark .sapColorSet7C {\n    background-color: #306c6c;\n}\n\n.nepThemeDark .sapColorSet7D {\n    background-color: #337373;\n}\n\n.nepThemeDark .sapColorSet8A {\n    background-color: #27410e;\n}\n\n.nepThemeDark .sapColorSet8B {\n    background-color: #2c4a10;\n}\n\n.nepThemeDark .sapColorSet8C {\n    background-color: #315212;\n}\n\n.nepThemeDark .sapColorSet8D {\n    background-color: #365a14;\n}\n\n.nepThemeDark .sapColorSet9A {\n    background-color: #30164c;\n}\n\n.nepThemeDark .sapColorSet9B {\n    background-color: #351853;\n}\n\n.nepThemeDark .sapColorSet9C {\n    background-color: #3a1b5b;\n}\n\n.nepThemeDark .sapColorSet9D {\n    background-color: #3f1d63;\n}\n\n.nepThemeDark .sapColorSet10A {\n    background-color: #323c44;\n}\n\n.nepThemeDark .sapColorSet10B {\n    background-color: #36424a;\n}\n\n.nepThemeDark .sapColorSet10C {\n    background-color: #3b4750;\n}\n\n.nepThemeDark .sapColorSet10D {\n    background-color: #3f4c56;\n}\n\n.nepThemeDark .sapColorSet11A {\n    background-color: #042037;\n}\n\n.nepThemeDark .sapColorSet11B {\n    background-color: #052540;\n}\n\n.nepThemeDark .sapColorSet11C {\n    background-color: #062b4a;\n}\n\n.nepThemeDark .sapColorSet11D {\n    background-color: #073053;\n}\n\n.nepCardDescription {\n    padding: 0 1rem 1rem 1rem\n}\n\n.nepActionConfig {\n    margin-right: -10px;\n}\n\n.nepActionConfig .sapMBtnInner {\n    border: none;\n}\n\n.dragPlaceholder {\n    border: 2px dotted orange;\n    min-height: 200px;\n}\n\n.dragCursor {\n    cursor: pointer;\n}\n\n.nepToolNoBorder.sapMTBStandard {\n    border-bottom: none;\n}\n\n.nepToolNoBorder.sapMIBar.sapMTB .sapMBarChild:only-child {\n    padding-left: 0rem;\n    padding-right: 0rem;\n}\n\n.nepLayout .nepMainBar .sapMLIB {\n    background: transparent;\n}\n\n.nepLayout .nepMainBar .sapMIBar.sapMHeader-CTX {\n    background: transparent;\n}\n\n.nepMultiMenu.sapMDialog.sapUiPopupWithPadding:not(.sapUiNoContentPadding) .sapMDialogScrollCont {\n    padding: 0;\n}\n\n.nepMultiMenu:not(.nepMainBar) {\n    min-width: 300px;\n}\n\n.nepMultiMenu .sapMIBar.sapMSubHeader-CTX {\n    background-color: transparent;\n}\n\n.nepMultiMenu .sapMBar {\n    box-shadow: none;\n}\n\n.nepMultiMenu .sapMIBar.sapMTB .sapMBarChild:only-child {\n    padding-left: 0;\n}\n\n.nepMultiMenu .sapMTBStandard {\n    border-bottom: none;\n    padding: 0 .5rem;\n    background-color: transparent !important;\n}\n\n.nepMainBar.sapMPage>.sapMPageHeader {\n    box-shadow: none;\n    border-bottom: none;\n}\n\n.nepMainBar.sapMPage.sapMPageWithSubHeader>.sapMPageSubHeader {\n    box-shadow: none;\n    border-bottom: none;\n}\n\n.nepCardHeaderSubTitle {\n    margin: 0.2rem 0 0 0;\n    font-size: 0.875rem;\n    font-weight: normal;\n}\n\n.nepCardHeaderStatus {\n    font-size: 0.75rem;\n}\n\n.nepThemeDark .nepCardHeaderStatus {\n    color: #d3d7d9;\n}\n\n.nepThemeLight .nepCardHeaderStatus {\n    color: #6a6d70;\n}\n\n.nepCardHeaderIcon {\n    margin-right: 20px;\n    line-height: 2.5rem;\n    -webkit-border-radius: 50%;\n}\n\n.nepICCard {\n    box-shadow: none !important;\n    background: transparent;\n}\n\n.nepScrollContent .nepDynamicPage .sapFDynamicPageContent {\n    overflow-x: scroll;\n}\n\n/* Fix page height when PWA header is visible */\n\n.pageShell>.sapMPageEnableScrolling {\n    height: auto !important;\n}\n\n/* Horizon Theme fixes */\n\n.sapUiTheme-sap_horizon .nepFCardTopImage {\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n}\n\n.sapUiTheme-sap_horizon_dark .nepFCardTopImage {\n    border-top-left-radius: 1rem;\n    border-top-right-radius: 1rem;\n}\n\n/* Launchpad Customizations */\n.nepEditHomeContainer {\n    padding: 0.5rem .75rem;\n    pointer-events: none;\n}\n.nepEditHomeTitle {\n    margin-right: 1.5rem;\n}\nhtml[dir=\"rtl\"] .nepEditHomeTitle {\n    margin-right: 0;\n    margin-left: 1.5rem;\n}\n.nepEditHomeList .sapMListUl {\n    margin: .25rem;\n}\n.nepEditHomeListItemDivider.sapMLIB {\n    border-color: #a8b2bd;\n    border-width: .0625rem;\n}\n.nepEditHomeList .sapMListUl .nepEditHomeListItemTileRemove {\n    border-bottom-color: #a8b2bd;\n}\n.nepEditHomeListItemError .sapMTitle,\n.nepEditHomeListItemError .sapUiIcon {\n    color: #aa0808;\n}\n\n/* to take remove card item out of flex flow */\n.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: none;\n    position: absolute;\n    z-index: 99;\n    left: -0.75rem;\n    top: -0.75rem;\n}\n.jiggle.lp-is-customizable .nepBlockLayoutTileRow:not(.favorite-cards) .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: block;\n}\n.jiggle .nepFCardContainer > .sapMFlexItem:first-of-type {\n    display: block;\n}\n.nepDeleteCard .sapMBtnInner {\n    border-radius: 50%;\n}\n.nepNewCard {\n    display: none;\n}\n\n.jiggle .nepNewCard {\n    display: block;\n}\n.jiggle .nepBlockLayoutTileRow:not(.favorite-cards) .nepNewCard > .sapMFlexItem:first-of-type {\n    display: block;\n    position: relative;\n    z-index: auto;\n    left: auto;\n    top: auto;\n}\n\n.nepManagePages .sapUiIcon {\n    cursor: pointer;\n}\n.nepManagePages span[aria-label=\"trash-alt\"] {\n    color: #aa0808;\n}\n.nepManagePagesMessageStrip {\n    border: 0;\n    border-radius: 0;\n}\n#ManagePages-listUl > li {\n    cursor: grab;\n}\n#ManagePages-listUl .dragPlaceholder {\n    min-height: 52px;\n}\n#ManagePages-listUl .managePagesId {\n    display: none;\n}\n#ManagePages-listUl .icoSortManagePages {\n    cursor: grab;\n}\n#ManagePages-listUl li .sapMFlexItem:last-of-type {\n    margin-left: auto;\n}\n\n#diaAddTile ul {\n    min-height: 500px;\n}\n#diaAddTile ul li .sapMBtn {\n    padding: 0;\n    height: auto;\n}\n#diaAddTile .sapMIBar {\n    box-shadow: none;\n    border-bottom: 0;\n}\n#diaAddTile .diaAddTileToolbar {\n    z-index: 1;\n    position: sticky;\n    top: 0;\n}\n#fbHeaderAddTile {\n    margin-top: 0 !important;\n}\n#diaAddTile .addTileId {\n    display: none;\n}\n\n/* Jiggle */\n.jiggle .nepFCardContainer.nepNewCard {\n    animation: none !important;\n}\n.jiggle .nepFCard > * {\n    pointer-events: none;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction) {\n    animation-delay: -.05s;\n    animation-duration: .27s;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n) {\n    animation-name: jiggle1;\n    animation-iteration-count: infinite;\n    transform-origin: 50% 10%;\n}\n.jiggle .nepFCardContainer:not(.nepFCardAction):nth-child(2n-1) {\n    animation-name: jiggle2;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n    transform-origin: 30% 5%;\n}\n@keyframes jiggle1 {\n    0% {\n        transform: rotate(-.5deg);\n        animation-timing-function: ease-in;\n    }\n    50% {\n        transform: rotate(.5deg);\n        animation-timing-function: ease-out;\n    }\n}\n@keyframes jiggle2 {\n    0% {\n        transform: rotate(.5deg);\n        animation-timing-function: ease-in;\n    }\n    50% {\n        transform: rotate(-.5deg);\n        animation-timing-function: ease-out;\n    }\n}","header":"<script src=\"/public/neptune/aes.js\"></script>\n<link rel=\"shortcut icon\" href=\"/public/images/favicon.png\" type=\"image/x-icon\" />\n<link rel=\"icon\" sizes=\"192x192\" href=\"/public/images/NeptuneIcon192px.png\">\n<link rel=\"apple-touch-icon\" href=\"/public/images/NeptuneIcon192px.png\">\n\n<script>\n\tlet _pwaInstall = false;\n    let _pwaUpdate = false;\n    let _pwadeferredPrompt = null;\n</script>","objects":[{"fieldNo":"8447f113-5868-47cc-cc90-05652669235a","fieldName":"onLoad","fieldParent":0,"fieldPos":1,"fieldType":"neptune.Script","script":"// Neptune Namespace\nsap.n = {\n    Shell: {},\n    Launchpad: {},\n    Phonegap: {\n        loaded: false\n    },\n    Fingerprint: {},\n    Documentation: {},\n    Push: {},\n    PDF: {},\n    Apps: {},\n    Enhancement: {}\n};\n\nif (typeof nep === 'undefined') nep = {};\n\nfunction isCordova() {\n    return window.hasOwnProperty('cordova') || typeof (cordova) === 'object';\n}\n\n// Browser/Phonegap Startup\nif (isCordova()) {\n    document.addEventListener('deviceready', onDeviceReady, false);\n} else {\n    onDeviceReady();\n}\n\n// onDeviceReady\nfunction onDeviceReady() {\n    sap.n.Phonegap.loaded = true;\n    // Catch error on Windows 10\n    if (typeof MSApp !== 'undefined') {\n        window.onerror = function (message, file, line, col, error) {\n            console.error(message);\n            return true;\n        };\n\n        alert = navigator.notification.alert;\n\n        // Hide Backbutton on App\n        setTimeout(function () {\n            let currentView = Windows.UI.Core.SystemNavigationManager.getForCurrentView();\n            currentView.appViewBackButtonVisibility = Windows.UI.Core.AppViewBackButtonVisibility.collapsed;\n        }, 200);\n    }\n\n    document.addEventListener('pause', onPause, false);\n    document.addEventListener('resume', onResume, false);\n    document.addEventListener('backbutton', onBackButton, false);\n\n    if (navigator.app) {\n        try {\n            navigator.app.overrideButton('menubutton', true);\n        } catch (error) {\n\n        }\n    }\n\n    document.addEventListener('menubutton', onMenuButton, false);\n    window.addEventListener('offline', onOffline, false);\n    window.addEventListener('online', onOnline, false);\n    document.addEventListener('searchbutton', onSearchButton, false);\n    document.addEventListener('volumedownbutton', onVolumeDownButton, false);\n    document.addEventListener('volumeupbutton', onVolumeUpButton, false);\n\n    // Android (API>19) supports VIBRATION natively - fallback for existing apps\n    if (sap.ui.Device.os.android) {\n        if (typeof navigator.notification === 'object' && typeof navigator.notification.vibrate === 'undefined') {\n            navigator.notification.vibrate = function (mSecs) {\n                navigator.vibrate(mSecs);\n            }\n        }\n    }\n\n    // Android SSL \n    if (isCordova() && cordova.plugins && cordova.plugins.certificates) cordova.plugins.certificates.trustUnsecureCerts(true);\n\n    // InAppBrowser \n    if (isCordova()) window.open = cordova.InAppBrowser.open;\n}\n\nfunction onOffline() {\n    AppCache.isOffline = true;\n    AppCacheShellNetwork.setVisible(true);\n    AppCache_butNewUser.setEnabled(false);\n\n    if (AppCache.isMobile && AppCache.isRestricted) return;\n\n    sap.n.Launchpad.RebuildTiles();\n\n    if (typeof sap.n.Phonegap.onOfflineCustom === 'function') {\n        sap.n.Phonegap.onOfflineCustom();\n        return;\n    }\n}\n\nfunction onOnline() {\n    AppCache.isOffline = false;\n    AppCacheShellNetwork.setVisible(false);\n    AppCache_butNewUser.setEnabled(true);\n\n    if (AppCache.isMobile && AppCache.isRestricted) return;\n\n    sap.n.Launchpad.RebuildTiles();\n\n    if (typeof sap.n.Phonegap.onOnlineCustom === 'function') {\n        sap.n.Phonegap.onOnlineCustom();\n        return;\n    }\n}\n\nfunction onPause() {\n    AppCache.inBackground = true;\n\n    // Inactivity\n    if (AppCache.timerLock && !AppCache.isRestricted) lockStart = Date.now();\n\n\n    if (typeof sap.n.Phonegap.onPauseCustom === 'function') {\n        sap.n.Phonegap.onPauseCustom();\n        return;\n    }\n}\n\nfunction onResume() {\n    setTimeout(function () {\n        AppCache.inBackground = false;\n\n        if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n        sap.ui.core.BusyIndicator.hide();\n\n        // Inactivity\n        if (AppCache.timerLock && !AppCache.isRestricted) {\n            let lockEnd = Date.now();\n            let lockDiff = (lockEnd - lockStart) / 1000.\n            if (lockDiff > AppCache.timerLock) AppCache.Lock();\n        }\n\n        if (typeof sap.n.Phonegap.onResumeCustom === 'function') {\n            sap.n.Phonegap.onResumeCustom();\n            return;\n        }\n    }, 100);\n}\n\nfunction onBackButton() {\n\n    if (typeof sap.n.Phonegap.onBackButtonCustom === 'function') {\n        sap.n.Phonegap.onBackButtonCustom();\n        return;\n    }\n\n    if (AppCache.CurrentApp === AppCache.StartApp && AppCache.enablePasscode === true) {\n        AppCache.Lock();\n    }\n\n}\n\nfunction onMenuButton() {\n\n    if (typeof sap.n.Phonegap.onMenuButtonCustom === 'function') {\n        sap.n.Phonegap.onMenuButtonCustom();\n        return;\n    }\n\n}\n\nfunction onSearchButton() {\n\n    if (typeof sap.n.Phonegap.onSearchButtonCustom === 'function') {\n        sap.n.Phonegap.onSearchButtonCustom();\n        return;\n    }\n\n}\n\nfunction onVolumeDownButton() {\n\n    if (typeof sap.n.Phonegap.onVolumeDownButtonCustom === 'function') {\n        sap.n.Phonegap.onVolumeDownButtonCustom();\n        return;\n    }\n\n}\n\nfunction onVolumeUpButton() {\n\n    if (typeof sap.n.Phonegap.onVolumeUpButtonCustom === 'function') {\n        sap.n.Phonegap.onVolumeUpButtonCustom();\n        return;\n    }\n\n}\n\nwindow.onOffline = onOffline;\nwindow.onOnline = onOnline;","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"cc953eb9-626e-4c4a-87de-9bb923d35090","fieldName":"topShell","fieldParent":0,"fieldPos":2,"fieldType":"sap.m.Shell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadShell nepPage","script":"","translation":[]},{"attribute":"appWidthLimited","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"cd066348-ca46-4f89-9904-13d74a63fbcb","fieldName":"appShell","fieldParent":"cc953eb9-626e-4c4a-87de-9bb923d35090","fieldPos":3,"fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"autoFocus","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"63351f31-547d-43db-8b6a-898b9977f552","fieldName":"pageShell","fieldParent":"cd066348-ca46-4f89-9904-13d74a63fbcb","fieldPos":4,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage pageShell","script":"","translation":[]},{"attribute":"showSubHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"c4f9114f-174e-425b-faa9-3118b594c945","fieldName":"actionPWA","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldPos":5,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setSubHeader","script":"","translation":[]}]},{"fieldNo":"00046d71-c91f-4ad9-b64c-48ef3319d5da","fieldName":"Left","fieldParent":"c4f9114f-174e-425b-faa9-3118b594c945","fieldPos":6,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}]},{"fieldNo":"22ae1e0d-5e3a-46df-cdcc-6c929e30c127","fieldName":"toolPWA","fieldParent":"00046d71-c91f-4ad9-b64c-48ef3319d5da","fieldPos":7,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPWAToolbar","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"8d1bf547-3303-4e8c-fa06-3df565bd62fa","fieldName":"toolPWATitle","fieldParent":"22ae1e0d-5e3a-46df-cdcc-6c929e30c127","fieldPos":8,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add to homescreen","script":"","translation":[{"language":"DA","value":"Føj til hjemmeskærmen"},{"language":"FR","value":"Ajouter à l'écran d'accueil"},{"language":"DE","value":"Zum Startbildschirm hinzufügen"},{"language":"IT","value":"Aggiungere alla schermata Home"},{"language":"NO","value":"Legg til på hjemmeskjermen"},{"language":"PL","value":"Dodaj do ekranu głównego"},{"language":"PT","value":"Adicionar à tela inicial"},{"language":"ES","value":"Añadir a la pantalla principal"},{"language":"SV","value":"Lägg till på hemskärmen"},{"language":"EN","value":"Add to homescreen"}]}]},{"fieldNo":"8ba8c775-92c0-4b52-808d-e6b10ff9163c","fieldName":"toolPWASpacer","fieldParent":"22ae1e0d-5e3a-46df-cdcc-6c929e30c127","fieldPos":9,"fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"cdb17e90-8132-46f6-a784-ba0b9432444c","fieldName":"toolPWAInstall","fieldParent":"22ae1e0d-5e3a-46df-cdcc-6c929e30c127","fieldPos":10,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Accept","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Install","script":"","translation":[{"language":"DA","value":"Installere"},{"language":"FR","value":"Installer"},{"language":"DE","value":"Installieren"},{"language":"IT","value":"Installare"},{"language":"NO","value":"Installere"},{"language":"PL","value":"zainstalować"},{"language":"PT","value":"Instalar"},{"language":"ES","value":"Instalar en pc"},{"language":"SV","value":"Installera"},{"language":"EN","value":"Install"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"_pwadeferredPrompt.prompt();\r\n_pwadeferredPrompt.userChoice\r\n    .then(function(choiceResult) {\r\n        if (choiceResult.outcome === 'accepted') {\r\n            actionPWA.setVisible(false);\r\n            pageShell.setShowSubHeader(false);\r\n            sap.n.Layout.setHeaderPadding();\r\n        }\r\n        _pwadeferredPrompt = null;        \r\n    });","translation":[]}]},{"fieldNo":"f30dc30d-79aa-479a-f3bf-dd78a2122163","fieldName":"toolPWANotNow","fieldParent":"22ae1e0d-5e3a-46df-cdcc-6c929e30c127","fieldPos":11,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Reject","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Not now","script":"","translation":[{"language":"DA","value":"Ikke nu"},{"language":"FR","value":"Pas maintenant"},{"language":"DE","value":"Nicht jetzt"},{"language":"IT","value":"Non adesso"},{"language":"NO","value":"Ikke nå"},{"language":"PL","value":"Nie teraz"},{"language":"PT","value":"Agora não"},{"language":"ES","value":"Ahora no"},{"language":"SV","value":"Inte nu"},{"language":"EN","value":"Not now"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"actionPWA.setVisible(false);\npageShell.setShowSubHeader(false);\npageShell.rerender();\nsap.n.Layout.setHeaderPadding();","translation":[]}]},{"fieldNo":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldName":"launchpadContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldPos":12,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}]},{"fieldNo":"f0f258ae-7569-468a-c773-a7819488c33c","fieldName":"topMenu","fieldParent":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldPos":13,"fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"49px","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"766bdea0-e6f4-485b-a0c5-7103482992a6","fieldName":"topMenuToolbar","fieldParent":"f0f258ae-7569-468a-c773-a7819488c33c","fieldPos":14,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldName":"toolTopMenu","fieldParent":"f0f258ae-7569-468a-c773-a7819488c33c","fieldPos":15,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}]},{"fieldNo":"ab18c413-4f59-40ae-8cd8-5b52a6433023","fieldName":"topContainerLeft","fieldParent":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldPos":16,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldName":"topLayoutLeft","fieldParent":"ab18c413-4f59-40ae-8cd8-5b52a6433023","fieldPos":17,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]}]},{"fieldNo":"333db848-5a32-4194-fe57-7cb103a9e608","fieldName":"layoutShellBoxOverflow","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldPos":18,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}]},{"fieldNo":"57373720-9f7b-4811-a2ed-4184ef1d256e","fieldName":"AppCacheShellMenu","fieldParent":"333db848-5a32-4194-fe57-7cb103a9e608","fieldPos":19,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Menu","script":"","translation":[{"language":"1","value":"菜单"},{"language":"A","value":"قائمة طعام"},{"language":"D","value":"Menü"},{"language":"F","value":"Menu"},{"language":"H","value":"Menü"},{"language":"K","value":"Menu"},{"language":"O","value":"Meny"},{"language":"P","value":"Cardápio"},{"language":"R","value":"Меню"},{"language":"S","value":"Menú"},{"language":"W","value":"Меню"},{"language":"DE","value":"Menü"},{"language":"IT","value":"Menù"},{"language":"NO","value":"Meny"},{"language":"PL","value":"Menu"},{"language":"PT","value":"Cardápio"},{"language":"ES","value":"Menú"},{"language":"SV","value":"Meny"},{"language":"EN","value":"Menu"}]},{"attribute":"styleClass","grouping":"Properties","value":"nep","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://grid","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (sap.ui.Device.resize.width < sap.n.Launchpad.verticalMenuLimit) launchpadContentMenu.setWidth(\"0px\");\n\nif (AppCache.config.verticalMenu && sap.ui.Device.resize.width >= sap.n.Launchpad.verticalMenuLimit) {\n    let size = (launchpadContentMenu.getWidth() === \"0px\") ? \"300px\" : \"0px\";\n    launchpadContentMenu.addItem(pageVerticalMenu);\n    launchpadContentMenu.setWidth(size);\n    openAppMaster.setVisible((openApps.getItems().length > 0));\n} else {\n\n    launchpadOverflow.addItem(pageVerticalMenu);\n    openAppMaster.setVisible((openApps.getItems().length > 0));\n\n    applyCSSToElmId('launchpadOverflowContainer', { width: '100%' });\n    applyCSSToElmId('launchpadOverflowClickArea', { display: 'block' });\n\n    setTimeout(function () {\n        launchpadOverflow.addStyleClass(\"nepLaunchpadMenuOverflowOpen\");\n    }, 10);\n}\n\nsap.n.Layout.setHeaderPadding();\n","translation":[]}]},{"fieldNo":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldName":"topLayoutLogo","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldPos":20,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"77d5b786-2ede-4611-b5c5-5465c01c71de","fieldName":"boxShellLogoDesktop","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldPos":21,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIconContainerDesktop","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"680ccd38-3804-492a-dff9-554f1ea5611b","fieldName":"AppCacheShellLogoDesktop","fieldParent":"77d5b786-2ede-4611-b5c5-5465c01c71de","fieldPos":22,"fieldType":"sap.m.Image","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIcon nepTopMenuIconDesktop","script":"","translation":[]},{"attribute":"alt","grouping":"Properties","value":"Home Icon","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (AppCache.isMobile && AppCache.isRestricted) return;\nAppCache._Home();\n","translation":[]}]},{"fieldNo":"15a62493-286c-477a-dfbb-79b6f011c104","fieldName":"boxShellLogoMobile","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldPos":23,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiVisibleOnlyOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIconContainerMobile","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"7cfd6cc9-fad8-422a-c5b4-6bb0fa34891a","fieldName":"AppCacheShellLogoMobile","fieldParent":"15a62493-286c-477a-dfbb-79b6f011c104","fieldPos":24,"fieldType":"sap.m.Image","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuIcon nepTopMenuIconMobile","script":"","translation":[]},{"attribute":"alt","grouping":"Properties","value":"Home Icon","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (AppCache.isMobile && AppCache.isRestricted) return;\nAppCache._Home();\n","translation":[]}]},{"fieldNo":"94974f6b-4247-4f3a-ed9d-7e0415b012a2","fieldName":"AppCacheShellBack","fieldParent":"6878a189-5b7d-4391-cb46-c1bcc4d6f9a9","fieldPos":25,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://nav-back","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.Back();","script":"AppCache.Back();","translation":[]}]},{"fieldNo":"d2007d73-f435-4b35-93e7-3bfd1f090c97","fieldName":"layoutShellTitle","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldPos":26,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"48px","script":"","translation":[]}]},{"fieldNo":"b74e1ed2-e58e-49cb-de8b-eb2917943afc","fieldName":"AppCacheShellTitle","fieldParent":"d2007d73-f435-4b35-93e7-3bfd1f090c97","fieldPos":27,"fieldType":"sap.m.Title","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}]},{"fieldNo":"7ef41e7f-b943-44ca-e1a6-b43d054d298b","fieldName":"AppCacheAppButton","fieldParent":"2e2b96ab-9829-41bb-fa2f-65f6065ff13a","fieldPos":28,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiVisibleOnlyOnDesktop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopGroups","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Start","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"4528a700-5d73-4b29-d25e-6a5c62d9d73b","fieldName":"AppCacheShellAppTitle","fieldParent":"7ef41e7f-b943-44ca-e1a6-b43d054d298b","fieldPos":29,"fieldType":"sap.m.Title","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}]},{"fieldNo":"846e90a2-99fd-4241-b5df-b99ad24d159d","fieldName":"topContainerRight","fieldParent":"a619f5c3-0886-47af-9882-8b0c0e84a7a2","fieldPos":30,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldName":"topLayoutRight","fieldParent":"846e90a2-99fd-4241-b5df-b99ad24d159d","fieldPos":31,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"b0fd88f6-6c5a-4018-c5b9-123442d3c836","fieldName":"AppCacheShellOpenApps","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":32,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"wrap","grouping":"Properties","value":"Wrap","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepShellOpenApps","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"End","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"45e5206a-563a-4315-fbd8-4632ac63577c","fieldName":"btnAddNewPage","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":33,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Add New Screen","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showAddPageDialog();","script":"sap.n.Customization.showAddPageDialog();","translation":[]}]},{"fieldNo":"29ffb500-9edb-4a74-ecba-0e4635d87917","fieldName":"btnManagePages","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":34,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showManagePagesDialog();","script":"sap.n.Customization.showManagePagesDialog();","translation":[]}]},{"fieldNo":"4108ba08-4223-4e05-cbb0-f1a6301de8ff","fieldName":"btnEditPagesDone","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":35,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Done","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBeginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"customization-ui","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(false);\nsap.n.Customization.stopJiggling();","language":"javascript","translation":[]}]},{"fieldNo":"46c42aa0-443e-4ef5-c1f5-4e3b36ae0ea6","fieldName":"AppCacheShellDebug","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":36,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/bug","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Debug.OpenDialog();","script":"sap.n.Debug.OpenDialog();","translation":[]}]},{"fieldNo":"9e0f94d5-16e3-4b9d-ab4a-6c87f6a4b193","fieldName":"AppCacheShellNetwork","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":37,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"iconNetwork","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://feed","script":"","translation":[]}]},{"fieldNo":"31e6a0fb-d282-41ce-d8e2-f8880e66b8fa","fieldName":"AppCacheShellHelp","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":38,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-help-2","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let rootDir = '/public/views/';\nif (parseInt(AppCache.p9Version) >= 21) rootDir = '/views/';\n\nif (sap.n.Launchpad.isPhone()) {\n    AppCache.Load('cockpit_doc_reader', {\n        dialogShow: true,\n        dialogTitle: AppCache_tHelp.getText(),\n        dialogHideMinimize: true,\n        dialogHideMosaic: true,\n        dialogHideMaximize: true,\n        rootDir: rootDir\n    });\n} else {\n    sap.n.Shell.loadSidepanel('cockpit_doc_reader', sap.n.Launchpad.currentTile.title, {\n        additionaltext: AppCache_tHelp.getText(),\n        rootDir: rootDir\n    });\n}\n","translation":[]}]},{"fieldNo":"956f04f5-4528-4b72-d8f9-4875796f573c","fieldName":"AppCacheShellDialog","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":39,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://drop-down-list","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheUserDialog.openBy(this);","script":"AppCacheUserDialog.openBy(this);","translation":[]}]},{"fieldNo":"708a4487-6829-44c1-fd94-8fcf7d65e2a6","fieldName":"AppCacheShellUser","fieldParent":"2e4678cf-9016-4d24-af10-108deecd35cc","fieldPos":40,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"User Menu","script":"","translation":[{"language":"1","value":"用户菜单"},{"language":"A","value":"قائمة المستخدم"},{"language":"D","value":"Benutzermenü"},{"language":"F","value":"Menu utilisateur"},{"language":"H","value":"felhasználói menü"},{"language":"K","value":"Brugermenu"},{"language":"O","value":"Brukermeny"},{"language":"P","value":"menu do usuário"},{"language":"R","value":"Меню пользователя"},{"language":"S","value":"Menú del Usuario"},{"language":"W","value":"Меню на потребителя"},{"language":"DE","value":"Benutzermenü"},{"language":"IT","value":"Menu utente"},{"language":"NO","value":"Brukermeny"},{"language":"PL","value":"Menu użytkownika"},{"language":"PT","value":"menu do usuário"},{"language":"ES","value":"Menú del Usuario"},{"language":"SV","value":"Användarmeny"},{"language":"EN","value":"User Menu"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserButton","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(false);\nsap.n.Launchpad.settingsMenuOpen();","language":"javascript","translation":[]}]},{"fieldNo":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldName":"launchpadContent","fieldParent":"b8bab2c5-8e19-4416-eae9-ff3a28d1cf24","fieldPos":41,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContent","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Row","script":"","translation":[]}]},{"fieldNo":"68f33b51-c653-4e66-b16d-c0a4f58759d0","fieldName":"launchpadContentMenu","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldPos":42,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentMenu","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldName":"pageVerticalMenu","fieldParent":"68f33b51-c653-4e66-b16d-c0a4f58759d0","fieldPos":43,"fieldType":"sap.m.Page","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMainBar nepMultiMenu","script":"","translation":[]},{"attribute":"showSubHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"ba1cb0d7-5438-40e4-8ce9-26f8babb451f","fieldName":"headerVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldPos":44,"fieldType":"sap.m.Bar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"9b3d3b9f-38f3-4e13-9730-ebd588b5b105","fieldName":"Left","fieldParent":"ba1cb0d7-5438-40e4-8ce9-26f8babb451f","fieldPos":45,"fieldType":"neptune.BarContent","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}]},{"fieldNo":"23fd7be8-0042-457b-e328-d0227167763f","fieldName":"toolVerticalMenu","fieldParent":"9b3d3b9f-38f3-4e13-9730-ebd588b5b105","fieldPos":46,"fieldType":"sap.m.Toolbar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"b1dc0efa-aa76-40a1-b72c-3953686c4c1b","fieldName":"toolVerticalMenuFilter","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldPos":47,"fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"let binding = ContentMenu.getBinding('items');\r\nlet searchValue = this.getValue() || '';\r\nlet filterArr = [];\r\n\r\n// Use UI5 Filter to get results\r\nif (!!searchValue) {\r\n    filterArr.push(new sap.ui.model.Filter({\r\n        filters: [\r\n            new sap.ui.model.Filter('title', 'Contains', searchValue),\r\n            new sap.ui.model.Filter('filter', 'Contains', searchValue),\r\n            new sap.ui.model.Filter('tags', 'Contains', searchValue)\r\n        ],\r\n        and: false\r\n    }));\r\n}\r\n\r\nAppCacheShellSearchTags.getSelectedItems().forEach(function (item) {\r\n    filterArr.push(new sap.ui.model.Filter('tags', 'Contains', item.getText()));\r\n});\r\n\r\nbinding.filter(filterArr);\r\n\r\nContentMenu.expandToLevel(99);\r\nsap.n.Launchpad.setMenuActiveState();","translation":[]}]},{"fieldNo":"50288483-4bba-456c-e85b-6a383d9221c9","fieldName":"toolVerticalMenuTags","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldPos":48,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"tooltip","grouping":"Properties","value":"Filter by tags","script":"","translation":[{"language":"1","value":"按标签过滤"},{"language":"A","value":"التصفية حسب العلامات"},{"language":"D","value":"Nach Tags filtern"},{"language":"F","value":"Filtrer par tags"},{"language":"H","value":"Szűrés címkék szerint"},{"language":"K","value":"Filtrer efter tags"},{"language":"O","value":"Filtrer etter tagger"},{"language":"P","value":"Filtrar por tags"},{"language":"R","value":"Фильтровать по тегам"},{"language":"S","value":"Filtrar por etiquetas"},{"language":"W","value":"Филтриране по тагове"},{"language":"DE","value":"Nach Tags filtern"},{"language":"IT","value":"Filtra per tag"},{"language":"NO","value":"Filtrer etter koder"},{"language":"PL","value":"Filtruj według tagów"},{"language":"PT","value":"Filtrar por tags"},{"language":"ES","value":"Filtrar por etiquetas"},{"language":"SV","value":"Filtrera efter taggar"},{"language":"EN","value":"Filter by tags"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/hashtag","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let show = !pageVerticalMenu.getShowSubHeader();\npageVerticalMenu.setShowSubHeader(show);\n// if (!show) {\n//     AppCacheShellSearchTags.removeAllSelectedItems();\n//     toolVerticalMenuFilter.fireLiveChange();\n// }\n","translation":[]}]},{"fieldNo":"9d5c23a7-2d7f-4384-aa91-c11c6b8ed97c","fieldName":"toolVerticalMenuExpand","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldPos":49,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Expand","script":"","translation":[{"language":"1","value":"扩大"},{"language":"A","value":"وسعت"},{"language":"D","value":"Erweitern"},{"language":"F","value":"Développer"},{"language":"H","value":"Kiterjed"},{"language":"K","value":"Udvide"},{"language":"O","value":"Utvide"},{"language":"P","value":"Expandir"},{"language":"R","value":"расширять"},{"language":"S","value":"Expandir"},{"language":"W","value":"Разширете"},{"language":"DE","value":"Erweitern"},{"language":"IT","value":"Espandere"},{"language":"NO","value":"Utvide"},{"language":"PL","value":"Rozszerzać"},{"language":"PT","value":"Expandir"},{"language":"ES","value":"Expandir"},{"language":"SV","value":"Bygga ut"},{"language":"EN","value":"Expand"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://expand-group","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"ContentMenu.expandToLevel(99);\nsap.n.Launchpad.setMenuActiveState();\n\nsap.n.Launchpad.openAppExpanded = true;\nsap.n.Launchpad.setOpenAppsExpanded();\n","translation":[]}]},{"fieldNo":"9eab9319-a918-475f-e46d-06f9640fa8f4","fieldName":"toolVerticalMenuCollapse","fieldParent":"23fd7be8-0042-457b-e328-d0227167763f","fieldPos":50,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Collapse","script":"","translation":[{"language":"1","value":"坍方"},{"language":"A","value":"انهيار"},{"language":"D","value":"Zusammenbruch"},{"language":"F","value":"Effondrer"},{"language":"H","value":"Összeomlás"},{"language":"K","value":"Falde sammen"},{"language":"O","value":"Kollapse"},{"language":"P","value":"Colapso"},{"language":"R","value":"коллапс"},{"language":"S","value":"Colapso"},{"language":"W","value":"колапс"},{"language":"DE","value":"Zusammenbruch"},{"language":"IT","value":"Crollo"},{"language":"NO","value":"Kollapse"},{"language":"PL","value":"Zawalić się"},{"language":"PT","value":"Colapso"},{"language":"ES","value":"Colapso"},{"language":"SV","value":"Kollaps"},{"language":"EN","value":"Collapse"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://collapse-group","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"ContentMenu.expandToLevel(0);\nsap.n.Launchpad.setMenuActiveState();\n\nsap.n.Launchpad.openAppExpanded = false;\nsap.n.Launchpad.setOpenAppsExpanded();\n","translation":[]}]},{"fieldNo":"ac7c4304-fdd7-4f0a-83c6-5b86f316bc1d","fieldName":"subHeaderVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldPos":51,"fieldType":"sap.m.Bar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMainBarSubHeader2","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setSubHeader","script":"","translation":[]}]},{"fieldNo":"5d828049-c475-47a2-d2b8-9bff0e4a6889","fieldName":"Left","fieldParent":"ac7c4304-fdd7-4f0a-83c6-5b86f316bc1d","fieldPos":52,"fieldType":"neptune.BarContent","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}]},{"fieldNo":"94a845a7-8bfb-49c9-b077-78ffd9190166","fieldName":"toolVerticalMenuSub","fieldParent":"5d828049-c475-47a2-d2b8-9bff0e4a6889","fieldPos":53,"fieldType":"sap.m.Toolbar","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"4c041dbe-9247-4178-ec8b-cc4bfcaa0ee9","fieldName":"AppCacheShellSearchTags","fieldParent":"94a845a7-8bfb-49c9-b077-78ffd9190166","fieldPos":54,"fieldType":"sap.m.MultiComboBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"placeholder","grouping":"Properties","value":"Filter by tags","script":"","translation":[{"language":"1","value":"按标签过滤"},{"language":"A","value":"التصفية حسب العلامات"},{"language":"D","value":"Nach Tags filtern"},{"language":"F","value":"Filtrer par tags"},{"language":"H","value":"Szűrés címkék szerint"},{"language":"K","value":"Filtrer efter tags"},{"language":"O","value":"Filtrer etter tagger"},{"language":"P","value":"Filtrar por tags"},{"language":"R","value":"Фильтровать по тегам"},{"language":"S","value":"Filtrar por etiquetas"},{"language":"W","value":"Филтриране по тагове"},{"language":"DE","value":"Nach Tags filtern"},{"language":"IT","value":"Filtra per tag"},{"language":"NO","value":"Filtrer etter koder"},{"language":"PL","value":"Filtruj według tagów"},{"language":"PT","value":"Filtrar por tags"},{"language":"ES","value":"Filtrar por etiquetas"},{"language":"SV","value":"Filtrera efter taggar"},{"language":"EN","value":"Filter by tags"}]},{"attribute":"selectionChange","grouping":"Events","value":"Anonymous Function","script":"//\ntoolVerticalMenuFilter.fireLiveChange();\nthis.close();\n","translation":[]}]},{"fieldNo":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldName":"scrollVerticalMenu","fieldParent":"4b20d572-4fd0-4ea8-bd4a-3388d845f3e9","fieldPos":55,"fieldType":"sap.m.ScrollContainer","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"6f1ec9ad-e98a-4799-b12d-c745e8029ef6","fieldName":"appContainerVertical","fieldParent":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldPos":56,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldName":"appGhost","fieldParent":"6f1ec9ad-e98a-4799-b12d-c745e8029ef6","fieldPos":57,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"53c2e325-ae09-44a6-f70c-af78d6b185cf","fieldName":"openAppMaster","fieldParent":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldPos":58,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Active Apps","script":"","translation":[{"language":"1","value":"活动应用"},{"language":"A","value":"التطبيقات النشطة"},{"language":"D","value":"Aktive Apps"},{"language":"F","value":"Applications actives"},{"language":"H","value":"Aktív alkalmazások"},{"language":"K","value":"Aktive apps"},{"language":"O","value":"Aktive apper"},{"language":"P","value":"Aplicativos ativos"},{"language":"R","value":"Активные приложения"},{"language":"S","value":"Aplicaciones activas"},{"language":"W","value":"Активни приложения"},{"language":"DE","value":"Aktive Apps"},{"language":"IT","value":"App attive"},{"language":"NO","value":"Aktive apper"},{"language":"PL","value":"Aktywne aplikacje"},{"language":"PT","value":"Apps ativos"},{"language":"ES","value":"Aplicaciones activas"},{"language":"SV","value":"Aktiva appar"},{"language":"EN","value":"Active Apps"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepOpenAppsBtn nepOpenAppsBtnMaster","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/caret-down","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.openAppExpanded = !sap.n.Launchpad.openAppExpanded;\nsap.n.Launchpad.setOpenAppsExpanded();\n\n// sap.n.Utils.userSetting.update({\n//     AREA: \"LAUNCHPAD\",\n//     GROUPING: \"MULTI_MENU\",\n//     NAME: \"EXPAND_OPEN_APPS\",\n//     KEY0: \"Expand\",\n//     VAL0: sap.n.Launchpad.openAppExpanded ? \"yes\" : \"no\"\n// });\n","translation":[]}]},{"fieldNo":"66cf3724-f69e-4943-d66a-3f550fb3cde6","fieldName":"openApps","fieldParent":"a7739842-472d-4ad5-cfde-57d15acc1c68","fieldPos":59,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"0680cb82-818e-49f4-fea2-113e608a5db2","fieldName":"ContentMenu","fieldParent":"fb80099a-5a4f-4947-97e7-10fa4ed97048","fieldPos":60,"fieldType":"sap.m.Tree","description":"","script":"","customComponent":false,"odataSource":"ID","bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTreeCategory","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"modeAnimationOn","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"SingleSelectMaster","script":"","translation":[]},{"attribute":"setInitLoad","grouping":"Model","value":"cache","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":true,"script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"itemPress","grouping":"Events","value":"Anonymous Function","script":"let selectedItem = this.getSelectedItem();\nif (selectedItem) {\n    sap.n.Launchpad.handleTreeNavigation(selectedItem);\n    ContentMenu.removeSelections();\n}\n","translation":[]},{"attribute":"toggleOpenState","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.setMenuActiveState();\n","translation":[]}]},{"fieldNo":"c5c2f890-5961-422f-a9f8-dfe5d3c96df1","fieldName":"itemContentMenu","fieldParent":"0680cb82-818e-49f4-fea2-113e608a5db2","fieldPos":61,"fieldType":"sap.m.StandardTreeItem","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"{title}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{icon}","script":"","translation":[]}]},{"fieldNo":"fc07027c-537f-43d6-9600-6643ad413e6c","fieldName":"launchpadContentNavigator","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldPos":62,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentNavigator","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldName":"navBar","fieldParent":"fc07027c-537f-43d6-9600-6643ad413e6c","fieldPos":63,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepNavBar","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"84acadd7-0420-4d7e-b44d-8396e89a5360","fieldName":"navBarToolbar","fieldParent":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldPos":64,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"8c3bbee6-4190-4afa-f8eb-5eb3b71c3a1d","fieldName":"blockRunning","fieldParent":"4010edf9-8d08-43b9-c6d6-7afc4e046497","fieldPos":65,"fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"keepFontSize","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"802af733-c055-41e9-b4f3-ca870c2f24f2","fieldName":"blockRunningRow","fieldParent":"8c3bbee6-4190-4afa-f8eb-5eb3b71c3a1d","fieldPos":66,"fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"ca3cf1f0-0286-40f7-e920-e748d2e947a9","fieldName":"launchpadContentMain","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldPos":67,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentMain","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"5a16303b-ceb7-4784-a46e-372ded7ab833","fieldName":"AppCacheShellUI","fieldParent":"ca3cf1f0-0286-40f7-e920-e748d2e947a9","fieldPos":68,"fieldType":"sap.m.Shell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepShell","script":"","translation":[]},{"attribute":"backgroundColor","grouping":"Properties","value":"transparent","script":"","translation":[]}]},{"fieldNo":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldName":"AppCacheNav","fieldParent":"5a16303b-ceb7-4784-a46e-372ded7ab833","fieldPos":69,"fieldType":"sap.m.NavContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"defaultTransitionName","grouping":"Properties","value":"show","script":"","translation":[]},{"attribute":"afterNavigate","grouping":"Events","value":"Anonymous Function","script":"// Check for page content. Could be deleted after onOffline/onOnline and RebuildTiles\r\nlet currentPage = AppCacheNav.getCurrentPage();\r\n\r\n// Only for Tile Group + Childs \r\nif (currentPage.sId.indexOf('page') > -1 && !currentPage.getContent().length) {\r\n    let cat = currentPage.sId;\r\n    cat = cat.split('page')[1];\r\n\r\n    const category = sap.n.Customization.getCategory(cat);\r\n    if (category) {\r\n        sap.n.Launchpad.BuildTiles(category);\r\n    } else {\r\n        const tilegroup = sap.n.Customization.getTileGroup(cat);\r\n        if (tilegroup) sap.n.Launchpad.BuildTiles(tilegroup, tilegroup.id);\r\n    }\r\n}","translation":[]},{"attribute":"autoFocus","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"dd3d8673-781e-4cb6-bdc6-e3b29a3a8eba","fieldName":"AppCachePageMenu","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":70,"fieldType":"sap.m.Page","script":"","customComponent":false,"bindingType":"u","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"2acab870-3b8e-4f4f-f2d8-26df59161072","fieldName":"AppCachePageStore","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":71,"fieldType":"sap.m.Page","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiResponsiveContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"f345cb65-8c30-4f25-8019-98557904269e","fieldName":"oContentBlockLayout","fieldParent":"2acab870-3b8e-4f4f-f2d8-26df59161072","fieldPos":72,"fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]}]},{"fieldNo":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldName":"oDetailsBlockLayoutRrow","fieldParent":"f345cb65-8c30-4f25-8019-98557904269e","fieldPos":73,"fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"39787ae1-c7a8-4bfa-d2d2-459527bd5c5e","fieldName":"oTileLayoutCell","fieldParent":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldPos":74,"fieldType":"sap.ui.layout.BlockLayoutCell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"65","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTileCards","script":"","translation":[]},{"attribute":"backgroundColorSet","grouping":"Properties","value":"ColorSet9","script":"","translation":[]},{"attribute":"backgroundColorShade","grouping":"Properties","value":"ShadeB","script":"","translation":[]}]},{"fieldNo":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldName":"oTileGrid","fieldParent":"39787ae1-c7a8-4bfa-d2d2-459527bd5c5e","fieldPos":75,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiDemoKitStoreGrid","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldName":"oTileContent","fieldParent":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldPos":76,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldName":"oHBoxTitle","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":77,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"628e6149-456e-42de-c47a-33e35a051841","fieldName":"oTitleContentTitle","fieldParent":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldPos":78,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{/name}","script":"","translation":[]}]},{"fieldNo":"fdb2234e-0fdc-4f12-d081-3eec9614060e","fieldName":"oTitleContentVersion","fieldParent":"b8525ba4-71f5-4dfc-bd75-37d5889cb4a3","fieldPos":79,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{/activeVersion}","script":"","translation":[]}]},{"fieldNo":"95f01ab7-2924-4d26-dea8-42d9daffa17c","fieldName":"oTileTimestamp","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":80,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Published","script":"","translation":[{"language":"ZH","value":"发布时间"},{"language":"DA","value":"Udgivet"},{"language":"NL","value":"Gepubliceerd"},{"language":"FI","value":"Julkaistu"},{"language":"FR","value":"Publié"},{"language":"DE","value":"Freigegeben"},{"language":"IT","value":"Pubblicato"},{"language":"JA","value":"公開済み"},{"language":"NO","value":"Publisert"},{"language":"PL","value":"Opublikowany"},{"language":"PT","value":"Publicados"},{"language":"ES","value":"Publicado"},{"language":"SV","value":"Publicerad"},{"language":"EN","value":"Published"}]},{"attribute":"text","grouping":"Properties","value":"{/activeBuild/updatedAt}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}]},{"fieldNo":"6721b492-8344-4906-da75-d4979743cf9c","fieldName":"oTilePublisher","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":81,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Publisher","script":"","translation":[{"language":"ZH","value":"出版者"},{"language":"DA","value":"Forlægger"},{"language":"NL","value":"Uitgeverij"},{"language":"FI","value":"Kustantaja"},{"language":"FR","value":"Éditeur"},{"language":"DE","value":"Herausgeber"},{"language":"IT","value":"Editore"},{"language":"JA","value":"出版社"},{"language":"NO","value":"Forlegger"},{"language":"PL","value":"Wydawca"},{"language":"PT","value":"Editor"},{"language":"ES","value":"Editor"},{"language":"SV","value":"Utgivare"},{"language":"EN","value":"Publisher"}]},{"attribute":"text","grouping":"Properties","value":"{/activeBuild/changedBy}","script":"","translation":[]}]},{"fieldNo":"fcb17e1d-2b42-41bd-fdd9-ff5780f0f2bb","fieldName":"oTitleDescription","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":82,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Description","script":"","translation":[{"language":"ZH","value":"描述"},{"language":"DA","value":"Beskrivelse"},{"language":"NL","value":"Omschrijving"},{"language":"FI","value":"Kuvaus"},{"language":"FR","value":"La description"},{"language":"DE","value":"Beschreibung"},{"language":"IT","value":"Descrizione"},{"language":"JA","value":"説明"},{"language":"NO","value":"Beskrivelse"},{"language":"PL","value":"Opis"},{"language":"PT","value":"Descrição"},{"language":"ES","value":"Descripción"},{"language":"SV","value":"Beskrivning"},{"language":"EN","value":"Description"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]}]},{"fieldNo":"14ad178f-3346-4d0e-c0c2-65df5897d222","fieldName":"oTileDescription","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":83,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/description}","script":"","translation":[]}]},{"fieldNo":"32d8b601-7a23-46e1-ac69-6c613895c9e9","fieldName":"oTitleAuthor","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":84,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Author","script":"","translation":[{"language":"ZH","value":"作者"},{"language":"DA","value":"Forfatter"},{"language":"NL","value":"Schrijver"},{"language":"FI","value":"kirjailija"},{"language":"FR","value":"Auteur"},{"language":"DE","value":"Autor"},{"language":"IT","value":"Autore"},{"language":"JA","value":"著者"},{"language":"NO","value":"Forfatter"},{"language":"PL","value":"Autor"},{"language":"PT","value":"Autor"},{"language":"ES","value":"Autor"},{"language":"SV","value":"Författare"},{"language":"EN","value":"Author"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]}]},{"fieldNo":"3fc42afa-dfbd-4c65-fa94-ea442395c438","fieldName":"oTileAuthor","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":85,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorName}","script":"","translation":[]}]},{"fieldNo":"e2e8db05-d19f-48bc-ba04-8547e75d6685","fieldName":"oTileMail","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":86,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorEmail}","script":"","translation":[]}]},{"fieldNo":"c448234a-9950-42ed-aea0-543b878b9ed7","fieldName":"oTileWeb","fieldParent":"400e2e3b-0673-4295-d31e-e9cf75211058","fieldPos":87,"fieldType":"sap.m.ObjectStatus","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/authorURL}","script":"","translation":[]}]},{"fieldNo":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldName":"oTileSupport","fieldParent":"19fac503-9c6f-42e0-bd48-5f1efd550b15","fieldPos":88,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}]},{"fieldNo":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldName":"oTileSupportIcons","fieldParent":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldPos":89,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"796edff1-3113-4211-bbbb-07de2a871825","fieldName":"imgWindows","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldPos":90,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.8rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildWindows}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/windows.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"374307d7-4865-439d-f863-a78447f7d7c8","fieldName":"imgAndroid","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldPos":91,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.5rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildAndroid}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/android.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"d6b0b449-d0dd-4067-f0db-f2788fa1d9df","fieldName":"imgIos","fieldParent":"eda8d5ac-9c34-4f23-88c8-025410687b88","fieldPos":92,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"2.5rem","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{/buildIOS}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"/public/images/ios.png","script":"","translation":[]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"1f630bf0-5866-4880-879f-3e7abaa6f779","fieldName":"AppCachePageStoreInstall","fieldParent":"7ce5fd7d-b034-4f91-fad0-7253b2d9c7a9","fieldPos":93,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Install","script":"","translation":[{"language":"ZH","value":"安装"},{"language":"DA","value":"Installere"},{"language":"NL","value":"Installeren"},{"language":"FI","value":"Asentaa"},{"language":"FR","value":"Installer"},{"language":"DE","value":"Installieren"},{"language":"IT","value":"Installare"},{"language":"JA","value":"インストール"},{"language":"NO","value":"Installere"},{"language":"PL","value":"zainstalować"},{"language":"PT","value":"Instalar"},{"language":"ES","value":"Instalar"},{"language":"SV","value":"Installera"},{"language":"EN","value":"Install"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const deviceName = sap.ui.Device.os.name;\nconst { id, serverAddress, activeBuild, activeVersion } = modelAppCachePageStore.oData;\n\nlet n = `${serverAddress}/mobileClients/${id}/build/${activeBuild.id}/`;\n\nif (deviceName === 'win') n += 'Windows';\nelse if (deviceName === 'Android') n += 'Android';\nelse if (deviceName === 'iOS') {\n    n = 'itms-services://?action=download-manifest&url=' + encodeURIComponent(`${n}Ios.plist`);\n    console.log(n);\n}\n\nif (isCordova()) {\n    AppCache.UpdateMobileApp(n, activeVersion);\n} else {\n    sap.m.URLHelper.redirect(n, false);\n    sap.m.MessageToast.show('Download Started');\n}","translation":[]}]},{"fieldNo":"a37b3c9b-bc4b-48b9-e893-9e528b262b0d","fieldName":"oTileImageCell","fieldParent":"1288f912-c170-45ae-9444-d0862d7f94ef","fieldPos":94,"fieldType":"sap.ui.layout.BlockLayoutCell","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"35","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTileCards","script":"","translation":[]},{"attribute":"backgroundColorSet","grouping":"Properties","value":"ColorSet9","script":"","translation":[]},{"attribute":"backgroundColorShade","grouping":"Properties","value":"ShadeC","script":"","translation":[]}]},{"fieldNo":"10e708e7-fd23-44a0-8983-70453a7ce217","fieldName":"oTileImageData","fieldParent":"a37b3c9b-bc4b-48b9-e893-9e528b262b0d","fieldPos":95,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"eab93fd0-69f8-40c6-f933-e88898803ca1","fieldName":"oTileImage","fieldParent":"10e708e7-fd23-44a0-8983-70453a7ce217","fieldPos":96,"fieldType":"sap.m.Image","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Click to enlarge","script":"","translation":[{"language":"ZH","value":"点击放大"},{"language":"DA","value":"Klik for større billede"},{"language":"NL","value":"Klik om te vergroten"},{"language":"FI","value":"Klikkaa suurentaaksesi"},{"language":"FR","value":"Cliquez pour agrandir"},{"language":"DE","value":"Klicken zum Vergrößern"},{"language":"IT","value":"clicca per ingrandire"},{"language":"JA","value":"拡大するにはクリックしてください"},{"language":"NO","value":"Klikk for å forstørre"},{"language":"PL","value":"Kliknij, aby powiększyć"},{"language":"PT","value":"Clique para ampliar"},{"language":"ES","value":"Click para agrandar"},{"language":"SV","value":"Klicka för att förstora"},{"language":"EN","value":"Click to enlarge"}]},{"attribute":"densityAware","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"22ce0ada-fc48-4db6-8115-052a801c34ec","fieldName":"AppCache_boxLogon","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":97,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"69c2b82b-01d1-4e3f-9831-6d48aa6bc197","fieldName":"AppCache_boxLogonCenter","fieldParent":"22ce0ada-fc48-4db6-8115-052a801c34ec","fieldPos":98,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldName":"panLogon","fieldParent":"69c2b82b-01d1-4e3f-9831-6d48aa6bc197","fieldPos":99,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldName":"AppCache_formLogon","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldPos":100,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"60328712-28d7-4177-b587-776e5b28129f","fieldName":"lblFormLoginSubTitle","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":101,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}]},{"fieldNo":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldName":"boxSubTitle","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":102,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}]},{"fieldNo":"266a48c0-0f09-49fd-990d-784e5fb1f4e9","fieldName":"txtFormLoginSubTitle1","fieldParent":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldPos":103,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}]},{"fieldNo":"778adac1-8786-43c7-b73d-1403504557ec","fieldName":"txtFormLoginSubTitle2","fieldParent":"929b2ef2-0184-4014-f746-7f9227df39d0","fieldPos":104,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H5","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileSubTitle","script":"","translation":[]}]},{"fieldNo":"ead3ec8a-4aeb-4a6e-a695-3b808921c95c","fieldName":"AppCache_lblFormLogin","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":105,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Login Provider","script":"","translation":[{"language":"ZH","value":"登录提供商"},{"language":"DA","value":"Login Provider"},{"language":"NL","value":"Login-provider"},{"language":"FI","value":"Kirjaudu palveluntarjoajalle"},{"language":"FR","value":"Fournisseur de connexion"},{"language":"DE","value":"Login-Anbieter"},{"language":"IT","value":"Provider di accesso"},{"language":"JA","value":"ログインプロバイダ"},{"language":"NO","value":"Innloggingsleverandør"},{"language":"PL","value":"Dostawca logowania"},{"language":"PT","value":"Fornecedor de Acesso"},{"language":"ES","value":"Proveedor de inicio de sesión"},{"language":"SV","value":"Inloggningsleverantör"},{"language":"EN","value":"Login Provider"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"3120618d-381c-4c2c-bdd7-9f9ddb41da8c","fieldName":"AppCache_loginTypes","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":106,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"sap.n.Utils.setLogonScreen();","script":"sap.n.Utils.setLogonScreen();","translation":[]}]},{"fieldNo":"6e32cff4-6d72-429f-cef1-3ad4e9ee7dea","fieldName":"AppCache_lblUsername","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":107,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Username","script":"","translation":[{"language":"ZH","value":"用户名"},{"language":"DA","value":"Brugernavn"},{"language":"NL","value":"Gebruikersnaam"},{"language":"FI","value":"Käyttäjätunnus"},{"language":"FR","value":"Nom d'utilisateur"},{"language":"DE","value":"Nutzername"},{"language":"IT","value":"Nome utente"},{"language":"JA","value":"ユーザー名"},{"language":"NO","value":"Brukernavn"},{"language":"PL","value":"Nazwa Użytkownika"},{"language":"PT","value":"Nome de usuário"},{"language":"ES","value":"Nombre de usuario"},{"language":"SV","value":"Användarnamn"},{"language":"EN","value":"Username"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"a981a7ff-928b-4daf-d1f5-e4e966dc2a20","fieldName":"AppCache_inUsername","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":108,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"AppCache_inPassword.focus();","script":"AppCache_inPassword.focus();","translation":[]}]},{"fieldNo":"872497ac-7248-499d-acfc-09a6f9c88243","fieldName":"AppCache_lblPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":109,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Password","script":"","translation":[{"language":"ZH","value":"密码"},{"language":"DA","value":"Adgangskode"},{"language":"NL","value":"Wachtwoord"},{"language":"FI","value":"Salasana"},{"language":"FR","value":"Mot de passe"},{"language":"DE","value":"Passwort"},{"language":"IT","value":"Parola d'ordine"},{"language":"JA","value":"パスワード"},{"language":"NO","value":"Passord"},{"language":"PL","value":"Hasło"},{"language":"PT","value":"Senha"},{"language":"ES","value":"Contraseña"},{"language":"SV","value":"Lösenord"},{"language":"EN","value":"Password"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"410231c5-9e9b-42be-92e1-8fed1ef328fd","fieldName":"AppCache_inPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":110,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"submit","grouping":"Events","value":"AppCache_butLogon.firePress();","script":"AppCache_butLogon.firePress();","translation":[]}]},{"fieldNo":"0be5c144-576a-46c0-cde6-1061128c8afb","fieldName":"AppCache_lblLanguage","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":111,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Language","script":"","translation":[{"language":"ZH","value":"语言"},{"language":"DA","value":"Sprog"},{"language":"NL","value":"Taal"},{"language":"FI","value":"Kieli"},{"language":"FR","value":"La langue"},{"language":"DE","value":"Sprache"},{"language":"IT","value":"linguaggio"},{"language":"JA","value":"言語"},{"language":"NO","value":"Språk"},{"language":"PL","value":"Język"},{"language":"PT","value":"Língua"},{"language":"ES","value":"Idioma"},{"language":"SV","value":"Språk"},{"language":"EN","value":"Language"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"ca7849d4-e7ba-4dab-85cb-43450fcd9862","fieldName":"AppCache_inLanguage","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":112,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"22937967-ffd7-42da-c839-481117e0389e","fieldName":"AppCache_lblShowPass","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":113,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"4a34780e-0f95-473f-fc1a-29e90af36ee7","fieldName":"AppCache_inShowPass","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":114,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Show password","script":"","translation":[{"language":"DA","value":"Vis adgangskode"},{"language":"NL","value":"Laat wachtwoord zien"},{"language":"FI","value":"Näytä salasana"},{"language":"FR","value":"Montrer le mot de passe"},{"language":"DE","value":"Passwort anzeigen"},{"language":"NO","value":"Vis passord"},{"language":"PL","value":"Pokaż hasło"},{"language":"PT","value":"Mostrar senha"},{"language":"ES","value":"Mostrar contraseña"},{"language":"SV","value":"Visa lösenord"},{"language":"EN","value":"Show password"}]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"if (AppCache_inShowPass.getSelected()) {\r\n    AppCache_inPassword.setType(\"Text\");\r\n} else {\r\n    AppCache_inPassword.setType(\"Password\");\r\n}\r\n","translation":[]}]},{"fieldNo":"5121da11-b774-4541-8896-e8c04a7986f9","fieldName":"AppCache_lblRememberMe","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":115,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"e34ceea3-74e1-4794-d1d4-bd2b2381e45f","fieldName":"AppCache_inRememberMe","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":116,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Remember me","script":"","translation":[{"language":"PL","value":"Zapamiętaj mnie"},{"language":"EN","value":"Remember me"}]}]},{"fieldNo":"24c1d125-b126-42c5-9067-4b9013855191","fieldName":"AppCache_lblLogon","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":117,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"dd5d228c-2f9a-4512-9b76-d6546a028ebe","fieldName":"AppCache_butLogon","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":118,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Sign in","script":"","translation":[{"language":"ZH","value":"登录"},{"language":"DA","value":"Log på"},{"language":"NL","value":"Inloggen"},{"language":"FI","value":"Kirjaudu sisään"},{"language":"FR","value":"Se connecter"},{"language":"DE","value":"Einloggen"},{"language":"IT","value":"Accedere"},{"language":"JA","value":"ログオン"},{"language":"NO","value":"Logg på"},{"language":"PL","value":"Zaloguj się"},{"language":"PT","value":"Logon"},{"language":"ES","value":"Acceder"},{"language":"SV","value":"Logga in"},{"language":"EN","value":"Sign in"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let userName = AppCache_inUsername.getValue();\nAppCache_inUsername.setValue(userName.trim());\n\nAppCache_inUsername.setValueState();\nAppCache_inPassword.setValueState();\n\n// Checks\nif (AppCache_inUsername.getVisible() && !AppCache_inUsername.getValue()) {\n    AppCache_inUsername.setValueState('Error');\n    setTimeout(function () {\n        AppCache_inUsername.focus();\n    }, 400);\n    return;\n}\n\nif (AppCache_inPassword.getVisible() && !AppCache_inPassword.getValue()) {\n    AppCache_inPassword.setValueState('Error');\n    setTimeout(function () {\n        AppCache_inPassword.focus();\n    }, 400);\n    return;\n}\n\nAppCache.Logon();","translation":[]}]},{"fieldNo":"81e4f108-1f2b-4303-fe74-7fb613785c06","fieldName":"AppCache_resetPassword","fieldParent":"285b3981-8d50-49c2-89c4-5d5ce8ecccb1","fieldPos":119,"fieldType":"sap.m.Link","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Forgot Password","script":"","translation":[{"language":"ZH","value":"忘记密码"},{"language":"DA","value":"Glemt kodeord"},{"language":"NL","value":"Wachtwoord vergeten"},{"language":"FI","value":"Unohtuiko salasana"},{"language":"FR","value":"Mot de passe oublié"},{"language":"DE","value":"Passwort vergessen"},{"language":"IT","value":"Ha dimenticato la password"},{"language":"JA","value":"パスワードをお忘れですか"},{"language":"NO","value":"Glemt passord"},{"language":"PL","value":"Zapomniałeś hasła"},{"language":"PT","value":"Esqueceu a senha"},{"language":"ES","value":"Se te olvidó tu contraseña"},{"language":"SV","value":"Glömt ditt lösenord"},{"language":"EN","value":"Forgot Password"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"neptuneLinkWhite","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"window.open(AppCache.passUrlReset, \"_system\");","translation":[]}]},{"fieldNo":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldName":"AppCache_formPasswordReset","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldPos":120,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"columnsL","grouping":"Properties","value":"1","script":"","translation":[]}]},{"fieldNo":"e7dc0eaf-3366-4c3f-f74e-513d502e7158","fieldName":"lblFormNewPassSubTitle","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":121,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}]},{"fieldNo":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldName":"boxNewPassSubTitle","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":122,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}]},{"fieldNo":"f43cecf5-4e61-4c89-e155-c61a1a666ca3","fieldName":"txtFormNewPassTitle","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldPos":123,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H1","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Reset password","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"69057640-9793-4bd9-ac74-fd6d9bf5055d","fieldName":"txtFormNewPassRequired","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldPos":124,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"You are required to reset your password.","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"1266e781-b7f3-4471-d4e2-2af7a017e094","fieldName":"txtFormNewPassExpired","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldPos":125,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Your password has expired.","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"794d1952-d6e7-48ac-a86e-de0387aec011","fieldName":"txtFormNewPassSubTitle","fieldParent":"5746ede1-4069-4c8a-c790-4cf16661da10","fieldPos":126,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H4","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Please set a new password below.","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"fc8806ec-e0f2-44f2-da00-bbc2c44def38","fieldName":"lblNewPassword","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":127,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New password","script":"","translation":[]}]},{"fieldNo":"af752bf2-7de2-4311-c791-81c26d43f535","fieldName":"inNewPassword","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":128,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValueState();","script":"this.setValueState();","translation":[]}]},{"fieldNo":"1372acf3-11fa-445f-fa0b-e639b70a21e2","fieldName":"lblNewPassword2","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":129,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat password","script":"","translation":[]}]},{"fieldNo":"d069fe0f-8c60-460f-a123-090980df573b","fieldName":"inNewPassword2","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":130,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValueState();","script":"this.setValueState();","translation":[]}]},{"fieldNo":"2028367b-2bcb-45e1-b3c8-f46c50b10240","fieldName":"butSubmitNewPass","fieldParent":"fb646057-0430-4e3a-cb5a-54b93eed09d1","fieldPos":131,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Submit","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheLogonSap.ResetPassword();","script":"AppCacheLogonSap.ResetPassword();","translation":[]}]},{"fieldNo":"df4b9670-fb69-4c62-b930-870c1a541d61","fieldName":"panLinks","fieldParent":"ba55d7bd-1d6c-4d5f-f86d-baa01c95e9c0","fieldPos":132,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldName":"toolLinks","fieldParent":"df4b9670-fb69-4c62-b930-870c1a541d61","fieldPos":133,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"20837d0c-6a11-4b94-b760-f255acb200ac","fieldName":"linkText1","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldPos":134,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}]},{"fieldNo":"b9e7e2d3-15f2-4a06-aa2f-ca920b8010c7","fieldName":"linkSep1","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldPos":135,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"40732b8e-8821-4d45-c9a3-9b79ece519f9","fieldName":"linkText2","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldPos":136,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}]},{"fieldNo":"f305c385-0ed8-4a28-d9cf-359f3dfb4284","fieldName":"linkSep2","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldPos":137,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"8ce472c1-5184-40b2-ed73-9026a44eea48","fieldName":"linkText3","fieldParent":"f6216dd6-4c62-4998-8dab-2d7fa30eee42","fieldPos":138,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}]},{"fieldNo":"d5b0a129-53ce-45ff-9e57-601ef8f8c006","fieldName":"AppCache_boxLogonCustom","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":139,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"3c23f17b-1706-46d7-84a5-7786abd145fb","fieldName":"AppCache_boxPassword","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":140,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"24a1b591-e96c-4752-a0c0-02dfa8aba8da","fieldName":"AppCache_boxLogonPassword","fieldParent":"3c23f17b-1706-46d7-84a5-7786abd145fb","fieldPos":141,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignContent","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldName":"AppCache_formPassword","fieldParent":"24a1b591-e96c-4752-a0c0-02dfa8aba8da","fieldPos":142,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"6664edcd-3e5f-4a3f-aa03-3c6709107964","fieldName":"AppCache_titlePassword","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":143,"fieldType":"sap.ui.core.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Change Password","script":"","translation":[{"language":"ZH","value":"更改密码"},{"language":"DA","value":"Skift kodeord"},{"language":"NL","value":"Wachtwoord wijzigen"},{"language":"FI","value":"Vaihda salasana"},{"language":"FR","value":"Changer le mot de passe"},{"language":"DE","value":"Passwort ändern"},{"language":"IT","value":"Cambia la password"},{"language":"JA","value":"パスワードを変更する"},{"language":"NO","value":"Bytt passord"},{"language":"PL","value":"Zmień hasło"},{"language":"PT","value":"Mudar a senha"},{"language":"ES","value":"Cambia la contraseña"},{"language":"SV","value":"Ändra lösenord"},{"language":"EN","value":"Change Password"}]},{"attribute":"level","grouping":"Properties","value":"H1","script":"","translation":[]}]},{"fieldNo":"a6f8621d-d37c-48fc-aaa3-364a7c0754ec","fieldName":"AppCache_lblPassOld","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":144,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Old","script":"","translation":[{"language":"ZH","value":"旧"},{"language":"DA","value":"Gammel"},{"language":"NL","value":"Oud"},{"language":"FI","value":"Vanha"},{"language":"FR","value":"Vieux"},{"language":"DE","value":"Alt"},{"language":"IT","value":"Vecchio"},{"language":"JA","value":"古い"},{"language":"NO","value":"Gammel"},{"language":"PL","value":"Stary"},{"language":"PT","value":"Antigo"},{"language":"ES","value":"Antiguo"},{"language":"SV","value":"Gammal"},{"language":"EN","value":"Old"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"b8b91d49-34ee-4922-af92-5520fe490301","fieldName":"AppCache_inPassOld","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":145,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"AppCache_inPassword.focus();","script":"AppCache_inPassword.focus();","translation":[]}]},{"fieldNo":"7ea30d24-1724-4740-d0e1-df7eb5265813","fieldName":"AppCache_lblPassNew","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":146,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New","script":"","translation":[{"language":"ZH","value":"新"},{"language":"DA","value":"Ny"},{"language":"NL","value":"nieuwe"},{"language":"FI","value":"Uusi"},{"language":"FR","value":"Nouveau"},{"language":"DE","value":"Neu"},{"language":"IT","value":"Nuovo"},{"language":"JA","value":"新しい"},{"language":"NO","value":"Ny"},{"language":"PL","value":"Nowy"},{"language":"PT","value":"Novo"},{"language":"ES","value":"Nuevo"},{"language":"SV","value":"Ny"},{"language":"EN","value":"New"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"09b782aa-6342-40fd-d07d-5b4baa02a716","fieldName":"AppCache_inPassNew","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":147,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}]},{"fieldNo":"44a1e619-05d2-45aa-f848-4f6c7335a864","fieldName":"AppCache_lblPassRepeat","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":148,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat","script":"","translation":[{"language":"ZH","value":"重复"},{"language":"DA","value":"Gentage"},{"language":"NL","value":"Herhaling"},{"language":"FI","value":"Toistaa"},{"language":"FR","value":"Répéter"},{"language":"DE","value":"Wiederholen"},{"language":"IT","value":"Ripetere"},{"language":"JA","value":"繰り返す"},{"language":"NO","value":"Gjenta"},{"language":"PL","value":"Powtarzać"},{"language":"PT","value":"Repetir"},{"language":"ES","value":"Repetir"},{"language":"SV","value":"Upprepa"},{"language":"EN","value":"Repeat"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"6f40b828-b67e-44eb-83f1-e9bcb7adf256","fieldName":"AppCache_inPassRepeat","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":149,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}]},{"fieldNo":"2756763c-0251-47c4-a5a8-04d6216f4331","fieldName":"AppCache_butPassword","fieldParent":"b8d865ed-6698-4027-dc63-10fff3d17d66","fieldPos":150,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"ZH","value":"确认"},{"language":"DA","value":"Bekræfte"},{"language":"NL","value":"Bevestigen"},{"language":"FI","value":"Vahvistaa"},{"language":"FR","value":"Confirmer"},{"language":"DE","value":"Bestätigen"},{"language":"IT","value":"Confermare"},{"language":"JA","value":"確認する"},{"language":"NO","value":"Bekreft"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"Confirmar"},{"language":"ES","value":"Confirmar"},{"language":"SV","value":"Bekräfta"},{"language":"EN","value":"Confirm"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.SetPassword();","script":"AppCache.SetPassword();","translation":[]}]},{"fieldNo":"d13a3595-9b70-44c4-f6e5-c5e5df7f8e44","fieldName":"AppCache_boxPasscode","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":151,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"a0fe8a58-92f3-409b-9c85-ee6de5e31368","fieldName":"AppCache_boxLogonPasscode","fieldParent":"d13a3595-9b70-44c4-f6e5-c5e5df7f8e44","fieldPos":152,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldName":"panLogonPasscode","fieldParent":"a0fe8a58-92f3-409b-9c85-ee6de5e31368","fieldPos":153,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldName":"AppCache_formPasscode","fieldParent":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldPos":154,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"8f979d4d-bb4e-454c-f207-b7ffc0f5a44b","fieldName":"lblFormPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":155,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]}]},{"fieldNo":"36e6e29e-4ce7-4912-c893-4388d28279bb","fieldName":"txtFormPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":156,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Pin Code","script":"","translation":[{"language":"ZH","value":"PIN码"},{"language":"DA","value":"Pinkode"},{"language":"NL","value":"Pincode"},{"language":"FI","value":"Pin-koodi"},{"language":"FR","value":"Code PIN"},{"language":"DE","value":"PIN Code"},{"language":"IT","value":"Codice PIN"},{"language":"JA","value":"ピンコード"},{"language":"NO","value":"Pin kode"},{"language":"PL","value":"Kod PIN"},{"language":"PT","value":"Código PIN"},{"language":"ES","value":"Código PIN"},{"language":"SV","value":"Pinkod"},{"language":"EN","value":"Pin Code"}]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}]},{"fieldNo":"6247aa2d-ed4c-4373-a42c-2e5870fe9676","fieldName":"AppCache_lblPasscode1","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":157,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Set Pin","script":"","translation":[{"language":"ZH","value":"设置Pin"},{"language":"DA","value":"Indstil pin"},{"language":"NL","value":"Stel Pin in"},{"language":"FI","value":"Aseta Pin"},{"language":"FR","value":"Set Pin"},{"language":"DE","value":"PIN setzen"},{"language":"IT","value":"Imposta il pin"},{"language":"JA","value":"セットピン"},{"language":"NO","value":"Sett Pin"},{"language":"PL","value":"Ustaw pinezkę"},{"language":"PT","value":"Definir PIN"},{"language":"ES","value":"Set Pin"},{"language":"SV","value":"Ställ in pin"},{"language":"EN","value":"Set Pin"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"0afa3e55-55d4-4e34-8277-8e428b19b845","fieldName":"AppCache_inPasscode1","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":158,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Numeric only","script":"","translation":[{"language":"ZH","value":"仅限数字"},{"language":"DA","value":"Kun numerisk"},{"language":"NL","value":"Alleen numeriek"},{"language":"FI","value":"Vain numeerinen"},{"language":"FR","value":"Numérique seulement"},{"language":"DE","value":"Nur numerisch"},{"language":"IT","value":"Solo numerico"},{"language":"JA","value":"数値のみ"},{"language":"NO","value":"Kun numeriske tegn"},{"language":"PL","value":"Tylko numeryczne"},{"language":"PT","value":"Apenas numérico"},{"language":"ES","value":"Solo numérico"},{"language":"SV","value":"Endast numerisk"},{"language":"EN","value":"Numeric only"}]},{"attribute":"submit","grouping":"Events","value":"onPasscode1Submit()","script":"onPasscode1Submit()","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValue(sanitizePincode(this.getValue()));","script":"this.setValue(sanitizePincode(this.getValue()));","translation":[]}]},{"fieldNo":"a5929851-d5b8-4fa4-a6b6-69a9fb1b18a2","fieldName":"AppCache_lblPasscode2","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":159,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat Pin","script":"","translation":[{"language":"ZH","value":"重复Pin"},{"language":"DA","value":"Gentag Pin"},{"language":"NL","value":"Herhaal Pin"},{"language":"FI","value":"Toista Pin"},{"language":"FR","value":"Pin de répétition"},{"language":"DE","value":"PIN wiederholen"},{"language":"IT","value":"Ripeti il pin"},{"language":"JA","value":"繰り返しピン"},{"language":"NO","value":"Gjenta Pin"},{"language":"PL","value":"Powtórz Pin"},{"language":"PT","value":"Repita o PIN"},{"language":"ES","value":"Repetir Pin"},{"language":"SV","value":"Upprepa Pin"},{"language":"EN","value":"Repeat Pin"}]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileLabel","script":"","translation":[]}]},{"fieldNo":"23126457-393c-4305-a22c-ebbfe1316ae2","fieldName":"AppCache_inPasscode2","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":160,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]},{"attribute":"placeholder","grouping":"Properties","value":"Numeric only","script":"","translation":[{"language":"ZH","value":"仅限数字"},{"language":"DA","value":"Kun numerisk"},{"language":"NL","value":"Alleen numeriek"},{"language":"FI","value":"Vain numeerinen"},{"language":"FR","value":"Numérique seulement"},{"language":"DE","value":"Nur numerisch"},{"language":"IT","value":"Solo numerico"},{"language":"JA","value":"数値のみ"},{"language":"NO","value":"Kun numeriske tegn"},{"language":"PL","value":"Tylko numeryczne"},{"language":"PT","value":"Apenas numérico"},{"language":"ES","value":"Solo numérico"},{"language":"SV","value":"Endast numerisk"},{"language":"EN","value":"Numeric only"}]},{"attribute":"submit","grouping":"Events","value":"onPasscode2Submit();","script":"onPasscode2Submit();","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"this.setValue(sanitizePincode(this.getValue()));","script":"this.setValue(sanitizePincode(this.getValue()));","translation":[]}]},{"fieldNo":"6e2f2b51-5455-402a-c21d-b15581122aad","fieldName":"AppCache_butPasscode","fieldParent":"22cc0495-0f36-45c4-e397-4332cf08db2c","fieldPos":161,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"ZH","value":"确认"},{"language":"DA","value":"Bekræfte"},{"language":"NL","value":"Bevestigen"},{"language":"FI","value":"Vahvistaa"},{"language":"FR","value":"Confirmer"},{"language":"DE","value":"Bestätigen"},{"language":"IT","value":"Confermare"},{"language":"JA","value":"確認する"},{"language":"NO","value":"Bekreft"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"Confirmar"},{"language":"ES","value":"Confirmar"},{"language":"SV","value":"Bekräfta"},{"language":"EN","value":"Confirm"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCache.SetPasscode();","script":"AppCache.SetPasscode();","translation":[]}]},{"fieldNo":"f0d4c765-85e6-40a6-a42a-3bb2051a07d8","fieldName":"panLinksPass","fieldParent":"9e11118b-e84d-4216-d0f4-02b9fdb2a417","fieldPos":162,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldName":"toolLinksPass","fieldParent":"f0d4c765-85e6-40a6-a42a-3bb2051a07d8","fieldPos":163,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"cd800b93-88ec-4978-9962-c68e9609ed9c","fieldName":"linkPassText1","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldPos":164,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}]},{"fieldNo":"31fe8267-fd31-4ec6-eb31-b99fb2d05a5c","fieldName":"linkPassSep1","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldPos":165,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"b3cb068d-0a96-48ba-d2c5-33f7c6c25699","fieldName":"linkPassText2","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldPos":166,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}]},{"fieldNo":"0ea977d0-02d1-461f-97f3-4e1685e9a81d","fieldName":"linkPassSep2","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldPos":167,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"ed09c2d2-41f4-4bd4-b10b-f7da55d2d3f8","fieldName":"linkPassText3","fieldParent":"6b8c4bf4-65f8-4301-b74a-f9e69009848c","fieldPos":168,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}]},{"fieldNo":"ec9721ad-4ad3-4b01-cb2e-f8c2c6599cb9","fieldName":"AppCache_boxUsers","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":169,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"b70baafb-1af2-498d-a985-7834c1e3ed36","fieldName":"AppCache_boxLogonUsers","fieldParent":"ec9721ad-4ad3-4b01-cb2e-f8c2c6599cb9","fieldPos":170,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldName":"panLogonUsers","fieldParent":"b70baafb-1af2-498d-a985-7834c1e3ed36","fieldPos":171,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldName":"toolUsers","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldPos":172,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepToolNoBorder","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"2659f3ba-b3db-46fb-82e2-d994211fc83e","fieldName":"txtFormUsers","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldPos":173,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Users","script":"","translation":[{"language":"ZH","value":"PIN码"},{"language":"DA","value":"Brugere"},{"language":"NL","value":"Pincode"},{"language":"FI","value":"Pin-koodi"},{"language":"FR","value":"Code PIN"},{"language":"DE","value":"Benutzer"},{"language":"IT","value":"Codice PIN"},{"language":"JA","value":"ピンコード"},{"language":"NO","value":"Brukere"},{"language":"PL","value":"Użytkownicy"},{"language":"PT","value":"Comercial"},{"language":"ES","value":"Usuarios"},{"language":"SV","value":"Användare"},{"language":"EN","value":"Users"}]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTopBottom","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileTitle","script":"","translation":[]}]},{"fieldNo":"ba39231c-1ca1-416a-fe03-33eb85340ef7","fieldName":"toolUsersSpacer","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldPos":174,"fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldName":"toolUsersSort","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldPos":175,"fieldType":"sap.m.SegmentedButton","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"let oSorter;\r\nif (this.getSelectedKey() === 'date') {\r\n    oSorter = new sap.ui.model.Sorter('lastLogin', true, false);\r\n} else {\r\n    oSorter = new sap.ui.model.Sorter('username', false, false);\r\n}\r\n\r\nlet binding = AppCacheUsers.getBinding('items');\r\nbinding.sort(oSorter);","translation":[]}]},{"fieldNo":"2bc15a13-a7ab-4426-f9eb-3a5cbe16d566","fieldName":"toolUsersSortName","fieldParent":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldPos":176,"fieldType":"sap.m.SegmentedButtonItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Name","script":"","translation":[{"language":"PL","value":"Nazwa"},{"language":"EN","value":"Name"}]},{"attribute":"key","grouping":"Properties","value":"name","script":"","translation":[]}]},{"fieldNo":"393cdf58-85d5-4103-9801-091a74bf229b","fieldName":"toolUsersSortDate","fieldParent":"483d90dc-7b00-4355-d249-83dd4755dd0e","fieldPos":177,"fieldType":"sap.m.SegmentedButtonItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Date","script":"","translation":[{"language":"PL","value":"Data"},{"language":"EN","value":"Date"}]},{"attribute":"key","grouping":"Properties","value":"date","script":"","translation":[]}]},{"fieldNo":"1e27a622-ff0a-4e74-8169-264995ec79d8","fieldName":"toolUsersFilter","fieldParent":"d662eae5-3c14-4f0b-8153-dcba45267e4b","fieldPos":178,"fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginEnd","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"let binding = AppCacheUsers.getBinding('items');\r\nlet filter = new sap.ui.model.Filter('username', 'Contains', this.getValue());\r\nbinding.filter([filter]);","translation":[]}]},{"fieldNo":"83beb2ac-f2b9-4f3e-9e2d-f3eb55261ae6","fieldName":"AppCacheUserScroll","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldPos":179,"fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"600px","script":"","translation":[]}]},{"fieldNo":"8d2710b0-6934-48ef-a056-d2c33b5becc7","fieldName":"AppCacheUsers","fieldParent":"83beb2ac-f2b9-4f3e-9e2d-f3eb55261ae6","fieldPos":180,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepAppCacheUser","script":"","translation":[]},{"attribute":"showNoData","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"rememberSelections","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"Delete","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"setEnableEncryption","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"let deleteItem = oEvent.getParameter('listItem');\nlet context = deleteItem.getBindingContext();\nlet data = context.getObject();\n\nModelData.Delete(AppCacheUsers, ['username', 'logonData/type'], [data.username, data.logonData.type]);\nsetCacheAppCacheUsers();\n\n// Remove iOS SAMKeychain library and Android SecureStorage key\nif (typeof window.cordova !== 'undefined' && !window.navigator.simulator && data.biometric) {\n    if (sap.ui.Device.os.ios || sap.ui.Device.os.android) {\n        // Set iOS SAMKeychain library and Android SecureStorage key\n        let servicekey = data.username.toString().toUpperCase();\n\n        // Delete SecureStorage key\n        if (typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureStorage) {\n            let ss = new cordova.plugins.SecureStorage(\n                function () {\n                    try {\n                        ss.remove(function (key) { }, function (error) { }, servicekey);\n                    } catch (error) { }\n                },\n                function (error) { },\n                AppCache.AppID);\n        }\n\n        // FingerprintAuth.delete\n        if (window.FingerprintAuth) {\n            try {\n                FingerprintAuth.delete({\n                    clientId: AppCache.AppID,\n                    username: servicekey\n                }, function (result) {\n\n                }, function (error) {\n\n                });\n            } catch (error) {\n\n            }\n        }\n    }\n}\n\ntoolUsersFilter.setValue();\ntoolUsersFilter.fireLiveChange();\nAppCache.calculateUserScreen();\n\n// No User -> Logon Screen\nif (!modelAppCacheUsers.oData.length) AppCache.setEnableLogonScreen();","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"984858e0-bca3-46b3-ec50-70479225716b","fieldName":"AppCache_itemUsers","fieldParent":"8d2710b0-6934-48ef-a056-d2c33b5becc7","fieldPos":181,"fieldType":"sap.m.ObjectListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"{username}","script":"","translation":[]},{"attribute":"numberState","grouping":"Properties","value":"Warning","script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"title","grouping":"Formatter","value":"Anonymous Function","script":"let user = ModelData.FindFirst(AppCacheUsers, 'username', username);\r\nreturn user && user.name ? user.name : username;\r\n","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const ctx = oEvent.oSource.getBindingContext();\nconst data = ctx.getObject();\n\nAppCache.userInfo = data;\n\n// PWA - Webauthn\nif (\n    AppCache.enablePwa && \n    AppCache.enablePasscode && \n    AppCache.userInfo.webauthid && \n    (window.PublicKeyCredential !== undefined || typeof window.PublicKeyCredential === 'function')\n) {\n    sap.n.Webauthn.login(AppCache.userInfo.webauthid)\n        .then(function (res) {\n            // check if response is an error\n            if (res instanceof Error) {\n                return;\n            }\n\n            if (res instanceof window.PublicKeyCredential) {\n                const {\n                    response: {\n                        authenticatorData: a, clientDataJSON: c, signature: s, userHandle: u\n                    }\n                } = res;\n\n                const clientData = JSON.parse(new TextDecoder('utf-8').decode(c));\n                if (clientData.type !== 'webauthn.get') return;\n                \n                NumPad.numValue = AppCache.userInfo.webauthid;\n                AppCache.Encrypted = '';\n                NumPad.Logon();\n                \n                AppCacheShellUser.setEnabled(true);\n                AppCache.setUserInfo();\n            }\n        });\n} else {\n    AppCache.setEnablePasscodeEntry();\n}\n\n// Unselect\nAppCacheUsers.removeSelections();\n","translation":[]}]},{"fieldNo":"7f0e8a0d-30eb-4844-ac7a-759767a21f13","fieldName":"AppCache_itemUsersDate","fieldParent":"984858e0-bca3-46b3-ec50-70479225716b","fieldPos":182,"fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Last Login","script":"","translation":[{"language":"DA","value":"Sidste login"},{"language":"FR","value":"Dernière connexion"},{"language":"DE","value":"Letzte Anmeldung"},{"language":"IT","value":"Ultimo accesso"},{"language":"NO","value":"Siste innlogging"},{"language":"PL","value":"Ostatnie logowanie"},{"language":"PT","value":"Último Login"},{"language":"ES","value":"Último acceso"},{"language":"SV","value":"Senaste inloggning"},{"language":"EN","value":"Last Login"}]},{"attribute":"text","grouping":"Properties","value":"{lastLogin}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}]},{"fieldNo":"4e86797e-22b4-4c98-e19d-87577dd311fe","fieldName":"AppCache_butNewUser","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldPos":183,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"150px","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Login New User","script":"","translation":[{"language":"ZH","value":"登录"},{"language":"DA","value":"Log på"},{"language":"NL","value":"Inloggen"},{"language":"FI","value":"Kirjaudu sisään"},{"language":"FR","value":"Se connecter"},{"language":"DE","value":"Einloggen"},{"language":"IT","value":"Accedere"},{"language":"JA","value":"ログオン"},{"language":"NO","value":"Logg på ny bruker"},{"language":"PL","value":"Zaloguj się Nowy użytkownik"},{"language":"PT","value":"Logon"},{"language":"ES","value":"Acceder"},{"language":"SV","value":"Logga in"},{"language":"EN","value":"Login new user"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepMobileButton","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}]},{"fieldNo":"2fb0a3bc-383c-43eb-d6cc-cef8b08b1376","fieldName":"panLinksUsers","fieldParent":"02c6f854-be53-41cc-de4c-3f9ca608f8bc","fieldPos":184,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldName":"toolLinksUsers","fieldParent":"2fb0a3bc-383c-43eb-d6cc-cef8b08b1376","fieldPos":185,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"f6b80cbb-be2a-45b7-81bc-98cfc6144269","fieldName":"linkUsersText1","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldPos":186,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}]},{"fieldNo":"fe3b1bed-288a-46fc-8756-e7720f8d1371","fieldName":"linkUsersSep1","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldPos":187,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"24f34d36-eb28-487f-a854-efde5b850e20","fieldName":"linkUsersText2","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldPos":188,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}]},{"fieldNo":"f7af062f-9f17-4b50-de33-0d4ac05de000","fieldName":"linkUsersSep2","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldPos":189,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"d130a684-0c07-4bef-cc49-2be434bd1e79","fieldName":"linkUsersText3","fieldParent":"3ee8d870-76d1-4497-9b00-a2c1f68b976d","fieldPos":190,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}]},{"fieldNo":"f8bafa5a-8fba-416c-dac9-51a2ab66476a","fieldName":"AppCache_boxPasscodeEntry","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":191,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"d4db8b5e-73bb-46d0-d783-da09e32af95e","fieldName":"AppCache_boxLogonPasscodeEntry","fieldParent":"f8bafa5a-8fba-416c-dac9-51a2ab66476a","fieldPos":192,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"75%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"921be91f-4a33-4d34-e83b-e527a479390f","fieldName":"boxNumpadPanel","fieldParent":"d4db8b5e-73bb-46d0-d783-da09e32af95e","fieldPos":193,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLogon nepPanLogonBorder","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"busyIndicatorDelay","grouping":"Properties","value":"0","script":"","translation":[]}]},{"fieldNo":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldName":"boxNumpadContent","fieldParent":"921be91f-4a33-4d34-e83b-e527a479390f","fieldPos":194,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}]},{"fieldNo":"782ca280-1795-4e59-9189-ee9b4942f910","fieldName":"boxShake","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldPos":195,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldName":"boxNumpad02","fieldParent":"782ca280-1795-4e59-9189-ee9b4942f910","fieldPos":196,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"dea428f3-199a-4707-dba3-9c055e1275a9","fieldName":"Passcode1","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":197,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"bc27ebbb-db6c-4794-f2cc-734f0f36deff","fieldName":"Passcode2","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":198,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"cac96322-e7ad-4ac1-9add-ac46aee3fff1","fieldName":"Passcode3","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":199,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"f9025729-ebf9-4347-d4a7-cb506222fe9c","fieldName":"Passcode4","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":200,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"b1512e90-7e83-4646-b4c7-ce91a25c65e9","fieldName":"Passcode5","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":201,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"21a85dab-50c0-4634-9576-bba37a4372da","fieldName":"Passcode6","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":202,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"4907e9f6-cac1-4f7f-c0f9-786f5b67cdcc","fieldName":"Passcode7","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":203,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"d3c5b92d-b35c-471e-ebd1-1deb3aac3821","fieldName":"Passcode8","fieldParent":"0428ae53-bc8c-4054-cc62-08edc229783d","fieldPos":204,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldName":"boxNumpad1","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldPos":205,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"294908a6-2378-453c-9977-805039febfeb","fieldName":"butNumpad1","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldPos":206,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"1","script":"","translation":[{"language":"PT","value":"1"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(1);","script":"NumPad.enterKey(1);","translation":[]}]},{"fieldNo":"15da0f42-4d34-4fb3-cb46-eb396b9c9806","fieldName":"butNumpad2","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldPos":207,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"2","script":"","translation":[{"language":"PT","value":"2"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(2);","script":"NumPad.enterKey(2);","translation":[]}]},{"fieldNo":"b06cba9a-513c-4b0c-e24c-f61266ab3d01","fieldName":"butNumpad3","fieldParent":"27729b01-d86b-4eb2-dfcd-35dd3de02044","fieldPos":208,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"3","script":"","translation":[{"language":"PT","value":"3"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(3);","script":"NumPad.enterKey(3);","translation":[]}]},{"fieldNo":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldName":"boxNumpad2","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldPos":209,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"98ceed64-92a9-4cfb-b2af-586e80e410dd","fieldName":"butNumpad4","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldPos":210,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"4","script":"","translation":[{"language":"PT","value":"4"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(4);","script":"NumPad.enterKey(4);","translation":[]}]},{"fieldNo":"351ed9b7-193e-4d3e-acf5-53d6c3f055f7","fieldName":"butNumpad5","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldPos":211,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"5","script":"","translation":[{"language":"PT","value":"5"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(5);","script":"NumPad.enterKey(5);","translation":[]}]},{"fieldNo":"094d36d6-c519-420d-ed41-faace1316db8","fieldName":"butNumpad6","fieldParent":"d95a4c78-c959-467e-837e-3ad0459e2fea","fieldPos":212,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"6","script":"","translation":[{"language":"PT","value":"6"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(6);","script":"NumPad.enterKey(6);","translation":[]}]},{"fieldNo":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldName":"boxNumpad3","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldPos":213,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"64db5d61-2467-4856-c01f-935e6b55fda5","fieldName":"butNumpad7","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldPos":214,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"7","script":"","translation":[{"language":"PT","value":"7"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(7);","script":"NumPad.enterKey(7);","translation":[]}]},{"fieldNo":"d9d5c7a5-b159-4a17-f9f5-95b0bfb98d54","fieldName":"butNumpad8","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldPos":215,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"8","script":"","translation":[{"language":"PT","value":"8"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(8);","script":"NumPad.enterKey(8);","translation":[]}]},{"fieldNo":"d1b6929e-34d4-419a-983b-a1a2de5ce044","fieldName":"butNumpad9","fieldParent":"22e7f3d1-4284-4740-e9cb-f6d696ec4529","fieldPos":216,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"9","script":"","translation":[{"language":"PT","value":"9"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(9);","script":"NumPad.enterKey(9);","translation":[]}]},{"fieldNo":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldName":"boxNumpad4","fieldParent":"bab30c5b-dcee-43af-d794-0c321e28d9f0","fieldPos":217,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"88918eba-86d6-457a-a6b3-c906c45bf16b","fieldName":"butNumpadClear","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldPos":218,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"\n// Remove CSS animation class\nboxShake.removeStyleClass(\"animated shake\");\n\n// Clear numpad\nNumPad.Clear();","translation":[]}]},{"fieldNo":"9f27b6e9-31c7-4bf2-a627-3b2567e13179","fieldName":"butNumpad0","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldPos":219,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"0","script":"","translation":[{"language":"PT","value":"0"}]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"NumPad.enterKey(0);","script":"NumPad.enterKey(0);","translation":[]}]},{"fieldNo":"ad1088a5-357d-4cce-8b87-6c917c8bf742","fieldName":"butNumpadLogin","fieldParent":"9782082a-dfb8-4781-9634-ee02b52c8e88","fieldPos":220,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"numPad","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://accept","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// Check biometricAuthentication\nif (AppCache.biometricAuthentication) {\n    \n    // Remove CSS animation class\n    boxShake.removeStyleClass(\"animated shake\");\n\n    // Clear numpad\n    NumPad.Clear();\n\n    if (sap.ui.Device.os.ios && typeof CID !== \"undefined\") sap.n.Fingerprint.ios.checkSupport();\n    if (sap.ui.Device.os.android) FingerprintAuth.isAvailable(sap.n.Fingerprint.android.onSupported, sap.n.Fingerprint.android.notSupported);\n\n} else {\n    NumPad.Logon();\n}","translation":[]}]},{"fieldNo":"b1ac49b6-07ef-44b1-9991-c0ba09fe86cf","fieldName":"panLinksPin","fieldParent":"921be91f-4a33-4d34-e83b-e527a479390f","fieldPos":221,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginTop","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPanLinks","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldName":"toolLinksPin","fieldParent":"b1ac49b6-07ef-44b1-9991-c0ba09fe86cf","fieldPos":222,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLinkNoBorder","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"bd534c38-d020-45f4-d10c-69cfd054ed8b","fieldName":"linkPinText1","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldPos":223,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin1);","translation":[]}]},{"fieldNo":"18d6dcb0-efe3-4412-a5a6-8a15ac76a398","fieldName":"linkPinSep1","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldPos":224,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"b917ff6c-e05a-48e6-da10-571bffcb8963","fieldName":"linkPinText2","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldPos":225,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin2);","translation":[]}]},{"fieldNo":"7498392d-f659-4043-b1d9-35cc2abc8109","fieldName":"linkPinSep2","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldPos":226,"fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"6330f111-5c22-4484-d972-beb21b6617ae","fieldName":"linkPinText3","fieldParent":"6ce673e6-cf20-4767-ef22-fa7e87c6c255","fieldPos":227,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","script":"setTextAndOpenDialogText(this.getText(), modelDataSettings.oData.customizing[0].txtLogin3);","translation":[]}]},{"fieldNo":"a9a7c06e-5aaa-438d-8a55-da4733f656a9","fieldName":"AppCache_boxURL","fieldParent":"d6027101-d2e8-4829-db73-7f2b38519a3b","fieldPos":228,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"80f0a0d8-e348-45cf-e90a-b6c03622d45a","fieldName":"AppCacheAppURL","fieldParent":"a9a7c06e-5aaa-438d-8a55-da4733f656a9","fieldPos":229,"fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"d62a8966-83a0-4229-c0f6-95ac749b7ad8","fieldName":"AppCachePageURL","fieldParent":"80f0a0d8-e348-45cf-e90a-b6c03622d45a","fieldPos":230,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"d7585a48-7f17-43b1-fb4d-2c23c6850309","fieldName":"AppCache_urlHTML","fieldParent":"d62a8966-83a0-4229-c0f6-95ac749b7ad8","fieldPos":231,"fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"content","grouping":"Properties","value":"<div id='AppCache_URLDiv' style='height:100%;width:100%;'></div>","script":"","translation":[]}]},{"fieldNo":"59aa0ea7-6f09-43e9-e685-d4bb442f584e","fieldName":"launchpadContentSideApp","fieldParent":"36db12ae-3e47-458d-fdbd-f4d20dabd690","fieldPos":232,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"0px","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadContentSideApp","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"ca5adc62-9227-4ff5-ae6f-cefba7d455d5","fieldName":"AppCachePageSideApp","fieldParent":"59aa0ea7-6f09-43e9-e685-d4bb442f584e","fieldPos":233,"fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDocPage","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}]},{"fieldNo":"35b2eee0-70e7-4d46-8e82-bffeac446974","fieldName":"AppCachePageSideTab","fieldParent":"ca5adc62-9227-4ff5-ae6f-cefba7d455d5","fieldPos":234,"fieldType":"sap.m.TabContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"sapUiNoContentPadding ","script":"","translation":[]},{"attribute":"itemClose","grouping":"Events","value":"Anonymous Function","script":"// Destroy Content\nlet tab = oEvent.mParameters.item;\nlet tabKey = tab.getKey();\nlet view = tab.getContent()[0];\n\n// onClose event\nif (sap.n.Shell.sidepanelCloseEvents[tabKey]) sap.n.Shell.sidepanelCloseEvents[tabKey]();\n\n// Destroy View\nif (view) {\n    view.removeAllContent();\n    view.destroy();\n    sap.n.Shell.clearObjects(view.sId);\n}\n\n// Hide sidepanel\nsetTimeout(function () {\n    if (AppCachePageSideTab.getItems().length === 0) {\n        sap.n.Launchpad.sidepanelClose();\n        AppCacheUserActionSidepanel.setVisible(false);\n\n        // Mark Open From \n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.actionApplication) {\n            delete sap.n.Shell.openSidePanelApps[sap.n.Launchpad.currentTile.actionApplication]\n        }\n    }\n}, 200);","translation":[]}]},{"fieldNo":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldName":"launchpadOverflowContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldPos":235,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadOverflowContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"0c6496fd-753c-44a9-9222-3396b9ae4672","fieldName":"launchpadOverflow","fieldParent":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldPos":236,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadMenuOverflow","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}]},{"fieldNo":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldName":"launchpadOverflowHeader","fieldParent":"0c6496fd-753c-44a9-9222-3396b9ae4672","fieldPos":237,"fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"3rem","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"990290f1-4b43-441e-bd5d-93887a206864","fieldName":"launchpadOverflowHeaderToolbar","fieldParent":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldPos":238,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"c24629aa-04ec-4fb9-e651-818d4c00e703","fieldName":"launchpadOverflowHeaderHBox","fieldParent":"32003514-86ef-4a1d-b68b-d8f2481b7954","fieldPos":239,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}]},{"fieldNo":"8e0d0a33-1cc7-4eb8-89a3-a53c3ce7de05","fieldName":"launchpadOverflowHeaderVBox","fieldParent":"c24629aa-04ec-4fb9-e651-818d4c00e703","fieldPos":240,"fieldType":"sap.m.VBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}]},{"fieldNo":"79915338-3251-4035-babe-3cfffa1128ca","fieldName":"launchpadOverflowBtn","fieldParent":"8e0d0a33-1cc7-4eb8-89a3-a53c3ce7de05","fieldPos":241,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Menu","script":"","translation":[{"language":"1","value":"菜单"},{"language":"A","value":"قائمة طعام"},{"language":"D","value":"Speisekarte"},{"language":"F","value":"Menu"},{"language":"H","value":"Menü"},{"language":"K","value":"Menu"},{"language":"O","value":"Meny"},{"language":"P","value":"Cardápio"},{"language":"R","value":"Меню"},{"language":"S","value":"Menú"},{"language":"W","value":"Меню"},{"language":"PL","value":"Menu"},{"language":"EN","value":"Menu"}]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://grid","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"//\nsap.n.Launchpad.overflowMenuClose();\n","translation":[]}]},{"fieldNo":"444e1f03-7e94-400d-ac97-1bdb24215aa8","fieldName":"launchpadOverflowClickArea","fieldParent":"cc86028b-1464-4fb3-fb5f-da4955be560d","fieldPos":242,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadOverflowClickArea","script":"","translation":[]}]},{"fieldNo":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldName":"launchpadSettingsContainer","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldPos":243,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadSettingsContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldName":"launchpadSettings","fieldParent":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldPos":244,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadMenuSettings","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Div","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"fitContainer","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}]},{"fieldNo":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldName":"launchpadSettingsHeader","fieldParent":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldPos":245,"fieldType":"sap.m.Panel","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenu","script":"","translation":[]},{"attribute":"expandAnimation","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"06a99375-ddb9-4a17-e19d-f324111ccd8b","fieldName":"launchpadSettingsHeaderToolbar","fieldParent":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldPos":246,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldName":"launchpadSettingsHeaderHBox","fieldParent":"b33d806b-a41c-4b0e-99c2-e3dc047ebe55","fieldPos":247,"fieldType":"sap.m.HBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepTopMenuContent","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"abe8971f-5750-4464-bb19-7998b47d42ea","fieldName":"AppCacheUserActionText","fieldParent":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldPos":248,"fieldType":"sap.m.Text","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"wrapping","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserActionText","script":"","translation":[]}]},{"fieldNo":"6fe182ac-c634-42cf-f0df-149176ca3d59","fieldName":"launchpadSettingsBtn","fieldParent":"6344cc83-4d79-4be0-faed-504a9573d7ef","fieldPos":249,"fieldType":"sap.m.Button","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"User Menu","script":"","translation":[{"language":"1","value":"用户菜单"},{"language":"A","value":"قائمة المستخدم"},{"language":"D","value":"Benutzermenü"},{"language":"F","value":"Menu utilisateur"},{"language":"H","value":"felhasználói menü"},{"language":"K","value":"Brugermenu"},{"language":"O","value":"Brukermeny"},{"language":"P","value":"menu do usuário"},{"language":"R","value":"Меню пользователя"},{"language":"S","value":"Menú del Usuario"},{"language":"W","value":"Меню на потребителя"},{"language":"PL","value":"Menu użytkownika"},{"language":"EN","value":"User Menu"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepUserButton","script":"","translation":[]},{"attribute":"iconFirst","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"iconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"//\nsap.n.Launchpad.settingsMenuClose();\n","translation":[]}]},{"fieldNo":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldName":"AppCacheListMenu","fieldParent":"75b4ea7b-8c37-499b-93f7-b6baf913b0a4","fieldPos":250,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepListMenu","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"showNoData","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}]},{"fieldNo":"8acff095-a179-49ef-c49b-d0cedecfcce2","fieldName":"AppCacheUserActionSettings","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":251,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Settings","script":"","translation":[{"language":"ZH","value":"设置"},{"language":"DA","value":"Indstillinger"},{"language":"NL","value":"instellingen"},{"language":"FI","value":"asetukset"},{"language":"FR","value":"Réglages"},{"language":"DE","value":"Einstellungen"},{"language":"IT","value":"impostazioni"},{"language":"JA","value":"設定"},{"language":"NO","value":"Innstillinger"},{"language":"PL","value":"Ustawienia"},{"language":"PT","value":"Definições"},{"language":"ES","value":"Ajustes"},{"language":"SV","value":"inställningar"},{"language":"EN","value":"Settings"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://settings","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// Build Version Info - General\nlet arrInfo = new Array();\nlet rec = {};\nrec.key = 'UI5 Version';\nrec.value = sap.ui.version;\narrInfo.push(rec);\n\n// Build Version Info - Phone\nif (typeof device !== 'undefined') {\n    rec = {};\n    rec.key = AppCache_tPhoneType.getText();\n    rec.value = device.platform;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tPhoneVersion.getText();\n    rec.value = device.version;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tPhoneModel.getText();\n    rec.value = device.model;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tCordovaVersion.getText();\n    rec.value = device.cordova;\n    arrInfo.push(rec);\n\n    rec = {};\n    rec.key = AppCache_tAppVersion.getText();\n    rec.value = AppCache.AppVersion;\n    arrInfo.push(rec);\n}\n\nAppCacheSettingsUser.setTitle(AppCache.userInfo.name);\nAppCacheSettingsUser.setIntro(AppCache.userInfo.username);\nmodelAppCacheTabVer.setData(arrInfo);\nAppCacheDiaSettings.open();\nmodelAppCacheData.refresh();","translation":[]}]},{"fieldNo":"00815957-de6a-425a-a5ee-8eada95a10e1","fieldName":"AppCacheUserActionEditScreen","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":252,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Edit Screen","script":"","translation":[{"language":"ZH","value":"编辑屏幕"},{"language":"ZF","value":"編輯屏幕"},{"language":"DA","value":"Rediger skærm"},{"language":"NL","value":"Scherm bewerken"},{"language":"FI","value":"Muokkaa näyttöä"},{"language":"FR","value":"Écran d'édition"},{"language":"DE","value":"Bildschirm bearbeiten"},{"language":"IT","value":"Schermata Modifica"},{"language":"JA","value":"編集画面"},{"language":"NO","value":"Rediger skjerm"},{"language":"PL","value":"Edytuj ekran"},{"language":"PT","value":"Tela de edição"},{"language":"SR","value":"Екран за уређивање"},{"language":"ES","value":"Editar pantalla"},{"language":"SV","value":"Redigera skärm"},{"language":"EN","value":"Edit Screen"},{"language":"AR","value":"تحرير الشاشة"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://customize","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Customization.setActivation(true);\nsap.n.Launchpad.settingsMenuClose();","translation":[]}]},{"fieldNo":"b4020d10-847d-4f76-a79d-c18480cd1261","fieldName":"AppCacheUserActionPassword","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":253,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Change password","script":"","translation":[{"language":"ZH","value":"侧面板"},{"language":"DA","value":"Sidepanel"},{"language":"NL","value":"Zijpaneel"},{"language":"FI","value":"Sivupaneeli"},{"language":"FR","value":"Panneau latéral"},{"language":"DE","value":"Passwort ändern"},{"language":"IT","value":"Pannello laterale"},{"language":"JA","value":"サイドパネル"},{"language":"NO","value":"Bytt passord"},{"language":"PL","value":"Zmień hasło"},{"language":"PT","value":"Painel lateral"},{"language":"ES","value":"Panel lateral"},{"language":"SV","value":"Sidopanel"},{"language":"EN","value":"Change password"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/shield-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaSetPassword.open();","script":"diaSetPassword.open();","translation":[]}]},{"fieldNo":"1d29d4f8-c28e-4a27-e74f-560570a3e1d7","fieldName":"AppCacheUserActionSidepanel","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":254,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Sidepanel","script":"","translation":[{"language":"ZH","value":"侧面板"},{"language":"DA","value":"Sidepanel"},{"language":"NL","value":"Zijpaneel"},{"language":"FI","value":"Sivupaneeli"},{"language":"FR","value":"Panneau latéral"},{"language":"DE","value":"Sidepanel"},{"language":"IT","value":"Pannello laterale"},{"language":"JA","value":"サイドパネル"},{"language":"NO","value":"Sidepanel"},{"language":"PL","value":"Panel boczny"},{"language":"PT","value":"Painel lateral"},{"language":"ES","value":"Panel lateral"},{"language":"SV","value":"Sidopanel"},{"language":"EN","value":"Sidepanel"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://navigation-right-arrow","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\n\nif (launchpadContentSideApp.getWidth() === \"0px\") {\n    sap.n.Launchpad.sidepanelOpen();\n} else {\n    sap.n.Launchpad.sidepanelClose();\n}\n","translation":[]}]},{"fieldNo":"82bc0a64-c586-48c2-9875-ef7abff16dff","fieldName":"AppCacheUserActionLock","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":255,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Lock","script":"","translation":[{"language":"ZH","value":"锁"},{"language":"DA","value":"Låse"},{"language":"NL","value":"Slot"},{"language":"FI","value":"Lukko"},{"language":"FR","value":"Fermer à clé"},{"language":"DE","value":"Sperren"},{"language":"IT","value":"Serratura"},{"language":"JA","value":"ロック"},{"language":"NO","value":"Låse"},{"language":"PL","value":"Zamek"},{"language":"PT","value":"Bloqueio"},{"language":"ES","value":"Bloquear"},{"language":"SV","value":"Låsa"},{"language":"EN","value":"Lock"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://locked","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Lock();","translation":[]}]},{"fieldNo":"d418ca23-35e9-45ab-b80d-40b111280a4d","fieldName":"AppCacheUserActionSwitch","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":256,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Switch User","script":"","translation":[{"language":"ZH","value":"切换用户"},{"language":"DA","value":"Skift bruger"},{"language":"NL","value":"Verander gebruiker"},{"language":"FI","value":"Vaihda käyttäjää"},{"language":"FR","value":"Changer d'utilisateur"},{"language":"DE","value":"Benutzer wechseln"},{"language":"IT","value":"Cambia utente"},{"language":"JA","value":"ユーザーを切り替える"},{"language":"NO","value":"Låse"},{"language":"PL","value":"Zmień użytkownika"},{"language":"PT","value":"Mudar de utilizador"},{"language":"ES","value":"Cambiar de usuario"},{"language":"SV","value":"Byt användare"},{"language":"EN","value":"Switch User"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/users","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Lock();","translation":[]}]},{"fieldNo":"c570e45a-f7bf-4886-d227-b8c295633e9e","fieldName":"AppCacheUserActionLogin","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":257,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Login new user","script":"","translation":[{"language":"ZH","value":"登出"},{"language":"DA","value":"Log ud"},{"language":"NL","value":"Uitloggen"},{"language":"FI","value":"Kirjautua ulos"},{"language":"FR","value":"Connectez - Out"},{"language":"DE","value":"Ausloggen"},{"language":"IT","value":"Disconnettersi"},{"language":"JA","value":"ログアウト"},{"language":"NO","value":"Logg ut"},{"language":"PL","value":"Zaloguj nowego użytkownika"},{"language":"PT","value":"Sair"},{"language":"ES","value":"Cerrar sesión"},{"language":"SV","value":"Logga ut"},{"language":"EN","value":"Login new user"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}]},{"fieldNo":"f3d1903e-4cb4-4896-b094-fdfee6d1b335","fieldName":"AppCacheUserActionLogoff","fieldParent":"b8737006-c98d-42a6-d22a-4cc385959ab5","fieldPos":258,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Logout","script":"","translation":[{"language":"ZH","value":"登出"},{"language":"DA","value":"Log ud"},{"language":"NL","value":"Uitloggen"},{"language":"FI","value":"Kirjautua ulos"},{"language":"FR","value":"Connectez - Out"},{"language":"DE","value":"Ausloggen"},{"language":"IT","value":"Disconnettersi"},{"language":"JA","value":"ログアウト"},{"language":"NO","value":"Logg ut"},{"language":"PL","value":"Wyloguj"},{"language":"PT","value":"Sair"},{"language":"ES","value":"Cerrar sesión"},{"language":"SV","value":"Logga ut"},{"language":"EN","value":"Logout"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://log","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.n.Launchpad.settingsMenuClose();\nAppCache.Logout();","translation":[]}]},{"fieldNo":"816a3385-dec7-4785-c8a7-a028d4cdd528","fieldName":"launchpadSettingsClickArea","fieldParent":"5e39af87-c5fd-4588-8dfe-ad976c2df52e","fieldPos":259,"fieldType":"sap.m.FlexBox","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepLaunchpadSettingsClickArea","script":"","translation":[]}]},{"fieldNo":"c366cc16-e63d-43c4-c10b-8d12518d17f6","fieldName":"oHTMLObject","fieldParent":"63351f31-547d-43db-8b6a-898b9977f552","fieldPos":260,"fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"afterRendering","grouping":"Events","value":"Anonymous Function","script":"// Apply Standard Theme for Mobile\nif (AppCache.isMobile && AppCache.layout) sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n","translation":[]}]},{"fieldNo":"5a4295ae-26cb-4b0a-be40-415a8a2d90d7","fieldName":"oHTML","fieldParent":"c366cc16-e63d-43c4-c10b-8d12518d17f6","fieldPos":261,"fieldType":"neptune.Html","script":"<div id=\"NeptuneStyleDiv\"></div>\n<iframe id=\"azureSignout\" src=\"\" width=\"0\" height=\"0\" tabindex=\"-1\" border=\"0\" style=\"display:none\"></iframe>\n<div id='NeptuneStyleDivDynamic'></div>\n\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldName":"Popup","fieldParent":99999,"fieldPos":262,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"45b47f08-c1d4-4d26-cd52-61d577e323fb","fieldName":"AppCacheCardTemplate","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":263,"fieldType":"sap.f.Card","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"8d55381d-a565-4eab-bc21-2a99807348cb","fieldName":"popResizeTile","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":264,"fieldType":"sap.m.Popover","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[]},{"fieldNo":"383e3420-3578-408e-a79e-0ee7e5ab85e2","fieldName":"resizeTileForm","fieldParent":"8d55381d-a565-4eab-bc21-2a99807348cb","fieldPos":265,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"bec224b6-ad14-4755-ff06-dd92a1b77aa6","fieldName":"lblResizeTileWidth","fieldParent":"383e3420-3578-408e-a79e-0ee7e5ab85e2","fieldPos":266,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Width","script":"","translation":[]}]},{"fieldNo":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldName":"selResizeTileWidth","fieldParent":"383e3420-3578-408e-a79e-0ee7e5ab85e2","fieldPos":267,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"selectedKey","grouping":"Properties","value":"{/tile/cardWidth}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"sap.n.Customization.onCardResize();","script":"sap.n.Customization.onCardResize();","translation":[]}]},{"fieldNo":"813e8d2b-366c-4dd8-949b-8a7b8257fd92","fieldName":"resizeTileWidthDefault","fieldParent":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldPos":268,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Default (1x)","script":"","translation":[{"language":"PL","value":"Domyślnie (1x)"}]}]},{"fieldNo":"a7af5ef8-31bf-4569-bcba-96a8bbc60d85","fieldName":"resizeTileWidthMedium","fieldParent":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldPos":269,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Medium (2x)","script":"","translation":[{"language":"PL","value":"Średni (2x)"}]},{"attribute":"key","grouping":"Properties","value":"Medium","script":"","translation":[]}]},{"fieldNo":"d64ab5a5-b445-4e04-cca8-af73e3ff8c5e","fieldName":"resizeTileWidthWide","fieldParent":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldPos":270,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wide (3x)","script":"","translation":[{"language":"PL","value":"Szeroki (3x)"}]},{"attribute":"key","grouping":"Properties","value":"Wide","script":"","translation":[]}]},{"fieldNo":"3cd5e5c1-b705-494f-b59e-8c1db0aca256","fieldName":"resizeTileWidthWider","fieldParent":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldPos":271,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wider (4x)","script":"","translation":[{"language":"PL","value":"Szersze (4x)"}]},{"attribute":"key","grouping":"Properties","value":"Wider","script":"","translation":[]}]},{"fieldNo":"081f30c6-40c7-4d88-e998-e8ac74dbf2db","fieldName":"resizeTileWidthMax","fieldParent":"13ae2e41-8785-4618-a9dc-57b16469bed9","fieldPos":272,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Maxiumum (Full width)","script":"","translation":[{"language":"PL","value":"Maxiumum (pełna szerokość)"}]},{"attribute":"key","grouping":"Properties","value":"Max","script":"","translation":[]}]},{"fieldNo":"c10f1e25-c3fc-49ec-aa8a-a2fedbe5b5af","fieldName":"lblResizeTileHeight","fieldParent":"383e3420-3578-408e-a79e-0ee7e5ab85e2","fieldPos":273,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Height","script":"","translation":[]}]},{"fieldNo":"6049a035-f057-460a-cbf6-e943f488d65f","fieldName":"selResizeTileHeight","fieldParent":"383e3420-3578-408e-a79e-0ee7e5ab85e2","fieldPos":274,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"selectedKey","grouping":"Properties","value":"{/tile/cardHeight}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"sap.n.Customization.onCardResize();","script":"sap.n.Customization.onCardResize();","translation":[]}]},{"fieldNo":"f5d6a88d-f445-43a0-f42c-d39fa8aa6f20","fieldName":"resizeTileHeightDefault","fieldParent":"6049a035-f057-460a-cbf6-e943f488d65f","fieldPos":275,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Default (1x)","script":"","translation":[{"language":"PL","value":"Domyślnie (1x)"}]}]},{"fieldNo":"b8040da0-8b7e-40f6-e68d-cbb1fc6ae4c2","fieldName":"resizeTileHeightTall","fieldParent":"6049a035-f057-460a-cbf6-e943f488d65f","fieldPos":276,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Tall (2x)","script":"","translation":[{"language":"PL","value":"Wysoki (2x)"}]},{"attribute":"key","grouping":"Properties","value":"Tall","script":"","translation":[]}]},{"fieldNo":"40450159-9a93-4c56-b361-b33cd7e80545","fieldName":"resizeTileHeightTower","fieldParent":"6049a035-f057-460a-cbf6-e943f488d65f","fieldPos":277,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Tower (3x)","script":"","translation":[{"language":"PL","value":"Wieża (3x)"}]},{"attribute":"key","grouping":"Properties","value":"Tower","script":"","translation":[]}]},{"fieldNo":"43f9add3-54ce-4127-a632-1e2b2ce23f8d","fieldName":"resizeTileHeightSkyscraper","fieldParent":"6049a035-f057-460a-cbf6-e943f488d65f","fieldPos":278,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Skyscraper (4x)","script":"","translation":[{"language":"PL","value":"Wieżowiec (4x)"}]},{"attribute":"key","grouping":"Properties","value":"Skyscraper","script":"","translation":[]}]},{"fieldNo":"0e5b9d18-8a5b-4aff-9d85-d1edc4027c05","fieldName":"AppCacheUserDialog","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":279,"fieldType":"sap.m.ActionSheet","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"neptunePop","script":"","translation":[]}]},{"fieldNo":"fcf46f49-9cd5-4810-9d09-4163e0a4115a","fieldName":"AppCacheUserDialogCloseAll","fieldParent":"0e5b9d18-8a5b-4aff-9d85-d1edc4027c05","fieldPos":280,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Close All","script":"","translation":[{"language":"ZH","value":"关闭所有"},{"language":"DA","value":"Luk alle"},{"language":"NL","value":"Sluit alles"},{"language":"FI","value":"Sulje kaikki"},{"language":"FR","value":"Ferme tout"},{"language":"DE","value":"Alle schließen"},{"language":"IT","value":"Chiudi tutto"},{"language":"JA","value":"すべて閉じる"},{"language":"NO","value":"Lukk alle"},{"language":"PL","value":"Zamknij wszystko"},{"language":"PT","value":"Fechar tudo"},{"language":"ES","value":"Cierra todo"},{"language":"SV","value":"Stäng alla"},{"language":"EN","value":"Close All"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-cancel","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"\n// Close Buttons\nAppCacheUserDialog.getButtons().forEach(function (data) {\n    if (data.getId() !== \"AppCacheUserDialogCloseAll\") {\n        data.destroy();\n    }\n});\n\n// Close Dialogs\nAppCache.Dialogs.forEach(function (data) {\n    let dia = sap.ui.getCore().byId(data);\n    if (dia) dia.close();\n});\n\nAppCacheShellDialog.setVisible(false);\nAppCache.Dialogs = [];\nAppCacheUserDialog.close();","translation":[]}]},{"fieldNo":"5a6551a3-417a-40f4-a295-ed41b6d25858","fieldName":"AppCache_diaDownload","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":281,"fieldType":"sap.m.BusyDialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Please wait","script":"","translation":[{"language":"1","value":"取消"},{"language":"D","value":"Abbrechen"},{"language":"F","value":"Annuler"},{"language":"K","value":"Afbryd"},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"R","value":"Пожалуйста подождите"},{"language":"S","value":"Abortar"},{"language":"W","value":"Моля Изчакайте"},{"language":"DA","value":"Vent venligst"},{"language":"FR","value":"S'il vous plaît, attendez"},{"language":"DE","value":"Warten Sie mal"},{"language":"IT","value":"attendere prego"},{"language":"NO","value":"Vennligst vent"},{"language":"PL","value":"Proszę czekać"},{"language":"PT","value":"Por favor, espere"},{"language":"ES","value":"por favor espera"},{"language":"SV","value":"Vänta"},{"language":"EN","value":"Please wait"}]},{"attribute":"text","grouping":"Properties","value":"Downloading new version...","script":"","translation":[{"language":"1","value":"取消"},{"language":"D","value":"Abbrechen"},{"language":"F","value":"Annuler"},{"language":"K","value":"Afbryd"},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"R","value":"Загрузка новой версии…"},{"language":"S","value":"Abortar"},{"language":"W","value":"Новата версия се изтегля ..."},{"language":"DA","value":"Downloader ny version ..."},{"language":"FR","value":"Téléchargement de la nouvelle version ..."},{"language":"DE","value":"Neue Version herunterladen ..."},{"language":"IT","value":"Download della nuova versione ..."},{"language":"NO","value":"Laster ned ny versjon ..."},{"language":"PL","value":"Pobieranie nowej wersji ..."},{"language":"PT","value":"Fazendo o download da nova versão ..."},{"language":"ES","value":"Descargando nueva versión ..."},{"language":"SV","value":"Hämtar ny version ..."},{"language":"EN","value":"Downloading new version..."}]},{"attribute":"showCancelButton","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"customIconDensityAware","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"cancelButtonText","grouping":"Properties","value":"Cancel","script":"","translation":[{"language":"1","value":"取消"},{"language":"D","value":"Abbrechen"},{"language":"F","value":"Annuler"},{"language":"K","value":"Afbryd"},{"language":"O","value":"Avbryt"},{"language":"P","value":"Cancelar"},{"language":"R","value":"Отменить"},{"language":"S","value":"Abortar"},{"language":"W","value":"Откажи"}]},{"attribute":"close","grouping":"Events","value":"AppCache.downloadXhr.abort();","script":"AppCache.downloadXhr.abort();","translation":[]}]},{"fieldNo":"f4fef048-0990-4dd0-ee55-3dde54181acf","fieldName":"busyDialogStartup","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":282,"fieldType":"sap.m.BusyDialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Please wait","script":"","translation":[{"language":"ZH","value":"请耐心等待"},{"language":"DA","value":"Vent venligst"},{"language":"NL","value":"Even geduld aub"},{"language":"FI","value":"Odota"},{"language":"FR","value":"S'il vous plaît, attendez"},{"language":"DE","value":"Bitte warten"},{"language":"IT","value":"attendere prego"},{"language":"JA","value":"お待ちください"},{"language":"NO","value":"Vennligst vent"},{"language":"PL","value":"Proszę czekać"},{"language":"PT","value":"Por favor, espere"},{"language":"ES","value":"por favor espera"},{"language":"SV","value":"Vänta"},{"language":"EN","value":"Please wait"}]},{"attribute":"text","grouping":"Properties","value":"Loading tiles for the first time","script":"","translation":[{"language":"ZH","value":"第一次装载瓷砖"},{"language":"DA","value":"Indlæser fliser for første gang"},{"language":"NL","value":"Tegels voor de eerste keer laden"},{"language":"FI","value":"Laattojen lataaminen ensimmäistä kertaa"},{"language":"FR","value":"Chargement des carreaux pour la première fois"},{"language":"DE","value":"Initiales Laden der Kacheln "},{"language":"IT","value":"Caricamento delle tessere per la prima volta"},{"language":"JA","value":"初めてタイルをロードする"},{"language":"NO","value":"Laster fliser for første gang"},{"language":"PL","value":"Ładowanie płytek po raz pierwszy"},{"language":"PT","value":"Carregando Tiles pela primeira vez"},{"language":"ES","value":"Cargando azulejos por primera vez."},{"language":"SV","value":"Laddar kakel för första gången"},{"language":"EN","value":"Loading tiles for the first time"}]},{"attribute":"showCancelButton","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"02f9e36d-6c59-4b0d-d091-431845b4ac85","fieldName":"popSupportedBrowsers","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":283,"fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Compatible On","script":"","translation":[{"language":"ZH","value":"兼容"},{"language":"DA","value":"Kompatibel På"},{"language":"NL","value":"Compatibel op"},{"language":"FI","value":"Yhteensopiva päällä"},{"language":"FR","value":"Compatible sur"},{"language":"DE","value":"Kompatibel an"},{"language":"IT","value":"Compatibile"},{"language":"JA","value":"互換性あり"},{"language":"NO","value":"Kompatibel På"},{"language":"PL","value":"Zgodność włączona"},{"language":"PT","value":"Compatível em"},{"language":"ES","value":"Compatible en"},{"language":"SV","value":"Kompatibel På"},{"language":"EN","value":"Compatible On"}]},{"attribute":"contentWidth","grouping":"Properties","value":"180px","script":"","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"butSupportedBrowsersClose","script":"","translation":[]}]},{"fieldNo":"ce74f358-1437-4b55-f776-b977e8e49332","fieldName":"listSupportedBrowsers","fieldParent":"02f9e36d-6c59-4b0d-d091-431845b4ac85","fieldPos":284,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[]},{"fieldNo":"21647170-1598-45d9-87d0-ff60c5a66ba5","fieldName":"itemSupportedBrowsers","fieldParent":"ce74f358-1437-4b55-f776-b977e8e49332","fieldPos":285,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{name}","script":"","translation":[]}]},{"fieldNo":"a0b99188-573e-4f4a-b863-ef6a033a2f14","fieldName":"popNavBar","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":286,"fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepPopCards","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showArrow","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"offsetX","grouping":"Properties","value":"-56","script":"","translation":[]}]},{"fieldNo":"45d7de06-550b-452f-87db-a856c7b42f7d","fieldName":"blockPopover","fieldParent":"a0b99188-573e-4f4a-b863-ef6a033a2f14","fieldPos":287,"fieldType":"sap.ui.layout.BlockLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"background","grouping":"Properties","value":"Default","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"keepFontSize","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"c484027e-c069-4576-d40d-6b976fc5c8c0","fieldName":"blockPopoverRow","fieldParent":"45d7de06-550b-452f-87db-a856c7b42f7d","fieldPos":288,"fieldType":"sap.ui.layout.BlockLayoutRow","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"f4aaa6e7-327a-4600-bffc-b6c705bfa826","fieldName":"popBlackout","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":289,"fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"placement","grouping":"Properties","value":"PreferredBottomOrFlip","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"600px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"400px","script":"","translation":[]}]},{"fieldNo":"217961dd-d0a8-4eb8-e0fa-9fd8f34e85d7","fieldName":"scrollBlackout","fieldParent":"f4aaa6e7-327a-4600-bffc-b6c705bfa826","fieldPos":290,"fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"1965721f-736a-4721-d016-77c0ebd213a6","fieldName":"descBlackout","fieldParent":"217961dd-d0a8-4eb8-e0fa-9fd8f34e85d7","fieldPos":291,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"9c4082a6-5e9c-4038-a65d-4890eea98611","fieldName":"popCustomizationTiles","fieldParent":"6cc710c1-161b-453f-bd50-b935559ffbe6","fieldPos":292,"fieldType":"sap.m.Popover","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomePopover","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"placement","grouping":"Properties","value":"Auto","script":"","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"sap.n.Customization.Popover.context = null;","script":"sap.n.Customization.Popover.context = null;","translation":[]}]},{"fieldNo":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldName":"pctList","fieldParent":"9c4082a6-5e9c-4038-a65d-4890eea98611","fieldPos":293,"fieldType":"sap.m.List","description":"pct = popover customization tiles","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeList","script":"","translation":[]},{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]}]},{"fieldNo":"ad3f09b7-41c3-4f81-bb18-989a02e81fa2","fieldName":"pctEditPage","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":294,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onEditPage();","script":"sap.n.Customization.Popover.onEditPage();","translation":[]}]},{"fieldNo":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldName":"pctHBox3","fieldParent":"ad3f09b7-41c3-4f81-bb18-989a02e81fa2","fieldPos":295,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"41d7bf14-8aae-48e6-ba57-94474f33fcf3","fieldName":"pctHBoxLeft3","fieldParent":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldPos":296,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"1d652a08-9608-4d19-d252-ab4364248aa7","fieldName":"popCustomizationTilesHBoxTitle3","fieldParent":"41d7bf14-8aae-48e6-ba57-94474f33fcf3","fieldPos":297,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Edit Screen","script":"","translation":[]}]},{"fieldNo":"4b93b2d6-d1ca-4db4-97f9-fdd521b52687","fieldName":"pctHBoxRight3","fieldParent":"6cee8a94-250f-4f78-baa9-a439f9a68da6","fieldPos":298,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"7aecb9c7-ce43-4e9e-be6c-175f3e29eaa6","fieldName":"popCustomizationTilesHBoxIcon3","fieldParent":"4b93b2d6-d1ca-4db4-97f9-fdd521b52687","fieldPos":299,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://desktop-mobile","script":"","translation":[]}]},{"fieldNo":"6da1727f-61f7-46d5-954d-24e12f0d4e17","fieldName":"pctTileResize","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":300,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onTileResize();","script":"sap.n.Customization.Popover.onTileResize();","translation":[]}]},{"fieldNo":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldName":"pctHBox2","fieldParent":"6da1727f-61f7-46d5-954d-24e12f0d4e17","fieldPos":301,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"e6cf20d0-032b-4c17-d823-7bad16a22add","fieldName":"pctHBoxLeft2","fieldParent":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldPos":302,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"a69104b8-d72c-4701-efd2-d595de95b6f2","fieldName":"popCustomizationTilesHBoxTitle2","fieldParent":"e6cf20d0-032b-4c17-d823-7bad16a22add","fieldPos":303,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Resize","script":"","translation":[]}]},{"fieldNo":"aafd831e-250f-4d3c-963c-fd137b9d398a","fieldName":"pctHBoxRight2","fieldParent":"57f4665b-2e2f-42a2-ed94-1ccdd75bc024","fieldPos":304,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"de839ae2-f8e0-44fd-fcf5-2b691096eb9f","fieldName":"popCustomizationTilesHBoxIcon2","fieldParent":"aafd831e-250f-4d3c-963c-fd137b9d398a","fieldPos":305,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://resize","script":"","translation":[]}]},{"fieldNo":"74d9a7e5-1391-4ff3-c52b-27e028adfefe","fieldName":"pctMoveToAnotherPage","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":306,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemInformation","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onMoveTileToAnotherPage();","script":"sap.n.Customization.Popover.onMoveTileToAnotherPage();","translation":[]}]},{"fieldNo":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldName":"pctHBox1","fieldParent":"74d9a7e5-1391-4ff3-c52b-27e028adfefe","fieldPos":307,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"f953f2e1-05f4-46f9-f80d-54675ba34173","fieldName":"pctHBoxLeft1","fieldParent":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldPos":308,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"6299a925-7b9a-4b99-a65e-08e98bbe4da3","fieldName":"popCustomizationTilesHBoxTitle1","fieldParent":"f953f2e1-05f4-46f9-f80d-54675ba34173","fieldPos":309,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to another screen","script":"","translation":[]}]},{"fieldNo":"7e03169a-103e-4990-f00e-048bd0e8ab5b","fieldName":"pctHBoxRight1","fieldParent":"02ee1bf9-9062-40a7-8d61-0ad9469729f8","fieldPos":310,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"85379b92-09bb-49c4-e315-b38d2027a3a3","fieldName":"popCustomizationTilesHBoxIcon1","fieldParent":"7e03169a-103e-4990-f00e-048bd0e8ab5b","fieldPos":311,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://inspect","script":"","translation":[]}]},{"fieldNo":"6e04e9be-9fe6-476c-c47b-6b8b9642dd0b","fieldName":"pctTileRemove","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":312,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeListItemError nepEditHomeListItemTileRemove","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onTileRemove();","script":"sap.n.Customization.Popover.onTileRemove();","translation":[]}]},{"fieldNo":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldName":"pctHBox","fieldParent":"6e04e9be-9fe6-476c-c47b-6b8b9642dd0b","fieldPos":313,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"d16dac63-d948-46ad-8824-a839a1d36f44","fieldName":"pctHBoxLeft","fieldParent":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldPos":314,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"c622d1bb-4cda-403b-8afc-3a0a16018584","fieldName":"popCustomizationTilesHBoxTitle","fieldParent":"d16dac63-d948-46ad-8824-a839a1d36f44","fieldPos":315,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Remove App","script":"","translation":[]}]},{"fieldNo":"36ebadc3-b55e-4e8d-fe77-3535f17a3b7b","fieldName":"pctHBoxRight","fieldParent":"13599d78-0ff0-4e41-ef0f-495a5009efcf","fieldPos":316,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"c8202adc-6e72-4044-c6f6-aa7c65494c26","fieldName":"popCustomizationTilesHBoxIcon","fieldParent":"36ebadc3-b55e-4e8d-fe77-3535f17a3b7b","fieldPos":317,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://sys-minus","script":"","translation":[]}]},{"fieldNo":"2639f8bf-33df-418b-e0fd-da3db472b4a6","fieldName":"pctManageScreens","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":318,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.showManagePagesDialog();","script":"sap.n.Customization.showManagePagesDialog();","translation":[]}]},{"fieldNo":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldName":"pctHBox4","fieldParent":"2639f8bf-33df-418b-e0fd-da3db472b4a6","fieldPos":319,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"e6d237d1-6082-414e-ea67-e22f14406af9","fieldName":"pctHBoxLeft4","fieldParent":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldPos":320,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"141d9d62-b80a-4fc1-94e1-59273bded19b","fieldName":"popCustomizationTilesHBoxTitle4","fieldParent":"e6d237d1-6082-414e-ea67-e22f14406af9","fieldPos":321,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[]}]},{"fieldNo":"75a079af-bcbf-4cf2-ccfe-904ca9bdec4c","fieldName":"pctHBoxRight4","fieldParent":"65b3d1a5-56e1-46e0-f190-ddbeed83515c","fieldPos":322,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"b4622ec4-2e52-4d05-f738-cd80c9b6ca08","fieldName":"popCustomizationTilesHBoxIcon4","fieldParent":"75a079af-bcbf-4cf2-ccfe-904ca9bdec4c","fieldPos":323,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://popup-window","script":"","translation":[]}]},{"fieldNo":"6ae2b0f0-fe48-4bcf-cccc-a5a953a7ba6e","fieldName":"pctSettings","fieldParent":"92c5ee10-2af6-4463-a3fa-65a540f767e7","fieldPos":324,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"AppCacheDiaSettings.open();","script":"AppCacheDiaSettings.open();","translation":[]}]},{"fieldNo":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldName":"pctHBox5","fieldParent":"6ae2b0f0-fe48-4bcf-cccc-a5a953a7ba6e","fieldPos":325,"fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeContainer","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}]},{"fieldNo":"205e11c9-e7cd-41d5-802d-91280d665b5a","fieldName":"pctHBoxLeft5","fieldParent":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldPos":326,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeTitle","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"2172711b-8d1c-4401-aa84-afef1c721065","fieldName":"popCustomizationTilesHBoxTitle5","fieldParent":"205e11c9-e7cd-41d5-802d-91280d665b5a","fieldPos":327,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Settings","script":"","translation":[]}]},{"fieldNo":"9e55ca33-40a9-4ff9-8d8c-b6c6043bef1c","fieldName":"pctHBoxRight5","fieldParent":"7878815f-0162-4b2b-80ed-62fd133ae158","fieldPos":328,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepEditHomeIcon","script":"","translation":[]},{"attribute":"renderType","grouping":"Properties","value":"Bare","script":"","translation":[]}]},{"fieldNo":"7ff55352-0ea6-48de-fe64-c1bcaac1185d","fieldName":"popCustomizationTilesHBoxIcon5","fieldParent":"9e55ca33-40a9-4ff9-8d8c-b6c6043bef1c","fieldPos":329,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://settings","script":"","translation":[]}]},{"fieldNo":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldName":"Dialogs","fieldParent":99999,"fieldPos":330,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"84b2c26b-539e-4e2c-93c4-96a145d17167","fieldName":"butDiaSetPasswordConfirm","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":331,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Confirm","script":"","translation":[{"language":"DA","value":"Bekræfte"},{"language":"FR","value":"Confirmer"},{"language":"DE","value":"Bestätigen"},{"language":"IT","value":"Confermare"},{"language":"NO","value":"Bekrefte"},{"language":"PL","value":"Potwierdzać"},{"language":"PT","value":"confirme"},{"language":"ES","value":"Confirmar"},{"language":"SV","value":"Bekräfta"},{"language":"EN","value":"Confirm"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"if (informSetPasswordOne.getValue() !== informSetPasswordTwo.getValue()) {\n    sap.m.MessageToast.show(\"Password confirmation doesn't match password\");\n} else if (!informSetPasswordOne.getValue()) {\n    sap.m.MessageToast.show(\"Please provide a password\");\n} else if (!informSetPasswordOld.getValue()) {\n    sap.m.MessageToast.show(\"Please provide the current password\");\n} else {\n\n    diaSetPassword.setBusy(true);\n\n    data = {\n        id: AppCache.userInfo.id,\n        old: informSetPasswordOld.getValue(),\n        updated: informSetPasswordTwo.getValue()\n    }\n\n    request({\n        type: \"POST\",\n        contentType: 'application/json; charset=utf-8',\n        url: AppCache.Url + \"/user/reset\",\n        // dataType: \"json\",\n        data: JSON.stringify(data),\n        success: function (data) {\n            diaSetPassword.setBusy(false);\n            sap.m.MessageToast.show(\"Password updated\");\n            diaSetPassword.close();\n        },\n        error: function (data) {\n            diaSetPassword.setBusy(false);\n            if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\n        }\n    });\n\n}","translation":[]}]},{"fieldNo":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldName":"diaSetPassword","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":332,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"400px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"//clearing dialog fields\n\ninformSetPasswordOne.setValue=\"\";\ninformSetPasswordTwo.setValue=\"\";","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"butDiaSetPasswordConfirm","script":"","translation":[]}]},{"fieldNo":"b74c1e52-94d8-44cc-99b2-fd4b2e34c302","fieldName":"subHeaderPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldPos":333,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"453005bb-512a-4494-f479-794eda17bf2f","fieldName":"Right","fieldParent":"b74c1e52-94d8-44cc-99b2-fd4b2e34c302","fieldPos":334,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"b9b01a9f-5976-4a8c-f241-a3dae81692e4","fieldName":"butPasswordClose","fieldParent":"453005bb-512a-4494-f479-794eda17bf2f","fieldPos":335,"fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"this.getParent().getParent().close();","script":"this.getParent().getParent().close();","translation":[]}]},{"fieldNo":"6395632d-904d-4a5f-cd9e-bfa146e1d733","fieldName":"objHeaderPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldPos":336,"fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Password","script":"","translation":[{"language":"DA","value":"Adgangskode"},{"language":"FR","value":"Mot de passe"},{"language":"DE","value":"Passwort"},{"language":"IT","value":"Parola d'ordine"},{"language":"NO","value":"Passord"},{"language":"PL","value":"Hasło"},{"language":"PT","value":"Senha"},{"language":"ES","value":"Contraseña"},{"language":"SV","value":"Lösenord"},{"language":"EN","value":"Password"}]},{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"numberState","grouping":"Properties","value":"Warning","script":"","translation":[]},{"attribute":"intro","grouping":"Properties","value":"Change users password","script":"","translation":[{"language":"DA","value":"Skift brugeradgangskode"},{"language":"FR","value":"Changer le mot de passe des utilisateurs"},{"language":"DE","value":"Ändern Sie das Benutzerpasswort"},{"language":"IT","value":"Cambia password utente"},{"language":"NO","value":"Endre passord for brukere"},{"language":"PL","value":"Zmień hasło użytkownika"},{"language":"PT","value":"Alterar senha de usuários"},{"language":"ES","value":"Cambiar contraseña de usuario"},{"language":"SV","value":"Ändra användarlösenord"},{"language":"EN","value":"Change users password"}]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-shield","script":"","translation":[]}]},{"fieldNo":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldName":"formSetPassword","fieldParent":"754911b5-e92f-4a3f-ea45-10a0a02d98ef","fieldPos":337,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]}]},{"fieldNo":"dbc3b5ac-e43d-4705-a28f-b1a12168824b","fieldName":"lblformSetPasswordOld","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":338,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Current Password","script":"","translation":[{"language":"DA","value":"nyt kodeord"},{"language":"FR","value":"nouveau mot de passe"},{"language":"DE","value":"Aktuelles Passwort"},{"language":"IT","value":"Password attuale"},{"language":"NO","value":"Nytt passord"},{"language":"PL","value":"Aktualne hasło"},{"language":"PT","value":"Nova senha"},{"language":"ES","value":"Nueva contraseña"},{"language":"SV","value":"nytt lösenord"},{"language":"EN","value":"Current Password"}]}]},{"fieldNo":"88c5d76f-8761-4508-fc88-b3b212abb444","fieldName":"informSetPasswordOld","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":339,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}]},{"fieldNo":"f130ab33-312e-4273-8b67-3b8eb46fd34e","fieldName":"lblformSetPasswordOne","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":340,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New Password","script":"","translation":[{"language":"DA","value":"nyt kodeord"},{"language":"FR","value":"nouveau mot de passe"},{"language":"DE","value":"Neues Passwort"},{"language":"IT","value":"Password nuova "},{"language":"NO","value":"Nytt passord"},{"language":"PL","value":"nowe hasło"},{"language":"PT","value":"Nova senha"},{"language":"ES","value":"Nueva contraseña"},{"language":"SV","value":"nytt lösenord"},{"language":"EN","value":"New Password"}]}]},{"fieldNo":"76927280-5f9c-4f79-f870-bd61351ca435","fieldName":"informSetPasswordOne","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":341,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}]},{"fieldNo":"0afab486-5b54-4409-f1e3-da6886cff84a","fieldName":"lblformSetPasswordTwo","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":342,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat New Password","script":"","translation":[{"language":"DA","value":"Gentag adgangskode"},{"language":"FR","value":"Répéter le mot de passe"},{"language":"DE","value":"Wiederhole das Passwort"},{"language":"IT","value":"Ripeti la password"},{"language":"NO","value":"Gjenta passord"},{"language":"PL","value":"Powtórz nowe hasło"},{"language":"PT","value":"Repita a senha"},{"language":"ES","value":"Repite la contraseña"},{"language":"SV","value":"Repetera lösenord"},{"language":"EN","value":"Repeat New Password"}]}]},{"fieldNo":"f7d01bc7-b824-4b98-f1c4-dd0cbd27c507","fieldName":"informSetPasswordTwo","fieldParent":"bb301ff7-2295-4073-a8c2-8e9c52c9d348","fieldPos":343,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Password","script":"","translation":[]}]},{"fieldNo":"2bf128d5-e4c8-4c9d-b397-566cddcc40ed","fieldName":"acceptMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":344,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaMessage.onAccept();\ndiaMessage.close();\n","translation":[]}]},{"fieldNo":"779e5eb8-62ca-4ab3-9922-b0bb5b511530","fieldName":"declineMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":345,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaMessage.onDecline();\ndiaMessage.close();\n","translation":[]}]},{"fieldNo":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldName":"diaMessage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":346,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"400px","script":"","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"Anonymous Function","script":"this.onClose();\ndiaMessage.setEndButton();\ndiaMessage.setBeginButton();","translation":[]}]},{"fieldNo":"4beb5f2b-cf05-40ca-a832-0b774659b2c4","fieldName":"headerMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldPos":347,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"1e47af90-b9ce-4bd2-e8a9-97f7e14ae45f","fieldName":"Right","fieldParent":"4beb5f2b-cf05-40ca-a832-0b774659b2c4","fieldPos":348,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"0276adfc-5a99-4df1-e761-e477cacc8844","fieldName":"closeMessage","fieldParent":"1e47af90-b9ce-4bd2-e8a9-97f7e14ae45f","fieldPos":349,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaMessage.close();","script":"diaMessage.close();","translation":[]}]},{"fieldNo":"5506d217-6e59-4ca5-acd5-34c32b803b5e","fieldName":"objHeaderMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldPos":350,"fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]}]},{"fieldNo":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldName":"layoutMessage","fieldParent":"91e402f0-f199-4718-9c64-1aa4fb1fecb3","fieldPos":351,"fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMargin","script":"","translation":[]}]},{"fieldNo":"2464fbe9-df2f-40e6-8606-845d3ae2c9ce","fieldName":"txtMessage1","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldPos":352,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2992d5c5-4692-426d-b406-19a3446863bd","fieldName":"txtMessage2","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldPos":353,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"bca46468-acd4-4bcc-cb60-7ed4735ab2a5","fieldName":"txtMessage3","fieldParent":"dca1a48c-3d7b-4080-840c-dc2e6eeba479","fieldPos":354,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"90c0c787-bfda-4b6b-878d-82f80209f941","fieldName":"butSupportedBrowsersClose","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":355,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://sys-cancel","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"popSupportedBrowsers.close();","script":"popSupportedBrowsers.close();","translation":[]}]},{"fieldNo":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldName":"diaText","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":356,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"1280px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"880px","script":"","translation":[]}]},{"fieldNo":"06e87d3e-373d-428a-bae2-3496a61ffdb5","fieldName":"headerText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldPos":357,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"9c2f348d-a3b8-4bb0-b0b0-67fe6f484eac","fieldName":"Right","fieldParent":"06e87d3e-373d-428a-bae2-3496a61ffdb5","fieldPos":358,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"88b20027-eded-4c72-8aac-821a7a865b56","fieldName":"closeText","fieldParent":"9c2f348d-a3b8-4bb0-b0b0-67fe6f484eac","fieldPos":359,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"this.getParent().getParent().close();","script":"this.getParent().getParent().close();","translation":[]}]},{"fieldNo":"782ce653-fa1e-46cd-fb80-778e2fc70f0b","fieldName":"AppCacheText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldPos":360,"fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://document-text","script":"","translation":[]}]},{"fieldNo":"d4c2534c-750b-4a9b-93d8-47f824810f25","fieldName":"scrollText","fieldParent":"157cb86d-df52-49bc-be84-1bea786f6c9a","fieldPos":361,"fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"af9030a1-36d9-479e-eb41-eeb933380418","fieldName":"panText","fieldParent":"d4c2534c-750b-4a9b-93d8-47f824810f25","fieldPos":362,"fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"26f78f29-90c8-4a78-9321-eb3764235563","fieldName":"oHTMLText","fieldParent":"af9030a1-36d9-479e-eb41-eeb933380418","fieldPos":363,"fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"04d00d2f-4953-4d70-ad39-e76a416e14e9","fieldName":"oHTML1","fieldParent":"26f78f29-90c8-4a78-9321-eb3764235563","fieldPos":364,"fieldType":"neptune.Html","script":"<div id=\"textDiv\" style=\"height:777px;width:100%\"></div>","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"9b84d528-14aa-4552-d9a6-75badb2ec62e","fieldName":"AppCacheDiaHashClose","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":365,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"OK","script":"","translation":[{"language":"ZH","value":"好"},{"language":"DA","value":"Okay"},{"language":"NL","value":"OK"},{"language":"FI","value":"kunnossa"},{"language":"FR","value":"D'accord"},{"language":"DE","value":"OK"},{"language":"IT","value":"ok"},{"language":"JA","value":"OK"},{"language":"NO","value":"OK"},{"language":"PL","value":"dobrze"},{"language":"PT","value":"OK"},{"language":"ES","value":"DE ACUERDO"},{"language":"SV","value":"ok"},{"language":"EN","value":"OK"}]},{"attribute":"press","grouping":"Events","value":"AppCacheDiaHash.close();","script":"AppCacheDiaHash.close();","translation":[]}]},{"fieldNo":"64a6adbf-1e95-4d3b-e15f-cad8a8b9cfed","fieldName":"AppCacheDiaHash","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":366,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Message","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Error","script":"","translation":[{"language":"ZH","value":"错误"},{"language":"DA","value":"Fejl"},{"language":"NL","value":"Fout"},{"language":"FI","value":"Virhe"},{"language":"FR","value":"Erreur"},{"language":"DE","value":"Fehler"},{"language":"IT","value":"Errore"},{"language":"JA","value":"エラー"},{"language":"NO","value":"Feil"},{"language":"PL","value":"Błąd"},{"language":"PT","value":"Erro"},{"language":"ES","value":"Error"},{"language":"SV","value":"Fel"},{"language":"EN","value":"Error"}]},{"attribute":"state","grouping":"Properties","value":"Error","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://error","script":"","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"AppCacheDiaHashClose","script":"","translation":[]}]},{"fieldNo":"bb1dd148-228d-4d90-f4d7-80f188bfc7fb","fieldName":"AppCacheDiaHashText","fieldParent":"64a6adbf-1e95-4d3b-e15f-cad8a8b9cfed","fieldPos":367,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Could not open app. Try again later.","script":"","translation":[{"language":"ZH","value":"无法打开应用。稍后再试。"},{"language":"DA","value":"Kunne ikke åbne app. Prøv igen senere."},{"language":"NL","value":"Kan app niet openen. Probeer het later opnieuw."},{"language":"FI","value":"Sovellusta ei voitu avata. Yritä myöhemmin uudelleen."},{"language":"FR","value":"Impossible d'ouvrir l'application. Réessayez plus tard."},{"language":"DE","value":"App konnte nicht geöffnet werden. Bitte später erneut versuchen."},{"language":"IT","value":"Impossibile aprire l'app. Riprovare più tardi."},{"language":"JA","value":"アプリを開けませんでした。あとでもう一度試してみてください。"},{"language":"NO","value":"Kunne ikke åpne appen. Prøv igjen senere."},{"language":"PL","value":"Nie udało się otworzyć aplikacji. Spróbuj ponownie później."},{"language":"PT","value":"Não foi possível abrir o aplicativo. Tente mais tarde."},{"language":"ES","value":"No se pudo abrir la aplicación. Inténtalo de nuevo más tarde."},{"language":"SV","value":"Det gick inte att öppna appen. Försök igen senare."},{"language":"EN","value":"Could not open app. Try again later."}]}]},{"fieldNo":"d58f3ebb-c76a-47f6-81a3-caf3344a0499","fieldName":"AppCacheDiaSettingsClose","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":368,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"OK","script":"","translation":[{"language":"ZH","value":"保存"},{"language":"DA","value":"Gemme"},{"language":"NL","value":"Opslaan"},{"language":"FI","value":"Tallentaa"},{"language":"FR","value":"sauvegarder"},{"language":"DE","value":"Speichern"},{"language":"IT","value":"Salvare"},{"language":"JA","value":"保存する"},{"language":"NO","value":"OK"},{"language":"PL","value":"dobrze"},{"language":"PT","value":"Gravar"},{"language":"ES","value":"Salvar"},{"language":"SV","value":"Spara"},{"language":"EN","value":"OK"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"AppCacheDiaSettings.close();\r\nsap.n.Launchpad.settingsMenuClose();\r\n","translation":[]}]},{"fieldNo":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldName":"AppCacheDiaSettings","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":369,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","bindingParentID":"f29e36cc-4c43-43e7-a1be-548815b92676","bindingPathID":"4eebeb7d-8d21-4200-fd75-b99170d28ff5","request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepSettings nepDialogWithObjHeader","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"600px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"680px","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"sap.n.Launchpad.applyUserTheme();","script":"sap.n.Launchpad.applyUserTheme();","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"if (!sap.n.Customization.isSupported()) {\n    chkAppCacheLockScreenChanges.setVisible(false);\n    chkAppCacheDisableScreenChanges.setVisible(false);\n    return;\n}\n\nchkAppCacheLockScreenChanges.setVisible(true).setEnabled(true);\nchkAppCacheDisableScreenChanges.setVisible(true).setEnabled(true);\n\nconst { disableScreenChanges, lockScreenChanges } = modelAppCacheDiaSettings.getData();\nif (lockScreenChanges) {\n    chkAppCacheDisableScreenChanges.setEnabled(false);\n}","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"AppCacheDiaSettingsClose","script":"","translation":[]}]},{"fieldNo":"90ab8b1c-323d-47fb-94b6-12320e066424","fieldName":"headerSettings","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldPos":370,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"becaa6f9-945c-4dcf-a858-6de43edf4528","fieldName":"Right","fieldParent":"90ab8b1c-323d-47fb-94b6-12320e066424","fieldPos":371,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"9527d20a-46b4-4225-c6d1-b40457afe2ba","fieldName":"closeSettings","fieldParent":"becaa6f9-945c-4dcf-a858-6de43edf4528","fieldPos":372,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"this.getParent().getParent().close();\r\nsap.n.Launchpad.settingsMenuClose();","translation":[]}]},{"fieldNo":"0a770fa8-5a7f-43ae-b613-fb80b968cf6c","fieldName":"AppCacheSettingsUser","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldPos":373,"fieldType":"sap.m.ObjectHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"responsive","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"numberUnit","grouping":"Properties","value":"ENTRIES","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/user-circle","script":"","translation":[]}]},{"fieldNo":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldName":"barSettings","fieldParent":"d7b184b4-e7dd-439e-b537-e49ec02ea037","fieldPos":374,"fieldType":"sap.m.IconTabBar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"expandable","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"applyContentPadding","grouping":"Properties","value":"false","script":"","translation":[]}]},{"fieldNo":"6fc9357b-b771-4ce8-9470-fe6ca5cfabf4","fieldName":"barSettingsGeneral","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldPos":375,"fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"SETTINGS","script":"","translation":[{"language":"ZH","value":"设置"},{"language":"DA","value":"INDSTILLINGER"},{"language":"NL","value":"INSTELLINGEN"},{"language":"FI","value":"ASETUKSET"},{"language":"FR","value":"RÉGLAGES"},{"language":"DE","value":"EINSTELLUNGEN"},{"language":"IT","value":"IMPOSTAZIONI"},{"language":"JA","value":"設定"},{"language":"NO","value":"INNSTILLINGER"},{"language":"PL","value":"USTAWIENIA"},{"language":"PT","value":"DEFINIÇÕES"},{"language":"ES","value":"AJUSTES"},{"language":"SV","value":"INSTÄLLNINGAR"},{"language":"EN","value":"SETTINGS"}]}]},{"fieldNo":"d672672d-161f-46b5-8f02-093873ac3388","fieldName":"scrollSettings","fieldParent":"6fc9357b-b771-4ce8-9470-fe6ca5cfabf4","fieldPos":376,"fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}]},{"fieldNo":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldName":"AppCacheFormSettings","fieldParent":"d672672d-161f-46b5-8f02-093873ac3388","fieldPos":377,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanS","grouping":"Properties","value":"4","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"4","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"c4b737bf-e743-4138-dde9-e28104862f34","fieldName":"lblAppCacheFormSettingsLang","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":378,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Language","script":"","translation":[{"language":"ZH","value":"语言"},{"language":"DA","value":"Sprog"},{"language":"NL","value":"Taal"},{"language":"FI","value":"Kieli"},{"language":"FR","value":"La langue"},{"language":"DE","value":"Sprache"},{"language":"IT","value":"linguaggio"},{"language":"JA","value":"言語"},{"language":"NO","value":"Språk"},{"language":"PL","value":"Język"},{"language":"PT","value":"Língua"},{"language":"ES","value":"Idioma"},{"language":"SV","value":"Språk"},{"language":"EN","value":"Language"}]}]},{"fieldNo":"71531019-0b3c-4acb-b78e-6a7fe4d359f3","fieldName":"inAppCacheFormSettingsLang","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":379,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"let language = '';\r\n\r\nif (inAppCacheFormSettingsLang.getSelectedKey()) {\r\n    language = inAppCacheFormSettingsLang.getSelectedKey();\r\n}\r\n\r\n// Update User \r\nAppCache.userInfo.language = language;\r\nModelData.Update(AppCacheUsers, 'username', AppCache.userInfo.username, AppCache.userInfo);\r\nsetCacheAppCacheUsers();\r\n\r\nsap.n.Planet9.function({\r\n    id: dataSet,\r\n    method: 'UpdateUserDetails',\r\n    data: {\r\n        language: language\r\n    },\r\n    success: function (data) {\r\n        if (!AppCache.isMobile) {\r\n            location.reload();\r\n        } else {\r\n            AppCache.translate(language);\r\n            sap.n.Launchpad.RebuildTiles();\r\n            sap.n.Launchpad.BuildMenuTop();\r\n            sap.n.Launchpad.BuildTreeMenu();\r\n        }\r\n    }\r\n});","translation":[]}]},{"fieldNo":"ebe5e21a-b0ac-4d56-e912-035653af9ff9","fieldName":"lblAppCacheFormSettingsTRAN","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":380,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Transitions","script":"","translation":[{"language":"ZH","value":"转变"},{"language":"DA","value":"Overgange"},{"language":"NL","value":"Transitions"},{"language":"FI","value":"siirtymät"},{"language":"FR","value":"Les transitions"},{"language":"DE","value":"Übergänge"},{"language":"IT","value":"transizioni"},{"language":"JA","value":"トランジション"},{"language":"NO","value":"Overganger"},{"language":"PL","value":"Przejścia"},{"language":"PT","value":"Transições"},{"language":"ES","value":"Transiciones"},{"language":"SV","value":"övergångar"},{"language":"EN","value":"Transitions"}]}]},{"fieldNo":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldName":"inAppCacheFormSettingsTRAN","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":381,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"selectedKey","grouping":"Properties","value":"{/TRANSITION}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"setCacheAppCacheDiaSettings();","script":"setCacheAppCacheDiaSettings();","translation":[]}]},{"fieldNo":"ca418f6f-f2a0-43b0-d7a8-a66fe176624c","fieldName":"transitionMainNone","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldPos":382,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Default","script":"","translation":[{"language":"ZH","value":"默认"},{"language":"DA","value":"Standard"},{"language":"NL","value":"Standaard"},{"language":"FI","value":"oletusarvo"},{"language":"FR","value":"Défaut"},{"language":"DE","value":"Standard"},{"language":"IT","value":"Predefinito"},{"language":"JA","value":"デフォルト"},{"language":"NO","value":"Standard"},{"language":"PL","value":"Domyślna"},{"language":"PT","value":"Por Defeito"},{"language":"ES","value":"Defecto"},{"language":"SV","value":"Standard"},{"language":"EN","value":"Default"}]}]},{"fieldNo":"bc968e47-d965-4440-c9c5-783fe5ab6338","fieldName":"transitionMainDoor","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldPos":383,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Door","script":"","translation":[{"language":"ZH","value":"由"},{"language":"JA","value":"によって"},{"language":"PL","value":"Przez"},{"language":"PT","value":"Porta"}]},{"attribute":"key","grouping":"Properties","value":"door","script":"","translation":[]}]},{"fieldNo":"e7d3622b-8a7a-4d2b-b54b-44245cb60b7a","fieldName":"transitionMainFade","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldPos":384,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Fade","script":"","translation":[{"language":"ZH","value":"褪色"},{"language":"JA","value":"フェード"},{"language":"PL","value":"Blaknąć"},{"language":"PT","value":"Fade"}]},{"attribute":"key","grouping":"Properties","value":"fade","script":"","translation":[]}]},{"fieldNo":"45edee8f-1d61-4340-b9a4-f2adf1ed9634","fieldName":"transitionMainFlip","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldPos":385,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Flip","script":"","translation":[{"language":"ZH","value":"翻动"},{"language":"JA","value":"反転する"},{"language":"PL","value":"Trzepnięcie"},{"language":"PT","value":"Girar"}]},{"attribute":"key","grouping":"Properties","value":"flip","script":"","translation":[]}]},{"fieldNo":"3f729b29-4263-4cde-c618-8b1d5683a853","fieldName":"transitionMainSlide","fieldParent":"92969d04-c2dc-4ff8-c2b0-4b82e716b9c9","fieldPos":386,"fieldType":"sap.ui.core.Item","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Slide","script":"","translation":[{"language":"ZH","value":"滑动"},{"language":"JA","value":"滑り台"},{"language":"PL","value":"Ślizgać się"},{"language":"PT","value":"Deslizar"}]},{"attribute":"key","grouping":"Properties","value":"slide","script":"","translation":[]}]},{"fieldNo":"8f2a2ece-b7fa-4957-9471-9d5c1b7129c1","fieldName":"lblAppCacheFormSettingsTHEME","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":387,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Layout","script":"","translation":[{"language":"ZH","value":"主题"},{"language":"DA","value":"Tema"},{"language":"NL","value":"Thema"},{"language":"FI","value":"Teema"},{"language":"FR","value":"Thème"},{"language":"DE","value":"Theme"},{"language":"IT","value":"Tema"},{"language":"JA","value":"テーマ"},{"language":"NO","value":"Tema"},{"language":"PL","value":"Układ"},{"language":"PT","value":"Tema"},{"language":"ES","value":"Tema"},{"language":"SV","value":"Tema"},{"language":"EN","value":"Layout"}]}]},{"fieldNo":"2a7f5668-f5ec-4010-efe5-c5b131d78aab","fieldName":"inAppCacheFormSettingsTHEME","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":388,"fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"selectedKey","grouping":"Properties","value":"{/userTheme}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nsap.n.Launchpad.applyUserTheme();\nsap.n.Launchpad.RebuildTiles();\nAppCache.Home();\n","translation":[]}]},{"fieldNo":"820943bf-f016-4cda-96c6-18c309d298ad","fieldName":"txtAppCacheFormSettingsPANEL_WIDTH","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":389,"fieldType":"sap.m.Label","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Sidepanel Width","script":"","translation":[{"language":"1","value":"侧板宽度"},{"language":"D","value":"Breite der Seitenwand"},{"language":"F","value":"Largeur du panneau latéral"},{"language":"H","value":"Oldalsó panel szélessége"},{"language":"K","value":"Sidepanelbredde"},{"language":"O","value":"Sidepanelbredde"},{"language":"P","value":"Largura do painel lateral"},{"language":"R","value":"Ширина боковой панели"},{"language":"S","value":"Ancho del panel lateral"},{"language":"PL","value":"Szerokość panelu bocznego"},{"language":"EN","value":"Sidepanel Width"}]}]},{"fieldNo":"005065f0-529d-4f29-eb27-d88dab892b06","fieldName":"inAppCacheFormSettingsPANEL_WIDTH","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":390,"fieldType":"sap.m.Select","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"selectedKey","grouping":"Properties","value":"{/sidepanelWidth}","script":"","translation":[]},{"attribute":"forceSelection","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nif (launchpadContentSideApp.getWidth() !== '0px') {\n    let sidepanelWidth = sap.n.Launchpad.sidepanelWidth[modelAppCacheDiaSettings.oData.sidepanelWidth || 'large'];\n    launchpadContentSideApp.setWidth(sidepanelWidth);\n    sap.n.Launchpad.setLaunchpadContentWidth();\n}","translation":[]}]},{"fieldNo":"413fe8a8-b104-45c0-ea24-c8d9e1891f97","fieldName":"itemSIDEPANEL_WIDTHXSmall","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":391,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XSmall","script":"","translation":[{"language":"1","value":"X小"},{"language":"D","value":"X Klein"},{"language":"F","value":"X petit"},{"language":"H","value":"X kicsi"},{"language":"K","value":"X Lille"},{"language":"O","value":"X Small"},{"language":"P","value":"X pequeno"},{"language":"R","value":"X маленький"},{"language":"S","value":"X pequeño"},{"language":"W","value":"X Малка"},{"language":"PL","value":"XSmall"}]},{"attribute":"key","grouping":"Properties","value":"xsmall","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"b9de0066-c2c0-45ca-e313-a0ed0d0597a7","fieldName":"itemSIDEPANEL_WIDTHSmall","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":392,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Small ","script":"","translation":[{"language":"1","value":"小（默认）"},{"language":"D","value":"Klein (Standard)"},{"language":"F","value":"Petit (par défaut)"},{"language":"H","value":"Kicsi (alapértelmezett)"},{"language":"K","value":"Lille (standard)"},{"language":"O","value":"Small (Default)"},{"language":"P","value":"Pequeno (padrão)"},{"language":"R","value":"Маленький (по умолчанию)"},{"language":"S","value":"Pequeño (predeterminado)"},{"language":"W","value":"Малка (по подразбиране)"},{"language":"PL","value":"Mały"}]},{"attribute":"key","grouping":"Properties","value":"small","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"fbd91c91-6970-421a-911f-8211426272bc","fieldName":"itemSIDEPANEL_WIDTHMedium","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":393,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Medium ","script":"","translation":[{"language":"1","value":"中"},{"language":"D","value":"Mittel"},{"language":"F","value":"Moyen"},{"language":"H","value":"Közepes"},{"language":"K","value":"Medium"},{"language":"O","value":"Medium"},{"language":"P","value":"Médio"},{"language":"R","value":"средний"},{"language":"S","value":"Medio"},{"language":"W","value":"среда"},{"language":"PL","value":"Średni"}]},{"attribute":"key","grouping":"Properties","value":"medium","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"303373c3-cefc-4f1a-b1d0-a5e4d9a62cea","fieldName":"itemSIDEPANEL_WIDTHLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":394,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Large (Default)","script":"","translation":[{"language":"1","value":"大"},{"language":"D","value":"Groß"},{"language":"F","value":"Grand"},{"language":"H","value":"Nagy"},{"language":"K","value":"Stor"},{"language":"O","value":"Large"},{"language":"P","value":"Ampla"},{"language":"R","value":"Большой"},{"language":"S","value":"Grande"},{"language":"W","value":"Голям"},{"language":"PL","value":"Duży (domyślny)"}]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"a31f083a-f17a-4fa3-9c9e-a4d7454d1795","fieldName":"itemSIDEPANEL_WIDTHXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":395,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XLarge","script":"","translation":[{"language":"1","value":"X大"},{"language":"D","value":"X groß"},{"language":"F","value":"X grand"},{"language":"H","value":"X nagy"},{"language":"K","value":"X Stor"},{"language":"O","value":"X Large"},{"language":"P","value":"Extra grande"},{"language":"R","value":"X Большой"},{"language":"S","value":"X grande"},{"language":"W","value":"X голям"},{"language":"PL","value":"XLarge"}]},{"attribute":"key","grouping":"Properties","value":"xlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"3ba01a91-00ed-4415-8e04-0c908819c2c5","fieldName":"itemSIDEPANEL_WIDTHXXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":396,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXLarge","script":"","translation":[{"language":"1","value":"XX大"},{"language":"D","value":"XX Groß"},{"language":"F","value":"XX Grand"},{"language":"H","value":"XX nagy"},{"language":"K","value":"XX Stor"},{"language":"O","value":"XX Large"},{"language":"P","value":"XX grande"},{"language":"R","value":"XX Большой"},{"language":"S","value":"XX grande"},{"language":"W","value":"XX голям"},{"language":"PL","value":"XXLarge"}]},{"attribute":"key","grouping":"Properties","value":"xxlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"d9ee0d56-f316-4e2c-d6f6-0b16c4746e5b","fieldName":"itemSIDEPANEL_WIDTHXXXLarge","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":397,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXXLarge","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"D","value":"XXX groß"},{"language":"F","value":"XXX grand"},{"language":"H","value":"XXX nagy"},{"language":"K","value":"XXX Stor"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"R","value":"XXX Большой"},{"language":"S","value":"XXX grande"},{"language":"W","value":"XXX големи"},{"language":"PL","value":"XXXLarge"}]},{"attribute":"key","grouping":"Properties","value":"xxxlarge","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"0880a520-13c2-4590-8a33-8d5bf57eb70c","fieldName":"itemSIDEPANEL_WIDTHWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":398,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"D","value":"XXX groß"},{"language":"F","value":"XXX grand"},{"language":"H","value":"XXX nagy"},{"language":"K","value":"XXX Stor"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"R","value":"XXX Большой"},{"language":"S","value":"XXX grande"},{"language":"W","value":"XXX големи"},{"language":"PL","value":"Szeroki"}]},{"attribute":"key","grouping":"Properties","value":"widescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"6a0b1a6e-e0b4-4f1d-b120-ee1d2e0ee26e","fieldName":"itemSIDEPANEL_WIDTHXWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":399,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XWide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"D","value":"XXX groß"},{"language":"F","value":"XXX grand"},{"language":"H","value":"XXX nagy"},{"language":"K","value":"XXX Stor"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"R","value":"XXX Большой"},{"language":"S","value":"XXX grande"},{"language":"W","value":"XXX големи"},{"language":"PL","value":"XWide"}]},{"attribute":"key","grouping":"Properties","value":"xwidescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"c91bf395-8144-4f62-bff5-634bf63e9dc0","fieldName":"itemSIDEPANEL_WIDTHXXWIDE","fieldParent":"005065f0-529d-4f29-eb27-d88dab892b06","fieldPos":400,"fieldType":"sap.ui.core.Item","description":"","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"XXWide","script":"","translation":[{"language":"1","value":"XXX大"},{"language":"D","value":"XXX groß"},{"language":"F","value":"XXX grand"},{"language":"H","value":"XXX nagy"},{"language":"K","value":"XXX Stor"},{"language":"O","value":"XXX Large"},{"language":"P","value":"XXX grande"},{"language":"R","value":"XXX Большой"},{"language":"S","value":"XXX grande"},{"language":"W","value":"XXX големи"},{"language":"PL","value":"XXWide"}]},{"attribute":"key","grouping":"Properties","value":"xxwidescreen","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":true,"script":"","translation":[]}]},{"fieldNo":"e6ea20d5-ac86-40c6-ff4b-73b0b8a5b42e","fieldName":"lblAppCacheFormSettingsBACK","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":401,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Background Image URL","script":"","translation":[{"language":"ZH","value":"背景图片网址"},{"language":"DA","value":"Baggrundsbilled-URL"},{"language":"NL","value":"Achtergrondafbeelding"},{"language":"FI","value":"Taustakuvan URL-osoite"},{"language":"FR","value":"URL de l'image de fond"},{"language":"DE","value":"URL Hintergrundbild"},{"language":"IT","value":"URL dell'immagine di sfondo"},{"language":"JA","value":"背景画像のURL"},{"language":"NO","value":"Bakgrunnsbilde URL"},{"language":"PL","value":"URL obrazu tła"},{"language":"PT","value":"URL da imagem de plano de fundo"},{"language":"ES","value":"URL de imagen de fondo"},{"language":"SV","value":"Bakgrundsbild URL"},{"language":"EN","value":"Background Image URL"}]}]},{"fieldNo":"9be12f1b-f792-47df-a716-7d44151a17be","fieldName":"inAppCacheFormSettingsBACK","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":402,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/userBackImage}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\nsap.n.Launchpad.applyUserTheme();","translation":[]}]},{"fieldNo":"0d279ae5-7568-409f-e33b-c3a477cd5a9a","fieldName":"lblAppCacheFormSettingsFAV","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":403,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Most used","script":"","translation":[{"language":"ZH","value":"最常被使用"},{"language":"DA","value":"Mest anvendte"},{"language":"NL","value":"Meest gebruikt"},{"language":"FI","value":"Eniten käytetty"},{"language":"FR","value":"Plus utilisé"},{"language":"DE","value":"meist genutzt"},{"language":"IT","value":"Più usato"},{"language":"JA","value":"最も使用"},{"language":"NO","value":"Mest brukt"},{"language":"PL","value":"Najbardziej używane"},{"language":"PT","value":"Mais utilizado"},{"language":"ES","value":"Más usado"},{"language":"SV","value":"Mest använda"},{"language":"EN","value":"Most used"}]}]},{"fieldNo":"4f73010b-e0f3-4983-b379-7ba048ed12df","fieldName":"AppCacheButDeleteRun","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":404,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear","script":"","translation":[{"language":"ZH","value":"明确"},{"language":"DA","value":"Klar"},{"language":"NL","value":"Duidelijk"},{"language":"FI","value":"Asia selvä"},{"language":"FR","value":"Clair"},{"language":"DE","value":"Zurücksetzen"},{"language":"IT","value":"Chiaro"},{"language":"JA","value":"クリア"},{"language":"NO","value":"Slett"},{"language":"PL","value":"Jasny"},{"language":"PT","value":"Limpar"},{"language":"ES","value":"Claro"},{"language":"SV","value":"Klar"},{"language":"EN","value":"Clear"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelAppCacheTilesRun.setData([]);\nsetCacheAppCacheTilesRun();\n\n","translation":[]}]},{"fieldNo":"818ef90f-0166-4d2d-de9a-74ad8ef3e35d","fieldName":"lblAppCacheDelCache","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":405,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Local Data","script":"","translation":[{"language":"ZH","value":"本地数据"},{"language":"DA","value":"Lokale data"},{"language":"NL","value":"Lokale gegevens"},{"language":"FI","value":"Paikalliset tiedot"},{"language":"FR","value":"Données locales"},{"language":"DE","value":"Lokale Daten"},{"language":"IT","value":"Dati locali"},{"language":"JA","value":"ローカルデータ"},{"language":"NO","value":"Lokale data"},{"language":"PL","value":"Dane lokalne"},{"language":"PT","value":"Dados Locais"},{"language":"ES","value":"Datos locales"},{"language":"SV","value":"Lokala data"},{"language":"EN","value":"Local Data"}]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiMediumMarginBottom","script":"","translation":[]}]},{"fieldNo":"20f659ff-77ed-40b3-80ad-0e12005eef36","fieldName":"AppCacheButDeleteCache","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":406,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear","script":"","translation":[{"language":"ZH","value":"明确"},{"language":"DA","value":"Klar"},{"language":"NL","value":"Duidelijk"},{"language":"FI","value":"Asia selvä"},{"language":"FR","value":"Clair"},{"language":"DE","value":"Zurücksetzen"},{"language":"IT","value":"Chiaro"},{"language":"JA","value":"クリア"},{"language":"NO","value":"Slett"},{"language":"PL","value":"Jasny"},{"language":"PT","value":"Limpar"},{"language":"ES","value":"Claro"},{"language":"SV","value":"Klar"},{"language":"EN","value":"Clear"}]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"AppCache.RemoveAllCache();\nlocation.reload();","translation":[]}]},{"fieldNo":"b0f7318f-d4a5-46c4-cec6-142e1c3b5275","fieldName":"lblAppCacheLockScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":407,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Lock Screens","script":"","translation":[]}]},{"fieldNo":"605699e3-58c9-46b0-969b-47ab9b7c72a7","fieldName":"chkAppCacheLockScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":408,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Lock screens as in current state.","script":"","translation":[]},{"attribute":"selected","grouping":"Properties","value":"{/lockScreenChanges}","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\n\nconst lockScreensState = this.getSelected();\nconst disableScreenChangesState = chkAppCacheDisableScreenChanges.getSelected();\n\nchkAppCacheDisableScreenChanges.setEnabled(!lockScreensState);\nAppCacheUserActionEditScreen.setVisible(\n    !lockScreensState && !disableScreenChangesState\n);","language":"javascript","translation":[]}]},{"fieldNo":"0cb8c780-8b0c-46de-e085-46a5828a9e44","fieldName":"lblAppCacheDisableScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":409,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Screen Changes","script":"","translation":[{"language":"ZH","value":"屏幕变化"},{"language":"ZF","value":"屏幕變化"},{"language":"DA","value":"Skærmændringer"},{"language":"NL","value":"Schermveranderingen"},{"language":"FI","value":"Näytön muutokset"},{"language":"FR","value":"Changements d'écran"},{"language":"DE","value":"Bildschirmänderungen"},{"language":"IT","value":"Modifiche dello schermo"},{"language":"JA","value":"画面変更"},{"language":"NO","value":"Skjermendringer"},{"language":"PL","value":"Zmiany ekranu"},{"language":"PT","value":"Mudanças de tela"},{"language":"ES","value":"Cambios de pantalla"},{"language":"SV","value":"Skärmändringar"},{"language":"EN","value":"Screen Changes"}]}]},{"fieldNo":"4b1279c3-9fcf-435f-8b8c-dab322232f61","fieldName":"chkAppCacheDisableScreenChanges","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":410,"fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Disable to see standard screens.","script":"","translation":[]},{"attribute":"selected","grouping":"Properties","value":"{/disableScreenChanges}","script":"","translation":[]},{"attribute":"select","grouping":"Events","value":"Anonymous Function","script":"setCacheAppCacheDiaSettings();\n\nconst disableScreenChanges = this.getSelected();\nAppCacheUserActionEditScreen.setVisible(!disableScreenChanges);","language":"javascript","translation":[]}]},{"fieldNo":"d524efb0-0ddc-4ac1-e869-0990f1a0d270","fieldName":"lblClearCustomizations","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":411,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"00f467fe-6fe7-4330-9489-bf7b81cb94fb","fieldName":"btnClearCustomizations","fieldParent":"fe121fb3-fed8-4e24-c4b7-9dbecc6bd4d8","fieldPos":412,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Clear Customizations","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"sap.m.MessageBox.warning('Are you are sure, you want to clear all your customizations?', {\n    title: 'Clear Customizations',\n    actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n    emphasizedAction: sap.m.MessageBox.Action.YES,\n    onClose: function (sAction) {\n        if (sAction === sap.m.MessageBox.Action.YES) {\n            sap.n.Customization.clearCustomizations().then(() => {\n                sap.m.MessageBox.information('Please refresh to see your standard launchpad.', {\n                    icon: sap.m.MessageBox.Icon.SUCCESS,\n                    title: 'Customizations Cleared',\n                    actions: [sap.m.MessageBox.Action.OK],\n                    emphasizedAction: sap.m.MessageBox.Action.OK,\n                    onClose: function () {\n                        AppCache._Home();\n                        location.reload();\n                    },\n                })\n            });\n        }\n    }\n});\n","language":"javascript","translation":[]}]},{"fieldNo":"0554d14e-91bc-4b3c-975b-6370e963abb8","fieldName":"barSettingsSystem","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldPos":413,"fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"SYSTEM","script":"","translation":[{"language":"ZH","value":"系统"},{"language":"DA","value":"SYSTEM"},{"language":"NL","value":"SYSTEEM"},{"language":"FI","value":"SYSTEM"},{"language":"FR","value":"SYSTÈME"},{"language":"DE","value":"SYSTEM"},{"language":"IT","value":"SISTEMA"},{"language":"JA","value":"システム"},{"language":"NO","value":"SYSTEM"},{"language":"PL","value":"SYSTEM"},{"language":"PT","value":"SISTEMA"},{"language":"ES","value":"SISTEMA"},{"language":"SV","value":"SYSTEMET"},{"language":"EN","value":"SYSTEM"}]}]},{"fieldNo":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldName":"AppCacheTabVer","fieldParent":"0554d14e-91bc-4b3c-975b-6370e963abb8","fieldPos":414,"fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showSeparators","grouping":"Properties","value":"None","script":"","translation":[]}]},{"fieldNo":"47d0b0ad-9f91-4abb-9169-9f0796b92401","fieldName":"AppCacheColVerKey","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldPos":415,"fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"16f89b56-a7fb-4952-8e58-4a8cee2567ab","fieldName":"AppCacheColVerValue","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldPos":416,"fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"hAlign","grouping":"Properties","value":"Right","script":"","translation":[]}]},{"fieldNo":"e388208d-08cc-452b-8128-6123fede0479","fieldName":"AppCacheItemVer","fieldParent":"d6566ae4-2b3a-4403-b8a9-4656abea099e","fieldPos":417,"fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2a3bbc7a-83ed-4b4f-e56d-84736d85ad3c","fieldName":"AppCacheTxtVerKey","fieldParent":"e388208d-08cc-452b-8128-6123fede0479","fieldPos":418,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{key}","script":"","translation":[]}]},{"fieldNo":"dd347f1b-a73a-4798-dd1b-0c337e98cea0","fieldName":"AppCacheTxtVerValue","fieldParent":"e388208d-08cc-452b-8128-6123fede0479","fieldPos":419,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{value}","script":"","translation":[]}]},{"fieldNo":"793982cb-fc7b-428c-f59c-cdfe713dad2c","fieldName":"barSettingsApps","fieldParent":"f833ec93-7c71-4aa9-bbbb-363e1ada5201","fieldPos":420,"fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"APPS","script":"","translation":[{"language":"PL","value":"APLIKACJE"},{"language":"EN","value":"APPS"}]}]},{"fieldNo":"4e11d723-ba6e-49bc-8dae-857ac3647581","fieldName":"scrollAppData","fieldParent":"793982cb-fc7b-428c-f59c-cdfe713dad2c","fieldPos":421,"fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"560px","script":"","translation":[]}]},{"fieldNo":"775bf113-a748-4ff6-dcce-a022e795b49a","fieldName":"AppCacheData","fieldParent":"4e11d723-ba6e-49bc-8dae-857ac3647581","fieldPos":422,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"mode","grouping":"Properties","value":"Delete","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"let deleteItem = oEvent.getParameter('listItem');\r\nlet context = deleteItem.getBindingContext();\r\nlet data = context.getObject();\r\n\r\nModelData.Delete(AppCacheData, ['application', 'language', 'appPath'], [data.application, data.language, data.appPath]);\r\nsetCacheAppCacheData();","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]}]},{"fieldNo":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldName":"AppCacheDataItem","fieldParent":"775bf113-a748-4ff6-dcce-a022e795b49a","fieldPos":423,"fieldType":"sap.m.ObjectListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{application}","script":"","translation":[]},{"attribute":"title","grouping":"Formatter","value":"string:UpperCase","script":"","translation":[]}]},{"fieldNo":"b8320cd6-3d45-4320-de90-6ebc1d4e5542","fieldName":"AppCacheDataSystem","fieldParent":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldPos":424,"fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{appPath}","script":"","translation":[]}]},{"fieldNo":"77bee33d-c96c-4756-f96b-af6cf22677f4","fieldName":"AppCacheDataDate","fieldParent":"06f599c0-f98f-4ee5-c12b-98d5db1f37b3","fieldPos":425,"fieldType":"sap.m.ObjectAttribute","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{updatedAt}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"Anonymous Function","script":"if (typeof updatedAt === 'undefined' || updatedAt === null || updatedAt === '') { return; }\r\n\r\nlet oDateFormat = sap.ui.core.format.DateFormat.getDateTimeInstance();\r\nif (updatedAt.length === 14) {\r\n    let oSAPFormat = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'yyyyMMddhhmmss' });\r\n    let oDate = oSAPFormat.parse(updatedAt);\r\n    return oDateFormat.format(new Date(oDate));\r\n}\r\n    \r\nreturn oDateFormat.format(new Date(updatedAt));","translation":[]}]},{"fieldNo":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldName":"diaMoveTile","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":426,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"resizable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"const { tileId } = modeldiaMoveTile.getData();\nconst tile = sap.n.Customization.getTile(tileId);\nconst heading = tile.title ?? tile.label;\ntitleMoveTile.setText(`${heading} - Move to Screen`);","language":"javascript","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"MoveTile.setSelectedItem(MoveTile.getItems()[0]);","script":"MoveTile.setSelectedItem(MoveTile.getItems()[0]);","translation":[]}]},{"fieldNo":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldName":"headerMoveTile","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldPos":427,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"d08e8d97-0ed7-457b-a752-4e95b614f50e","fieldName":"middle","fieldParent":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldPos":428,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}]},{"fieldNo":"7a4e8009-03ff-4f16-f57c-0b0e2d437b84","fieldName":"titleMoveTile","fieldParent":"d08e8d97-0ed7-457b-a752-4e95b614f50e","fieldPos":429,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to Screen","script":"","translation":[]}]},{"fieldNo":"e3fe2653-4094-4ebf-dffd-5d8fe2c1b01a","fieldName":"right","fieldParent":"110f2cde-4020-4c9c-bfdf-548e80d95fe7","fieldPos":430,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"4c51ee6f-7749-4d6b-fc45-42894d7be347","fieldName":"closeMoveTile","fieldParent":"e3fe2653-4094-4ebf-dffd-5d8fe2c1b01a","fieldPos":431,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaMoveTile.close();","script":"diaMoveTile.close();","translation":[]}]},{"fieldNo":"8563292a-b8ad-412e-f773-9cc3f48bfd59","fieldName":"MoveTile","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldPos":432,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"mode","grouping":"Properties","value":"SingleSelectLeft","script":"","translation":[]},{"attribute":"growingThreshold","grouping":"Properties","value":"200","script":"","translation":[]}]},{"fieldNo":"07b04180-5da8-4b65-dc40-3d6283e7aadb","fieldName":"itemMoveTile","fieldParent":"8563292a-b8ad-412e-f773-9cc3f48bfd59","fieldPos":433,"fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"{title}","script":"","translation":[]}]},{"fieldNo":"e783b371-28f2-4b33-cb5c-d71b5fc7fcf1","fieldName":"diaMoveTileButtons","fieldParent":"a9b480f3-2842-45d2-af30-5b2482e23781","fieldPos":434,"fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2bc45794-bbfd-4def-97d0-b73f174dbdb3","fieldName":"diaMoveTileAccept","fieldParent":"e783b371-28f2-4b33-cb5c-d71b5fc7fcf1","fieldPos":435,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Move to Screen","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const activeCategoryId = getActivePageCategoryId();\nconst { id: selectedCategoryId } = MoveTile.getSelectedItem().getBindingContext().getObject();\nif (selectedCategoryId === activeCategoryId) return;\n\nconst context = modeldiaMoveTile.getData();\nif (!context || Object.keys(context).length === 0) return;\n\nif (context.type === 'tile') {\n    const tileId = context.tileId;\n    const tileElm = document.getElementById(context.elmId);\n    \n    const currentContext = sap.n.Customization.findTileDragContext(tileId, tileElm);\n    sap.n.Customization.move('T', [...currentContext.parent, tileId], [selectedCategoryId], 0);\n\n    sap.ui.getCore().byId(context.elmId).destroy();\n\n    // destroy content of destination page and re-build it when user navigates to it\n    const matchPageId = `page${selectedCategoryId}`;\n    AppCacheNav.getPages().forEach((page) => {\n        if (page.sId === matchPageId) {\n            page.destroy();\n        }\n    });\n}\n\nmodeldiaMoveTile.setData({});\ndiaMoveTile.close();","language":"javascript","translation":[]}]},{"fieldNo":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldName":"diaPage","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":436,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"15266873-1987-4552-8b2e-9401f986199e","fieldName":"headerPage","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldPos":437,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"20bd665a-5ff5-4b8b-ed38-06e4796d21e1","fieldName":"middleHeaderPage","fieldParent":"15266873-1987-4552-8b2e-9401f986199e","fieldPos":438,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}]},{"fieldNo":"9885d3e7-79a4-488c-a8fe-c69a30901e9b","fieldName":"titlePage","fieldParent":"20bd665a-5ff5-4b8b-ed38-06e4796d21e1","fieldPos":439,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Screen","script":"","translation":[]}]},{"fieldNo":"6255f1ef-2325-4ff0-b0c5-4cab49e4f334","fieldName":"rightHeaderPage","fieldParent":"15266873-1987-4552-8b2e-9401f986199e","fieldPos":440,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"337ae755-20f6-4eb2-d296-a1ee9f91dfc5","fieldName":"closeHeaderPage","fieldParent":"6255f1ef-2325-4ff0-b0c5-4cab49e4f334","fieldPos":441,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaPage.close();","script":"diaPage.close();","translation":[]}]},{"fieldNo":"ffad8f97-97cb-44a9-dd1d-3746c36aef09","fieldName":"PageForm","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldPos":442,"fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[]},{"fieldNo":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldName":"pageVerticalLayout","fieldParent":"ffad8f97-97cb-44a9-dd1d-3746c36aef09","fieldPos":443,"fieldType":"sap.ui.layout.VerticalLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"99049ef6-c0d2-4abf-d5d4-2f1d1e85d3d6","fieldName":"lblPageMenuText","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":444,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Menu Title","script":"","translation":[]},{"attribute":"required","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"8c286b23-51ba-4406-efbc-c4dab4300373","fieldName":"inPageMenuText","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":445,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/menuText}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const val = this.getValue();\nif (!val || val.trim().length === 0) {\n    this.setValueState('Error');\n    this.setValueStateText('Menu title is required.')\n    return;\n}\n\nthis.setValueState().setValueStateText('');\n","language":"javascript","translation":[]}]},{"fieldNo":"368ad425-92bb-483a-df11-727db58a38e4","fieldName":"lblPageTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":446,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Title","script":"","translation":[]},{"attribute":"required","grouping":"Properties","value":"true","script":"","translation":[]}]},{"fieldNo":"41212b22-2abb-4b60-e4e9-46930d472526","fieldName":"inPageTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":447,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/title}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const val = this.getValue();\nif (!val || val.trim().length === 0) {\n    this.setValueState('Error');\n    this.setValueStateText('Title is required.')\n    return;\n}\n\nthis.setValueState().setValueStateText('');\n","language":"javascript","translation":[]}]},{"fieldNo":"0cbccbed-0b85-4d3a-8efa-88ee70368f36","fieldName":"lblPageSubTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":448,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Subtitle","script":"","translation":[]}]},{"fieldNo":"208e2599-a538-411e-b470-5312b40da52b","fieldName":"inPageSubTitle","fieldParent":"cda693b2-6e3f-4c90-d1f4-8050f6a035c8","fieldPos":449,"fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/subTitle}","script":"","translation":[]}]},{"fieldNo":"3568c404-99b7-405f-af6f-27a05bff4735","fieldName":"diaPageButtons","fieldParent":"ec12662e-b471-44f3-9e0f-20e1d0c9c2e3","fieldPos":450,"fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"14e027ea-e95f-4ac7-c5c6-68b5b486201d","fieldName":"diaPageSave","fieldParent":"3568c404-99b7-405f-af6f-27a05bff4735","fieldPos":451,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Save","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const data = modelPageForm.getData();\nconst { id, menuText, title } = data;\n\nif (\n    !title || title.trim().length === 0 ||\n    !menuText || menuText.trim().length === 0\n) {\n    sap.m.MessageToast.show('Required fields are missing.');\n    return;\n}\n\nif (id) {\n    sap.n.Customization.setPage(data);\n} else {\n    sap.n.Customization.addPage(data);\n}\n\nmodelPageForm.setData({});\ndiaPage.close();","language":"javascript","translation":[]}]},{"fieldNo":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldName":"diaManagePages","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":452,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"resizable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"horizontalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"Anonymous Function","script":"let movePageId, fromIndex, toIndex;\nconst elm = document.getElementById('ManagePages-listUl');\n\nconst activeCategoryId = getActivePageCategoryId();\n\nsap.n.DragDrop.restrictedTo(elm, (evt, ui) => {\n    const elm = ui.item.get(0);\n    if (!elm) return;\n    \n    fromIndex = ui.item.index();\n    movePageId = elm.querySelector('.managePagesId').innerText;\n}, (evt, ui) => {\n    if (!movePageId) return;\n    \n    toIndex = ui.item.index();\n    sap.n.Customization.move('TG', [movePageId], [], toIndex);\n    movePageId = null;\n    sap.n.Launchpad.BuildMenuTop();\n    sap.n.Launchpad.MarkTopMenu(activeCategoryId);\n});","language":"javascript","translation":[]}]},{"fieldNo":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldName":"headerManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldPos":453,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"design","grouping":"Properties","value":"Header","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"fd399478-960e-482f-add1-2a6abfea785f","fieldName":"headerManagePages","fieldParent":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldPos":454,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentMiddle","script":"","translation":[]}]},{"fieldNo":"d2e7ddce-a819-4c92-fbad-d47ce139a094","fieldName":"titleManagePages","fieldParent":"fd399478-960e-482f-add1-2a6abfea785f","fieldPos":455,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Manage Screens","script":"","translation":[]}]},{"fieldNo":"63423463-effc-44b9-a4eb-0f542c7794be","fieldName":"rightManagePages","fieldParent":"f92d87cc-e306-4e3d-bfea-078a311000a9","fieldPos":456,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"a9e11a25-e4e5-4b1b-c379-dfc3731fb1d9","fieldName":"closeManagePages","fieldParent":"63423463-effc-44b9-a4eb-0f542c7794be","fieldPos":457,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaManagePages.close();","script":"diaManagePages.close();","translation":[]}]},{"fieldNo":"f874d376-8f76-4418-9ed2-47e1951a04f9","fieldName":"messageStripManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldPos":458,"fieldType":"sap.m.MessageStrip","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Use Drag&Drop to sort screens","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepManagePagesMessageStrip","script":"","translation":[]}]},{"fieldNo":"1f8e26b2-2d86-4ce8-83f0-1ef320bf5a22","fieldName":"ManagePages","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldPos":459,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepManagePages","script":"","translation":[]},{"attribute":"growingThreshold","grouping":"Properties","value":"200","script":"","translation":[]}]},{"fieldNo":"41a57c63-fbd2-4f85-e6dd-f35195ae218c","fieldName":"listItemManagePages","fieldParent":"1f8e26b2-2d86-4ce8-83f0-1ef320bf5a22","fieldPos":460,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldName":"fbManagePages","fieldParent":"41a57c63-fbd2-4f85-e6dd-f35195ae218c","fieldPos":461,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMargin","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"Start","script":"","translation":[]}]},{"fieldNo":"07a182c1-c2e9-4512-acea-14d4eb20b620","fieldName":"icoSortManagePages","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldPos":462,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginEnd","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"icoSortManagePages","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://menu2","script":"","translation":[]}]},{"fieldNo":"4e418c40-4ee2-4bfc-e4bd-32b73194610a","fieldName":"lblManagePages","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldPos":463,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{title}","script":"","translation":[]}]},{"fieldNo":"5c2c678b-e815-43c4-9160-e8287243d441","fieldName":"hzManagePagesActions","fieldParent":"dba096c8-33f2-42a2-8036-6bc264ca8a3d","fieldPos":464,"fieldType":"sap.ui.layout.HorizontalLayout","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"hzManagePagesActions","script":"","translation":[]}]},{"fieldNo":"6e28e70f-31c0-4241-ce83-83adce877b07","fieldName":"lblManagePagesIdForDragDrop","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldPos":465,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{id}","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"managePagesId","script":"","translation":[]}]},{"fieldNo":"91830771-ad9d-4e25-f40a-97869762a5f7","fieldName":"iconManagePagesEdit","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldPos":466,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{isCustom}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://fa-solid/pencil-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"sap.n.Customization.Popover.onEditCustomPage(this.mProperties.fieldGroupIds[0]);","script":"sap.n.Customization.Popover.onEditCustomPage(this.mProperties.fieldGroupIds[0]);","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}]},{"fieldNo":"d36d9779-693d-4021-efed-2ca7776cbcc2","fieldName":"iconManagePagesDelete","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldPos":467,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=!${isCustom}}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"{= ${status} === 'active' ? 'sap-icon://fa-regular/eye' : 'sap-icon://fa-regular/eye-slash' }","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// standard page (Not a custom page)\nconst pageId = this.mProperties.fieldGroupIds[0];\nconst page = modelManagePages.getData().find(page => page.id === pageId);\nif (!page) {\n    console.log('cannot find page in, standard page (Not a custom page) delete operation');\n    return;\n}\n\nconst prevStatus = page.status;\n\n// update model\nmodelManagePages.setData(\n    modelManagePages.getData().map(page => {\n        if (page.id !== pageId) return page;\n        page.status = page.status === 'active' ? 'inactive' : 'active';\n        return page;\n    })\n);\n\n// re-enabling standard pages\nif (prevStatus === 'inactive') {\n    sap.n.Customization.Popover.onActivatePage(pageId);\n} else {\n    sap.n.Customization.Popover.onDeletePage(pageId);\n}","language":"javascript","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}]},{"fieldNo":"850d23eb-a775-4c68-ce27-d1b3b4546581","fieldName":"iconManagePagesTrash","fieldParent":"5c2c678b-e815-43c4-9160-e8287243d441","fieldPos":468,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{isCustom}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://fa-regular/trash-alt","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"// custom page\nconst pageId = this.mProperties.fieldGroupIds[0];\nmodelManagePages.setData(\n    modelManagePages.getData().map(page => {\n        if (page.id !== pageId) return page;\n        page.status = page.status === 'active' ? 'inactive' : 'active';\n        return page;\n    })\n);\nsap.n.Customization.Popover.onDeletePage(pageId);\n","language":"javascript","translation":[]},{"attribute":"fieldGroupIds","grouping":"Properties","value":"{id}","script":"","translation":[]}]},{"fieldNo":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldName":"diaManagePagesButtons","fieldParent":"d72bff79-4ff6-4408-d5dd-b31267b7b4e6","fieldPos":469,"fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"62569034-bb22-42c2-9b5c-f6715a52aeaa","fieldName":"diaManagePagesAddPage","fieldParent":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldPos":470,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add Screen","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"diaManagePages.close();\nsap.n.Customization.Popover.onAddCustomPage();","language":"javascript","translation":[]}]},{"fieldNo":"6a8167f7-1ac4-4e94-f598-cd56c343e2ef","fieldName":"diaManagePagesDone","fieldParent":"a0b93b0f-ce47-4003-e33a-98123c44bbc4","fieldPos":471,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Done","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelManagePages.setData([]);\ndiaManagePages.close();","language":"javascript","translation":[]}]},{"fieldNo":"40e34e80-5310-48ad-bb11-e66e58c90c8d","fieldName":"diaAddTileCloseBtn","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":472,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Close","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaAddTile.close();","script":"diaAddTile.close();","translation":[]}]},{"fieldNo":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldName":"diaAddTile","fieldParent":"2af20b8c-2c59-4dc5-e76a-6871398cb8b1","fieldPos":473,"fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"contentWidth","grouping":"Properties","value":"500px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"searchFieldAddTile.setValue('');","script":"searchFieldAddTile.setValue('');","translation":[]},{"attribute":"endButton","grouping":"Associations","value":"diaAddTileCloseBtn","script":"","translation":[]}]},{"fieldNo":"e65a2d92-3b18-4918-ad49-db78fe343c9c","fieldName":"diaAddTileHeaderBar","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldPos":474,"fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}]},{"fieldNo":"601ab763-61a6-4eaf-c471-7377c4efc3cd","fieldName":"diaAddTileHeaderBarRight","fieldParent":"e65a2d92-3b18-4918-ad49-db78fe343c9c","fieldPos":475,"fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}]},{"fieldNo":"b87e0940-495a-4c9f-c6d7-2c611d454676","fieldName":"diaAddTileHeaderCloseBtn","fieldParent":"601ab763-61a6-4eaf-c471-7377c4efc3cd","fieldPos":476,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaAddTile.close();","script":"diaAddTile.close();","translation":[]}]},{"fieldNo":"2bc263b2-5e05-4230-838f-4028941bded5","fieldName":"fbHeaderAddTile","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldPos":477,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"42cd2da0-2b6c-4bf1-dc81-6885249f2884","fieldName":"oFlexBox","fieldParent":"2bc263b2-5e05-4230-838f-4028941bded5","fieldPos":478,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]}]},{"fieldNo":"a056ca26-eae7-433d-9ef6-b37ae812f829","fieldName":"iconHeaderAddTile","fieldParent":"42cd2da0-2b6c-4bf1-dc81-6885249f2884","fieldPos":479,"fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"src","grouping":"Properties","value":"sap-icon://sap-ui5","script":"","translation":[]},{"attribute":"size","grouping":"Properties","value":"2.5rem","script":"","translation":[]}]},{"fieldNo":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldName":"oFlexBox1","fieldParent":"2bc263b2-5e05-4230-838f-4028941bded5","fieldPos":480,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}]},{"fieldNo":"750fc9a0-a573-4e64-84bc-bbfde052555b","fieldName":"titleAddTile","fieldParent":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldPos":481,"fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H2","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Application Finder","script":"","translation":[]}]},{"fieldNo":"52b43474-c749-41a1-f065-804758ab1dc9","fieldName":"subTitleAddTile","fieldParent":"43d34d84-ca57-4158-bc10-0c4cb60a06b3","fieldPos":482,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Search all available applications","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]}]},{"fieldNo":"de17ad42-9b5a-4b75-91ae-3a263d199359","fieldName":"diaAddTileToolbar","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldPos":483,"fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBottom","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"diaAddTileToolbar","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}]},{"fieldNo":"e7c33eb1-edff-44ae-cf95-202b0eb85b57","fieldName":"searchFieldAddTile","fieldParent":"de17ad42-9b5a-4b75-91ae-3a263d199359","fieldPos":484,"fieldType":"sap.m.SearchField","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"liveChange","grouping":"Events","value":"Anonymous Function","script":"const value = this.getValue().toLowerCase().trim();\nif (value.length === 0) {\n    modelAddTiles.setData(\n        modelAddTiles.getData().map(tile => {\n            tile.visible = true;\n            return tile;\n        })\n    );\n    return;\n}\n\nmodelAddTiles.setData(\n    modelAddTiles.getData().map(tile => {\n        const { title, subTitle } = tile;\n        tile.visible = false;\n        if (title && title.toLowerCase().includes(value) ||\n            subTitle && subTitle.toLowerCase().includes(value)) {\n            tile.visible = true;\n        }\n        return tile;\n    })\n);","language":"javascript","translation":[]}]},{"fieldNo":"b16b64cc-daef-4f6c-ba82-15e6ba423219","fieldName":"AddTiles","fieldParent":"73cef20f-a380-45f5-f250-77e5b93115f7","fieldPos":485,"fieldType":"sap.m.List","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[]},{"fieldNo":"0d4a664c-8021-4d68-d00e-e91357ab94f2","fieldName":"listItemAddTiles","fieldParent":"b16b64cc-daef-4f6c-ba82-15e6ba423219","fieldPos":486,"fieldType":"sap.m.CustomListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{visible}","script":"","translation":[]}]},{"fieldNo":"e15700a8-851a-47b6-b22a-d362056e1426","fieldName":"fbAddTilesListItem","fieldParent":"0d4a664c-8021-4d68-d00e-e91357ab94f2","fieldPos":487,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMargin","script":"","translation":[]},{"attribute":"justifyContent","grouping":"Properties","value":"SpaceBetween","script":"","translation":[]}]},{"fieldNo":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldName":"oFlexBox2","fieldParent":"e15700a8-851a-47b6-b22a-d362056e1426","fieldPos":488,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]}]},{"fieldNo":"97e74eff-b92f-4fc5-c54e-a1ce5fc8be60","fieldName":"titleAddTiles","fieldParent":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldPos":489,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{title}","script":"","translation":[]}]},{"fieldNo":"46f5c5a2-7f5d-4312-c205-126959994dba","fieldName":"subTitleAddTiles","fieldParent":"cd6ca800-467c-4d63-c132-4e5e567e4a3c","fieldPos":490,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{= ${subTitle} > 0 }","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{subTitle}","script":"","translation":[]}]},{"fieldNo":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldName":"oFlexBox3","fieldParent":"e15700a8-851a-47b6-b22a-d362056e1426","fieldPos":491,"fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"4d2a40a2-51da-414a-bbfe-12fac8084c92","fieldName":"lblTileIdForAddTile","fieldParent":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldPos":492,"fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{id}","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"addTileId","script":"","translation":[]}]},{"fieldNo":"afdbe9f5-edb4-42c9-bd80-3f836195f537","fieldName":"tileAddToTileGroup","fieldParent":"13ac941c-637b-4a8d-c341-cf3595c3734f","fieldPos":493,"fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let parent = oEvent.getSource().getDomRef();\nfor (; parent.nodeName !== 'LI'; parent = parent.parentElement);\nif (!parent) {\n    console.log('DialogAddTile: parent node not found');\n    return;\n}\n\nconst tileId = parent.querySelector('.addTileId').innerText.trim();\nconst tile = modelAddTiles.getData().find(tile => tile.id === tileId);\nif (!tile) {\n    console.log('DialogAddTile: on add, tile not found in model');\n    return;\n}\n\nsap.n.Customization.Popover.addTileFromDialog(tileId, tile.parent);\nmodelAddTiles.setData(\n    modelAddTiles.getData().filter(t => (t.id !== tile.id))\n);\n","language":"javascript","translation":[]}]},{"fieldNo":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldName":"Data","fieldParent":99999,"fieldPos":494,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"4fb5b3db-f6fb-4536-812e-ca429d71810b","fieldName":"Languages","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":495,"fieldType":"neptune.Script","script":"const masterLanguages = [\n    { 'ISOCODE': '', 'NAME': '' },\n    { 'ISOCODE': 'AF', 'NAME': 'Afrikaans' },\n    { 'ISOCODE': 'AR', 'NAME': 'Arabic' },\n    { 'ISOCODE': 'BG', 'NAME': 'Bulgarian' },\n    { 'ISOCODE': 'CA', 'NAME': 'Catalan' },\n    { 'ISOCODE': 'ZH', 'NAME': 'Chinese' },\n    { 'ISOCODE': 'ZF', 'NAME': 'Chinese trad.' },\n    { 'ISOCODE': 'HR', 'NAME': 'Croatian' },\n    { 'ISOCODE': 'CS', 'NAME': 'Czech' },\n    { 'ISOCODE': 'DA', 'NAME': 'Danish' },\n    { 'ISOCODE': 'NL', 'NAME': 'Dutch' },\n    { 'ISOCODE': 'EN', 'NAME': 'English' },\n    { 'ISOCODE': 'ET', 'NAME': 'Estonian' },\n    { 'ISOCODE': 'FI', 'NAME': 'Finnish' },\n    { 'ISOCODE': 'FR', 'NAME': 'French' },\n    { 'ISOCODE': 'DE', 'NAME': 'German' },\n    { 'ISOCODE': 'EL', 'NAME': 'Greek' },\n    { 'ISOCODE': 'HE', 'NAME': 'Hebrew' },\n    { 'ISOCODE': 'HU', 'NAME': 'Hungarian' },\n    { 'ISOCODE': 'IS', 'NAME': 'Icelandic' },\n    { 'ISOCODE': 'ID', 'NAME': 'Indonesian' },\n    { 'ISOCODE': 'IT', 'NAME': 'Italian' },\n    { 'ISOCODE': 'JA', 'NAME': 'Japanese' },\n    { 'ISOCODE': 'KO', 'NAME': 'Korean' },\n    { 'ISOCODE': 'LV', 'NAME': 'Latvian' },\n    { 'ISOCODE': 'LT', 'NAME': 'Lithuanian' },\n    { 'ISOCODE': 'MS', 'NAME': 'Malaysian' },\n    { 'ISOCODE': 'NO', 'NAME': 'Norwegian' },\n    { 'ISOCODE': 'PL', 'NAME': 'Polish' },\n    { 'ISOCODE': 'PT', 'NAME': 'Portuguese' },\n    { 'ISOCODE': 'RO', 'NAME': 'Rumanian' },\n    { 'ISOCODE': 'RU', 'NAME': 'Russian' },\n    { 'ISOCODE': 'SR', 'NAME': 'Serbian' },\n    { 'ISOCODE': 'SH', 'NAME': 'Serbian (Latin)' },\n    { 'ISOCODE': 'SK', 'NAME': 'Slovakian' },\n    { 'ISOCODE': 'SL', 'NAME': 'Slovenian' },\n    { 'ISOCODE': 'ES', 'NAME': 'Spanish' },\n    { 'ISOCODE': 'SV', 'NAME': 'Swedish' },\n    { 'ISOCODE': 'TH', 'NAME': 'Thai' },\n    { 'ISOCODE': 'TR', 'NAME': 'Turkish' },\n    { 'ISOCODE': 'UK', 'NAME': 'Ukrainian' }\n];","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"a9af9e72-12d5-40fb-8719-f4461a90e011","fieldName":"DataSettings","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":496,"fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"AppCache.setSettings();","script":"AppCache.setSettings();","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"LocalStorage","script":"","translation":[]},{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]}]},{"fieldNo":"c03d017e-5606-4045-8449-8b2f8fc7516c","fieldName":"AppCacheTiles","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":497,"fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"38c179dd-f009-4908-9e1e-6ec01c2f50c5","fieldName":"AppCacheTilesFav","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":498,"fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"d41371df-9bf0-43a1-fc4e-a1d539b8e21d","fieldName":"AppCacheTilesRun","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":499,"fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"d0eaf97d-30a6-4b2c-d580-934a02705f2c","fieldName":"AppCacheCategory","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":500,"fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"ec5b8fa5-6059-4dc7-926c-c689b125e940","fieldName":"AppCacheCategoryChild","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":501,"fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"8b675d10-c284-40c3-97af-0b76a38af065","fieldName":"AppCacheAppTimestamp","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":502,"fieldType":"neptune.model.object","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]}]},{"fieldNo":"1c76b3b8-1f22-431b-8c22-bc9979364652","fieldName":"AppCacheCustomization","fieldParent":"f9c6b141-66b7-4cff-b4c2-9c652c5a0dca","fieldPos":503,"fieldType":"neptune.model.object","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"setEnableCache","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheUserBased","grouping":"Model","value":"true","script":"","translation":[]},{"attribute":"setCacheType","grouping":"Model","value":"IndexedDB","script":"","translation":[]},{"attribute":"cacheInitLoadFinished","grouping":"Events","value":"cacheLoaded++;","script":"cacheLoaded++;","translation":[]}]},{"fieldNo":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldName":"Translation","fieldParent":99999,"fieldPos":504,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"eba3c643-6f3f-434c-8f5e-90ceef26a562","fieldName":"AppCache_tAdaptiveNotFound","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":505,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Adaptive Framework configuration not found","script":"","translation":[{"language":"PL","value":"Nie znaleziono konfiguracji Adaptive Framework"},{"language":"EN","value":"Adaptive Framework configuration not found"}]}]},{"fieldNo":"39396645-af8b-4344-e20e-3a4d02d2b233","fieldName":"AppCache_Fingerprint","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":506,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Login with Fingerprint","script":"","translation":[{"language":"ZH","value":"使用指纹登录"},{"language":"DA","value":"Log ind med fingeraftryk"},{"language":"NL","value":"Inloggen met een vingerafdruk"},{"language":"FI","value":"Kirjaudu sisään sormenjäljellä"},{"language":"FR","value":"Connexion avec empreinte digitale"},{"language":"DE","value":"Einloggen mit Fingerprint"},{"language":"IT","value":"Accedi con Fingerprint"},{"language":"JA","value":"指紋でログイン"},{"language":"NO","value":"Logg inn med Fingeravtrykk"},{"language":"PL","value":"Zaloguj się za pomocą odcisku palca"},{"language":"PT","value":"Faça o acesso com impressão digital"},{"language":"ES","value":"Iniciar sesión con huella digital"},{"language":"SV","value":"Logga in med fingeravtryck"},{"language":"EN","value":"Login with Fingerprint"}]}]},{"fieldNo":"c4c30591-5b7b-4474-e9d7-b9315495da0a","fieldName":"AppCache_tPhoneModel","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":507,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Model","script":"","translation":[{"language":"ZH","value":"手机型号"},{"language":"DA","value":"Telefonmodel"},{"language":"NL","value":"Telefoon model"},{"language":"FI","value":"Puhelimen malli"},{"language":"FR","value":"Modèle de téléphone"},{"language":"DE","value":"Geräte Modell"},{"language":"IT","value":"Modello del telefono"},{"language":"JA","value":"電話モデル"},{"language":"NO","value":"Telefonmodell"},{"language":"PL","value":"Model telefonu"},{"language":"PT","value":"Modelo de Celular"},{"language":"ES","value":"Modelo de teléfono"},{"language":"SV","value":"Telefonmodell"},{"language":"EN","value":"Phone Model"}]}]},{"fieldNo":"a93e0e44-1498-4ce8-9719-d3d4dad85864","fieldName":"AppCache_tSearchResult","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":508,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Search Result","script":"","translation":[{"language":"ZH","value":"搜索结果"},{"language":"DA","value":"Søgeresultat"},{"language":"NL","value":"Zoekresultaat"},{"language":"FI","value":"Hakutulos"},{"language":"FR","value":"Résultat de la recherche"},{"language":"DE","value":"Suchergebnis"},{"language":"IT","value":"Risultato della ricerca"},{"language":"JA","value":"検索結果"},{"language":"NO","value":"Søkeresultat"},{"language":"PL","value":"Wynik wyszukiwania"},{"language":"PT","value":"Resultado da pesquisa"},{"language":"ES","value":"Resultado de búsqueda"},{"language":"SV","value":"Sökresultat"},{"language":"EN","value":"Search Result"}]}]},{"fieldNo":"baaaa070-f7da-4c66-9a19-3ec14ffb19cb","fieldName":"AppCache_tPhoneType","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":509,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Type","script":"","translation":[{"language":"ZH","value":"电话类型"},{"language":"DA","value":"Telefontype"},{"language":"NL","value":"Telefoon type"},{"language":"FI","value":"Puhelintyyppi"},{"language":"FR","value":"Type de téléphone"},{"language":"DE","value":"Geräte Typ"},{"language":"IT","value":"Tipo di telefono"},{"language":"JA","value":"電話の種類"},{"language":"NO","value":"Telefontype"},{"language":"PL","value":"Rodzaj telefonu"},{"language":"PT","value":"Tipo de Celular"},{"language":"ES","value":"Tipo de telefono"},{"language":"SV","value":"Telefontyp"},{"language":"EN","value":"Phone Type"}]}]},{"fieldNo":"c919c54b-ae12-4d2d-963b-c009213d216a","fieldName":"AppCache_tPhoneVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":510,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Phone Version","script":"","translation":[{"language":"ZH","value":"电话版"},{"language":"DA","value":"Telefonversion"},{"language":"NL","value":"Telefoon versie"},{"language":"FI","value":"Puhelinversio"},{"language":"FR","value":"Version du téléphone"},{"language":"DE","value":"Geräte Version"},{"language":"IT","value":"Versione del telefono"},{"language":"JA","value":"電話番号"},{"language":"NO","value":"Telefonversjon"},{"language":"PL","value":"Wersja telefonu"},{"language":"PT","value":"Versão do Celular"},{"language":"ES","value":"Versión del teléfono"},{"language":"SV","value":"Telefonversion"},{"language":"EN","value":"Phone Version"}]}]},{"fieldNo":"f3549c57-928f-4f68-e0ba-5959b5508794","fieldName":"AppCache_tCordovaVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":511,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Cordova Version","script":"","translation":[{"language":"ZH","value":"科尔多瓦版"},{"language":"DA","value":"Cordova Version"},{"language":"NL","value":"Cordova-versie"},{"language":"FI","value":"Cordova-versio"},{"language":"FR","value":"Version Cordova"},{"language":"DE","value":"Cordova Version"},{"language":"IT","value":"Versione Cordova"},{"language":"JA","value":"コルドバ版"},{"language":"NO","value":"Cordova versjon"},{"language":"PL","value":"Wersja Cordova"},{"language":"PT","value":"Versão Cordova"},{"language":"ES","value":"Versión cordova"},{"language":"SV","value":"Cordova Version"},{"language":"EN","value":"Cordova Version"}]}]},{"fieldNo":"9c8d3bd4-9c18-42c3-bc91-bbb7a17713db","fieldName":"AppCache_tAppVersion","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":512,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App Version","script":"","translation":[{"language":"ZH","value":"应用版本"},{"language":"DA","value":"App Version"},{"language":"NL","value":"App versie"},{"language":"FI","value":"Sovellusversio"},{"language":"FR","value":"Version de l'application"},{"language":"DE","value":"App Version"},{"language":"IT","value":"Versione dell'app"},{"language":"JA","value":"アプリのバージョン"},{"language":"NO","value":"App Versjon"},{"language":"PL","value":"Wersja aplikacji"},{"language":"PT","value":"Versão do Aplicativo"},{"language":"ES","value":"Version de aplicacion"},{"language":"SV","value":"Appversion"},{"language":"EN","value":"App Version"}]}]},{"fieldNo":"f041fb8d-6dc3-4610-ac73-3b1eb8e1b3ca","fieldName":"AppCache_tNoConnection","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":513,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No connection","script":"","translation":[{"language":"ZH","value":"没联系"},{"language":"DA","value":"Ingen forbindelse"},{"language":"NL","value":"Geen connectie"},{"language":"FI","value":"Ei yhteyttä"},{"language":"FR","value":"Pas de connection"},{"language":"DE","value":"Keine Verbindung"},{"language":"IT","value":"Nessuna connessione"},{"language":"JA","value":"接続なし"},{"language":"NO","value":"Ingen forbindelse"},{"language":"PL","value":"Brak połączenia"},{"language":"PT","value":"Sem Ligação"},{"language":"ES","value":"Sin conexión"},{"language":"SV","value":"Ingen förbindelse"},{"language":"EN","value":"No connection"}]}]},{"fieldNo":"7af40ce3-f6bf-4841-e4ce-2b5e8db3ab76","fieldName":"AppCache_tUserLogout","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":514,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"User logged out","script":"","translation":[{"language":"ZH","value":"用户退出了"},{"language":"DA","value":"Bruger logget ud"},{"language":"NL","value":"Gebruiker uitgelogd"},{"language":"FI","value":"Käyttäjä kirjautui ulos"},{"language":"FR","value":"Utilisateur déconnecté"},{"language":"DE","value":"Benutzer abgemeldet"},{"language":"IT","value":"Utente disconnesso"},{"language":"JA","value":"ユーザーがログアウトしました"},{"language":"NO","value":"Bruker logget ut"},{"language":"PL","value":"Użytkownik wylogował się"},{"language":"PT","value":"Usuário Desconectado"},{"language":"ES","value":"Usuario desconectado"},{"language":"SV","value":"Användare loggad ut"},{"language":"EN","value":"User logged out"}]}]},{"fieldNo":"a9f8b956-bb00-4c0a-f05b-46ff8a7884e1","fieldName":"AppCache_tEnterUsename","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":515,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter usename","script":"","translation":[{"language":"ZH","value":"输入usename"},{"language":"DA","value":"Indtast brugernavn"},{"language":"NL","value":"Voer usename in"},{"language":"FI","value":"Anna käyttäjätunnus"},{"language":"FR","value":"Entrez le nom d'utilisateur"},{"language":"DE","value":"Nutzernamen eingeben"},{"language":"IT","value":"Inserisci il nome utente"},{"language":"JA","value":"usenameを入力してください"},{"language":"NO","value":"Skriv inn brukernavn"},{"language":"PL","value":"Wpisz nazwę użytkownika"},{"language":"PT","value":"Qual o nome do utilizador"},{"language":"ES","value":"Introduzca nombre de usuario"},{"language":"SV","value":"Ange användarnamn"},{"language":"EN","value":"Enter usename"}]}]},{"fieldNo":"66dac954-3069-4452-bc15-c53a23bac1fa","fieldName":"AppCache_tEnterPassword","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":516,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter password","script":"","translation":[{"language":"ZH","value":"输入密码"},{"language":"DA","value":"Indtast adgangskode"},{"language":"NL","value":"Voer wachtwoord in"},{"language":"FI","value":"Kirjoita salasana"},{"language":"FR","value":"Entrer le mot de passe"},{"language":"DE","value":"Passwort eingeben"},{"language":"IT","value":"Inserire la password"},{"language":"JA","value":"パスワードを入力する"},{"language":"NO","value":"Oppgi passord"},{"language":"PL","value":"Wprowadź hasło"},{"language":"PT","value":"Qual a senha"},{"language":"ES","value":"Introducir la contraseña"},{"language":"SV","value":"Skriv in lösenord"},{"language":"EN","value":"Enter password"}]}]},{"fieldNo":"582bfc0d-2fd8-4727-9463-60f617461d8f","fieldName":"AppCache_tEnterNewPasscode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":517,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enter new pin code","script":"","translation":[{"language":"ZH","value":"输入新的密码"},{"language":"DA","value":"Indtast ny pinkode"},{"language":"NL","value":"Voer een nieuwe pincode in"},{"language":"FI","value":"Anna uusi PIN-koodi"},{"language":"FR","value":"Entrez le nouveau code PIN"},{"language":"DE","value":"Neuen PIN eingeben"},{"language":"IT","value":"Inserisci un nuovo codice pin"},{"language":"JA","value":"新しいPINコードを入力"},{"language":"NO","value":"Skriv inn ny Pin-kode"},{"language":"PL","value":"Wprowadź nowy kod PIN"},{"language":"PT","value":"Insira o novo código PIN"},{"language":"ES","value":"Introduzca el nuevo código pin"},{"language":"SV","value":"Ange ny PIN-kod"},{"language":"EN","value":"Enter new pin code"}]}]},{"fieldNo":"0a122420-f0c8-4cbe-e81b-a893366ebe68","fieldName":"AppCache_tEnterRepeatPasscode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":518,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Repeat pin code","script":"","translation":[{"language":"ZH","value":"重复密码"},{"language":"DA","value":"Gentag PIN-kode"},{"language":"NL","value":"Herhaal pincode"},{"language":"FI","value":"Toista PIN-koodi"},{"language":"FR","value":"Répéter le code PIN"},{"language":"DE","value":"PIN wiederholen"},{"language":"IT","value":"Ripeti il codice pin"},{"language":"JA","value":"繰り返しPINコード"},{"language":"NO","value":"Gjenta Pin-koden"},{"language":"PL","value":"Powtórz kod PIN"},{"language":"PT","value":"Repetir o código PIN"},{"language":"ES","value":"Repetir codigo pin"},{"language":"SV","value":"Upprepa PIN-koden"},{"language":"EN","value":"Repeat pin code"}]}]},{"fieldNo":"6e827096-b2ff-4084-b601-d59cf6b64396","fieldName":"AppCache_tNoPasscodeMatch","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":519,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Pin code do not match","script":"","translation":[{"language":"ZH","value":"PIN码不匹配"},{"language":"DA","value":"Pin kode stemmer ikke overens"},{"language":"NL","value":"Pincode komt niet overeen"},{"language":"FI","value":"Pin-koodi ei vastaa"},{"language":"FR","value":"Le code PIN ne correspond pas"},{"language":"DE","value":"PIN inkorrekt"},{"language":"IT","value":"Il codice pin non corrisponde"},{"language":"JA","value":"PINコードが一致しません"},{"language":"NO","value":"Pin-koden stemmer ikke overens"},{"language":"PL","value":"Kod PIN nie pasuje"},{"language":"PT","value":"O código PIN não coincide"},{"language":"ES","value":"El código pin no coincide"},{"language":"SV","value":"PIN-kod matchar inte"},{"language":"EN","value":"Pin code do not match"}]}]},{"fieldNo":"6153fd1d-5817-439e-d636-7f2282bab517","fieldName":"AppCache_tNewPasswordNoMatch","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":520,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Passwords do not match","script":"","translation":[{"language":"ZH","value":"密码不匹配"},{"language":"DA","value":"adgangskoderne stemmer ikke overens"},{"language":"NL","value":"Wachtwoorden komen niet overeen"},{"language":"FI","value":"Salasanat eivät täsmää"},{"language":"FR","value":"Les mots de passe ne correspondent pas"},{"language":"DE","value":"Passwort inkorrekt"},{"language":"IT","value":"le passwords non corrispondono"},{"language":"JA","value":"パスワードが一致していません"},{"language":"NO","value":"passordene er ikke like"},{"language":"PL","value":"Hasła nie pasują do siebie"},{"language":"PT","value":"As senhas não coincidem"},{"language":"ES","value":"Las contraseñas no coinciden"},{"language":"SV","value":"Lösenorden matchar inte"},{"language":"EN","value":"Passwords do not match"}]}]},{"fieldNo":"f3ee0a15-4c89-4940-dd51-303c33c1b50d","fieldName":"AppCache_tPasscodeToShort","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":521,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Pin code to short, min chars","script":"","translation":[{"language":"ZH","value":"将代码固定为短，最小字符"},{"language":"DA","value":"Pin kode til korte, min tegn"},{"language":"NL","value":"Pincode voor korte, minimale tekens"},{"language":"FI","value":"Kytke koodi lyhyisiin, pieniin merkkijonoihin"},{"language":"FR","value":"Code PIN à court, min caractères"},{"language":"DE","value":"PIN zu kurz, mind. Zeichen"},{"language":"IT","value":"Codice PIN per caratteri brevi, min"},{"language":"JA","value":"ショートコードにピンコード、最小文字"},{"language":"NO","value":"Pin-koden er for kort, min tegn"},{"language":"PL","value":"Kod PIN na krótkie, min. Znaki"},{"language":"PT","value":"Código PIN demasiado curto, nr. carateres"},{"language":"ES","value":"Código pin a corto, min chars"},{"language":"SV","value":"Pin-kod till kort, mina tecken"},{"language":"EN","value":"Pin code too short, min digits"}]}]},{"fieldNo":"7a5825d2-1365-4048-f1ce-2cf8a8323aac","fieldName":"AppCache_tWrongResponse","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":522,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No valid APPLID or other Error","script":"","translation":[{"language":"ZH","value":"没有有效的APPLID或其他错误"},{"language":"DA","value":"Ingen gyldig APPLID eller anden fejl"},{"language":"NL","value":"Geen geldige APPLID of andere fout"},{"language":"FI","value":"Ei voimassa olevaa APPLID- tai muuta virhettä"},{"language":"FR","value":"Aucune demande valide ou autre erreur"},{"language":"DE","value":"APPLID ungültig oder anderer Fehler"},{"language":"IT","value":"Nessun APPLID valido o altro errore"},{"language":"JA","value":"有効なAPPLIDがない、またはその他のエラー"},{"language":"NO","value":"Ingen gyldig APPLI eller annen feil"},{"language":"PL","value":"Brak prawidłowego APPLID lub innego błędu"},{"language":"PT","value":"Nenhum APPLID válido ou outro erro"},{"language":"ES","value":"Ningún APPLID válido u otro error"},{"language":"SV","value":"Inget giltigt APPLI eller annat fel"},{"language":"EN","value":"No valid APPLID or other Error"}]}]},{"fieldNo":"3b8c35e1-7683-4f8d-c62c-bfbfd8020b74","fieldName":"AppCache_tWrongActivationCode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":523,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wrong Activation Code","script":"","translation":[{"language":"ZH","value":"错误的激活码"},{"language":"DA","value":"Forkert aktiveringskode"},{"language":"NL","value":"Foutieve activeringscode"},{"language":"FI","value":"Väärä aktivointikoodi"},{"language":"FR","value":"Mauvais code d'activation"},{"language":"DE","value":"Aktivierungscode inkorrekt"},{"language":"IT","value":"Codice di attivazione errato"},{"language":"JA","value":"間違ったアクティベーションコード"},{"language":"NO","value":"Feil aktiveringskode"},{"language":"PL","value":"Błędny kod aktywacyjny"},{"language":"PT","value":"Código de Ativação Errado"},{"language":"ES","value":"Código de activación incorrecto"},{"language":"SV","value":"Felaktiveringskod"},{"language":"EN","value":"Wrong Activation Code"}]}]},{"fieldNo":"6e00741b-81f5-489a-8d9c-588a5f5dc96c","fieldName":"AppCache_tWrongUserNamePass","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":524,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Wrong username/password","script":"","translation":[{"language":"ZH","value":"用户名/密码错误"},{"language":"DA","value":"Forkert brugernavn / kodeord"},{"language":"NL","value":"Verkeerde gebruikersnaam / wachtwoord"},{"language":"FI","value":"Väärä käyttäjätunnus / salasana"},{"language":"FR","value":"Nom d'utilisateur / mot de passe incorrect"},{"language":"DE","value":"Nutzername / Passwort inkorrekt"},{"language":"IT","value":"Nome utente / password errati"},{"language":"JA","value":"誤ったユーザー名/パスワード"},{"language":"NO","value":"Feil brukernavn / passord"},{"language":"PL","value":"Nieprawidłowa nazwa użytkownika / hasło"},{"language":"PT","value":"Nome de Usuário / senha incorretos"},{"language":"ES","value":"Nombre de usuario / contraseña incorrectos"},{"language":"SV","value":"Fel användarnamn / lösenord"},{"language":"EN","value":"Wrong username/password"}]}]},{"fieldNo":"db4a47c0-f81d-4a2c-9762-e9c62136c85e","fieldName":"AppCache_tErrorDownloading","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":525,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Error downloading new version","script":"","translation":[{"language":"ZH","value":"下载新版本时出错"},{"language":"DA","value":"Fejl ved download af ny version"},{"language":"NL","value":"Fout bij downloaden van nieuwe versie"},{"language":"FI","value":"Virhe ladattaessa uutta versiota"},{"language":"FR","value":"Erreur lors du téléchargement de la nouvelle version"},{"language":"DE","value":"Fehler beim Herunterladen der neuen Version"},{"language":"IT","value":"Errore durante il download della nuova versione"},{"language":"JA","value":"新しいバージョンのダウンロードエラー"},{"language":"NO","value":"Feil ved nedlasting av ny versjon"},{"language":"PL","value":"Błąd podczas pobierania nowej wersji"},{"language":"PT","value":"Erro ao baixar a nova versão"},{"language":"ES","value":"Error al descargar la nueva versión"},{"language":"SV","value":"Fel vid nedladdning av ny version"},{"language":"EN","value":"Error downloading new version"}]}]},{"fieldNo":"4e31c45d-f273-4de9-889d-3760c2753949","fieldName":"AppCache_tAppUpdated","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":526,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App updated. New logon required","script":"","translation":[{"language":"ZH","value":"应用已更新。需要重新登录"},{"language":"DA","value":"App opdateret. Ny logon kræves"},{"language":"NL","value":"App bijgewerkt. Nieuwe aanmelding vereist"},{"language":"FI","value":"Sovellus päivitettiin. Uusi sisäänkirjautuminen tarvitaan"},{"language":"FR","value":"App mis à jour. Nouvelle connexion requise"},{"language":"DE","value":"App aktualisiert. Neue Anmeldung erforderlich"},{"language":"IT","value":"App aggiornata. Nuovo accesso richiesto"},{"language":"JA","value":"アプリを更新しました。新しいログオンが必要です"},{"language":"NO","value":"App oppdatert. Ny pålogging kreves"},{"language":"PL","value":"Zaktualizowano aplikację. Wymagane nowe logowanie"},{"language":"PT","value":"Aplicativo atualizado. Novo logon necessário"},{"language":"ES","value":"Aplicación actualizada. Se requiere nuevo inicio de sesión"},{"language":"SV","value":"App uppdaterad. Ny inloggning krävs"},{"language":"EN","value":"App updated. New logon required"}]}]},{"fieldNo":"cab6a801-47b4-421c-f2cc-c81571c78a6b","fieldName":"AppCache_tNoCurrentConfig","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":527,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No Launchpad ID selected","script":"","translation":[{"language":"ZH","value":"未选择启动板ID"},{"language":"DA","value":"Ingen start-id blev valgt"},{"language":"NL","value":"Geen Launchpad-ID geselecteerd"},{"language":"FI","value":"Launchpad-tunnusta ei ole valittu"},{"language":"FR","value":"Aucun ID de Launchpad sélectionné"},{"language":"DE","value":"Keine Launchpad-ID ausgewählt"},{"language":"IT","value":"Nessun ID Launchpad selezionato"},{"language":"JA","value":"ランチパッドIDが選択されていません"},{"language":"NO","value":"Ingen Launchpad ID valgt"},{"language":"PL","value":"Nie wybrano identyfikatora Launchpad"},{"language":"PT","value":"Nenhum ID do Launchpad selecionado"},{"language":"ES","value":"No se ha seleccionado ninguna ID de Launchpad"},{"language":"SV","value":"Inget Launchpad ID valt"},{"language":"EN","value":"No Launchpad ID selected"}]}]},{"fieldNo":"2499dafc-8f59-4dc2-dcc5-e968e1a7c0a5","fieldName":"AppCache_tSessionTimeout","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":528,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Session timed out - please try again","script":"","translation":[{"language":"ZH","value":"会话超时 - 请再试一次"},{"language":"DA","value":"Session timed out - prøv igen"},{"language":"NL","value":"De sessie is afgelopen - probeer het opnieuw"},{"language":"FI","value":"Istuntoaika päättyi - yritä uudelleen"},{"language":"FR","value":"Session expirée - veuillez réessayer"},{"language":"DE","value":"Sitzung abgelaufen - bitte versuchen Sie es erneut"},{"language":"IT","value":"La sessione è scaduta, riprova"},{"language":"JA","value":"セッションがタイムアウトしました - もう一度やり直してください"},{"language":"NO","value":"Session timed out - prøv igjen"},{"language":"PL","value":"Upłynął limit czasu sesji - spróbuj ponownie"},{"language":"PT","value":"A sessão expirou - tente novamente"},{"language":"ES","value":"Tiempo de espera de sesión - por favor intente de nuevo"},{"language":"SV","value":"Sessionen slutade - försök igen"},{"language":"EN","value":"Session timed out - please try again"}]}]},{"fieldNo":"ed0c0b82-93f7-4af0-d6c8-966a86a48863","fieldName":"AppCache_tMaxFileSize","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":529,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"File is too large. Max file size is 200k","script":"","translation":[{"language":"ZH","value":"文件太大了。最大文件大小为200k"},{"language":"DA","value":"Filen er for stor. Maks filstørrelse er 200k"},{"language":"NL","value":"Bestand is te groot. Max bestandsgrootte is 200k"},{"language":"FI","value":"Tiedosto on liian suuri. Tiedoston enimmäiskoko on 200k"},{"language":"FR","value":"Le fichier est trop grand. La taille maximale du fichier est de 200 Ko"},{"language":"DE","value":"Datei ist zu groß. Max. Dateigröße beträgt 200 KB"},{"language":"IT","value":"Il file è troppo grande. La dimensione massima del file è 200k"},{"language":"JA","value":"ファイルが大きすぎます。最大ファイルサイズは200kです"},{"language":"NO","value":"Filen er for stor. Maks filstørrelse er 200k"},{"language":"PL","value":"Plik jest za duży. Maksymalny rozmiar pliku to 200 KB"},{"language":"PT","value":"O arquivo é muito grande. O tamanho máximo do arquivo é de 200k"},{"language":"ES","value":"El archivo es demasiado grande. El tamaño máximo del archivo es de 200k"},{"language":"SV","value":"Filen är för stor. Max filstorlek är 200k"},{"language":"EN","value":"File is too large. Max file size is 200k"}]}]},{"fieldNo":"1474a1a5-c0c7-441b-8516-5ad5400f14d3","fieldName":"AppCache_tAppNotFound","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":530,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"App not found or no policy","script":"","translation":[{"language":"ZH","value":"应用程序未找到或没有策略"},{"language":"DA","value":"App ikke fundet eller ingen politik"},{"language":"NL","value":"App niet gevonden of geen beleid"},{"language":"FI","value":"Sovellusta ei löytynyt tai sitä ei ole"},{"language":"FR","value":"App non trouvée ou pas de politique"},{"language":"DE","value":"App nicht gefunden oder keine Berechtigung"},{"language":"IT","value":"App non trovata o nessuna politica"},{"language":"JA","value":"アプリが見つからないか、ポリシーがありません"},{"language":"NO","value":"Appen ble ikke funnet eller ingen policy"},{"language":"PL","value":"Nie znaleziono aplikacji lub brak zasad"},{"language":"PT","value":"Aplicativo não encontrado ou sem política"},{"language":"ES","value":"Aplicación no encontrada o sin política"},{"language":"SV","value":"Appen hittades inte eller ingen policy"},{"language":"EN","value":"App not found or no policy"}]}]},{"fieldNo":"8da44d1d-8534-4ad6-9ffa-1072cfdd278b","fieldName":"AppCache_tNotification","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":531,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Notification","script":"","translation":[{"language":"ZH","value":"通知"},{"language":"DA","value":"Notifikation"},{"language":"NL","value":"Kennisgeving"},{"language":"FI","value":"ilmoitus"},{"language":"FR","value":"Notification"},{"language":"DE","value":"Benachrichtigung"},{"language":"IT","value":"Notifica"},{"language":"JA","value":"お知らせ"},{"language":"NO","value":"Melding"},{"language":"PL","value":"Powiadomienie"},{"language":"PT","value":"Notificação"},{"language":"ES","value":"Notificación"},{"language":"SV","value":"Underrättelse"},{"language":"EN","value":"Notification"}]}]},{"fieldNo":"3f2e3d36-9da6-4edb-bba5-bf330491fd6f","fieldName":"AppCache_tSentActivationCode","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":532,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Activation Code Sent","script":"","translation":[{"language":"ZH","value":"已发送激活码"},{"language":"DA","value":"Aktiveringskode sendt"},{"language":"NL","value":"Activeringscode verzonden"},{"language":"FI","value":"Aktivointikoodi lähetetty"},{"language":"FR","value":"Code d'activation envoyé"},{"language":"DE","value":"Aktivierungscode gesendet"},{"language":"IT","value":"Codice di attivazione inviato"},{"language":"JA","value":"アクティベーションコード送信"},{"language":"NO","value":"Aktiveringskode sendt"},{"language":"PL","value":"Wysłano kod aktywacyjny"},{"language":"PT","value":"Código de ativação enviado"},{"language":"ES","value":"Código de activación enviado"},{"language":"SV","value":"Aktiveringskod skickad"},{"language":"EN","value":"Activation Code Sent"}]}]},{"fieldNo":"6e1ab0fe-dba1-4998-827a-f4059b5f3e04","fieldName":"AppCache_txtNotLoaded","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":533,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Not loaded","script":"","translation":[{"language":"ZH","value":"没装"},{"language":"DA","value":"Ikke indlæst"},{"language":"NL","value":"Niet geladen"},{"language":"FI","value":"Ei ladattu"},{"language":"FR","value":"Pas chargé"},{"language":"DE","value":"Nicht geladen"},{"language":"IT","value":"Non caricato"},{"language":"JA","value":"読み込まれていない"},{"language":"NO","value":"Ikke lastet"},{"language":"PL","value":"Nie załadowano"},{"language":"PT","value":"Não carregado"},{"language":"ES","value":"Sin cargar"},{"language":"SV","value":"Inte laddad"},{"language":"EN","value":"Not loaded"}]}]},{"fieldNo":"b7389d05-5851-4f19-a716-cb457fdc5c43","fieldName":"AppCache_tEnableFingerprint","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":534,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Fingerprint Authentication?","script":"","translation":[{"language":"ZH","value":"启用指纹认证？"},{"language":"DA","value":"Aktivér fingerprinter-godkendelse?"},{"language":"NL","value":"Vingerafdrukverificatie inschakelen?"},{"language":"FI","value":"Ota sormenjälkitunnistus käyttöön?"},{"language":"FR","value":"Activer l'authentification d'empreinte digitale?"},{"language":"DE","value":"Fingerabdruck-Authentifizierung aktivieren?"},{"language":"IT","value":"Abilitare l'autenticazione dell'impronta digitale?"},{"language":"JA","value":"指紋認証を有効にしますか？"},{"language":"NO","value":"Aktiver fingeravtrykksautentisering?"},{"language":"PL","value":"Włączyć uwierzytelnianie odcisków palców?"},{"language":"PT","value":"Ativar autenticação de impressão digital?"},{"language":"ES","value":"¿Habilitar la autenticación de huellas digitales?"},{"language":"SV","value":"Aktivera fingeravtrycksautentisering?"},{"language":"EN","value":"Enable Fingerprint Authentication?"}]}]},{"fieldNo":"e65b4a8e-3d32-4e06-9a4a-f657ef311e80","fieldName":"AppCache_tEnableFaceId","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":535,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Enable Face-ID Authentication?","script":"","translation":[{"language":"ZH","value":"启用面部身份验证？"},{"language":"DA","value":"Aktivér ansigts-id-godkendelse?"},{"language":"NL","value":"Face-ID-verificatie inschakelen?"},{"language":"FI","value":"Ota käyttöön ID-tunnistus?"},{"language":"FR","value":"Activer l'authentification par visage?"},{"language":"DE","value":"Face-ID Authentifizierung aktivieren?"},{"language":"IT","value":"Abilitare l'autenticazione Face-ID?"},{"language":"JA","value":"顔ID認証を有効にしますか？"},{"language":"NO","value":"Aktiver ansikts-ID-godkjenning?"},{"language":"PL","value":"Włączyć uwierzytelnianie Face-ID?"},{"language":"PT","value":"Ativar autenticação Face-ID?"},{"language":"ES","value":"¿Habilitar la autenticación de ID de cara?"},{"language":"SV","value":"Aktivera ansikt-ID-autentisering?"},{"language":"EN","value":"Enable Face-ID Authentication?"}]}]},{"fieldNo":"f0ff7faf-a8d1-41d0-f682-c0ee23bc46ad","fieldName":"AppCache_tRestartForced","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":536,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"System settings received.","script":"","translation":[{"language":"ZH","value":"收到系统设置。"},{"language":"DA","value":"Systemindstillinger modtaget."},{"language":"NL","value":"Systeeminstellingen ontvangen."},{"language":"FI","value":"Järjestelmän asetukset on vastaanotettu."},{"language":"FR","value":"Paramètres système reçus."},{"language":"DE","value":"Systemeinstellungen erhalten"},{"language":"IT","value":"Impostazioni di sistema ricevute."},{"language":"JA","value":"システム設定を受信しました。"},{"language":"NO","value":"Systeminnstillinger mottatt."},{"language":"PL","value":"Otrzymano ustawienia systemowe."},{"language":"PT","value":"Configurações do sistema recebidas."},{"language":"ES","value":"Configuraciones del sistema recibidas."},{"language":"SV","value":"Systeminställningar mottagna."},{"language":"EN","value":"System settings received."}]}]},{"fieldNo":"69aece2a-08b3-4c88-c970-2bdf6819d890","fieldName":"AppCache_tOpen","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":537,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Open","script":"","translation":[{"language":"ZH","value":"打开"},{"language":"DA","value":"Åben"},{"language":"NL","value":"Open"},{"language":"FI","value":"Avata"},{"language":"FR","value":"Ouvrir"},{"language":"DE","value":"Öffnen"},{"language":"IT","value":"Aperto"},{"language":"JA","value":"開いた"},{"language":"NO","value":"Åpne"},{"language":"PL","value":"otwarty"},{"language":"PT","value":"Abrir"},{"language":"ES","value":"Abierto"},{"language":"SV","value":"Öppna"},{"language":"EN","value":"Open"}]}]},{"fieldNo":"d8e9b1a5-c0ae-436b-a967-7365ef325774","fieldName":"AppCache_tAddFav","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":538,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Add to favorite","script":"","translation":[{"language":"ZH","value":"加入我的最爱"},{"language":"DA","value":"Tilføj til favorit"},{"language":"NL","value":"Toevoegen aan favorieten"},{"language":"FI","value":"Lisää suosikkeihin"},{"language":"FR","value":"Ajouter aux Favoris"},{"language":"DE","value":"Zu Favoriten hinzufügen"},{"language":"IT","value":"Aggiungi ai favoriti"},{"language":"JA","value":"お気に入りに追加"},{"language":"NO","value":"Legg til i favoritter"},{"language":"PL","value":"Dodaj do ulubionych"},{"language":"PT","value":"Adicionar aos favoritos"},{"language":"ES","value":"Agregar a Favoritos"},{"language":"SV","value":"Lägg till som favorit"},{"language":"EN","value":"Add to favorite"}]}]},{"fieldNo":"5903fbe0-c019-4e63-8cf7-bb2d5019a1af","fieldName":"AppCache_tDelFav","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":539,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Delete from favorite","script":"","translation":[{"language":"ZH","value":"从收藏中删除"},{"language":"DA","value":"Slet fra favorit"},{"language":"NL","value":"Verwijderen van favoriet"},{"language":"FI","value":"Poista suosikista"},{"language":"FR","value":"Supprimer du favori"},{"language":"DE","value":"Aus Favoriten enfernen"},{"language":"IT","value":"Elimina dai preferiti"},{"language":"JA","value":"お気に入りから削除"},{"language":"NO","value":"Slett fra favoritter"},{"language":"PL","value":"Usuń z ulubionych"},{"language":"PT","value":"Excluir do favorito"},{"language":"ES","value":"Eliminar de favorito"},{"language":"SV","value":"Ta bort från favorit"},{"language":"EN","value":"Delete from favorite"}]}]},{"fieldNo":"b423f8c6-2812-4533-e7a2-529484fb3e37","fieldName":"AppCache_tHelp","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":540,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Help","script":"","translation":[{"language":"ZH","value":"从收藏中删除"},{"language":"DA","value":"Hjælp"},{"language":"NL","value":"Helpen"},{"language":"FI","value":"auta"},{"language":"FR","value":"Aidez-moi"},{"language":"DE","value":"Hilfe"},{"language":"IT","value":"Aiuto"},{"language":"JA","value":"お気に入りから削除"},{"language":"NO","value":"Hjelp"},{"language":"PL","value":"Wsparcie"},{"language":"PT","value":"Socorro"},{"language":"ES","value":"Ayuda"},{"language":"SV","value":"Hjälp"},{"language":"EN","value":"Help"}]}]},{"fieldNo":"8fb6e584-2686-4de3-93d0-29729b1d30e1","fieldName":"AppCache_tResize","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":541,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Resize","script":"","translation":[]}]},{"fieldNo":"09cc1170-1730-401b-cff2-71f9b943eed5","fieldName":"AppCache_tDelFavConfirm","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":542,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Do you want to remove this tile from your favorites ?","script":"","translation":[{"language":"ZH","value":"您想从收藏夹中删除此图块吗？"},{"language":"DA","value":"Vil du fjerne denne flise fra dine favoritter?"},{"language":"NL","value":"Wil je deze tegel van je favorieten verwijderen?"},{"language":"FI","value":"Haluatko poistaa tämän laatan suosikeistasi?"},{"language":"FR","value":"Voulez-vous supprimer cette vignette de vos favoris?"},{"language":"DE","value":"Möchten Sie diese Kachel aus Ihren Favoriten entfernen?"},{"language":"IT","value":"Vuoi rimuovere questa tessera dai tuoi preferiti?"},{"language":"JA","value":"あなたのお気に入りからこのタイルを削除しますか？"},{"language":"NO","value":"Vil du fjerne denne flisen fra favorittene dine?"},{"language":"PL","value":"Czy chcesz usunąć ten kafelek z ulubionych?"},{"language":"PT","value":"Quer remover este bloco de seus favoritos?"},{"language":"ES","value":"¿Quieres eliminar este mosaico de tus favoritos?"},{"language":"SV","value":"Vill du ta bort denna kakel från dina favoriter?"},{"language":"EN","value":"Do you want to remove this tile from your favorites ?"}]}]},{"fieldNo":"6f1d0aa8-5051-4d36-894b-0a36d71c46fa","fieldName":"AppCache_tFavTitle","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":543,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Favorite","script":"","translation":[{"language":"ZH","value":"您想从收藏夹中删除此图块吗？"},{"language":"DA","value":"Favorit"},{"language":"NL","value":"Favoriet"},{"language":"FI","value":"Suosikki"},{"language":"FR","value":"Favori"},{"language":"DE","value":"Favorit"},{"language":"IT","value":"Preferito"},{"language":"JA","value":"あなたのお気に入りからこのタイルを削除しますか？"},{"language":"NO","value":"Favoritt"},{"language":"PL","value":"Ulubiony"},{"language":"PT","value":"Favorito"},{"language":"ES","value":"Favorito"},{"language":"SV","value":"Favorit"},{"language":"EN","value":"Favorite"}]}]},{"fieldNo":"f1fc7eb3-d891-4a82-94b7-597c9859380b","fieldName":"AppCache_tFavConfirm","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":544,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Confirmation needed","script":"","translation":[{"language":"ZH","value":"您想从收藏夹中删除此图块吗？"},{"language":"DA","value":"Bekræftelse nødvendig"},{"language":"NL","value":"Bevestiging nodig"},{"language":"FI","value":"Vahvistus tarvitaan"},{"language":"FR","value":"Confirmation nécessaire"},{"language":"DE","value":"Bestätigung erforderlich"},{"language":"IT","value":"Conferma necessaria"},{"language":"JA","value":"あなたのお気に入りからこのタイルを削除しますか？"},{"language":"NO","value":"Bekreftelse nødvendig"},{"language":"PL","value":"Wymagane potwierdzenie"},{"language":"PT","value":"Confirmação necessária"},{"language":"ES","value":"Confirmación necesaria"},{"language":"SV","value":"Bekräftelse behövs"},{"language":"EN","value":"Confirmation needed"}]}]},{"fieldNo":"47fb3e99-1899-4636-b064-8ad1b6e3ba6a","fieldName":"AppCache_tDelFavRemove","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":545,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Yes, remove","script":"","translation":[{"language":"ZH","value":"是的，删除"},{"language":"DA","value":"Ja, fjern"},{"language":"NL","value":"Ja, verwijder"},{"language":"FI","value":"Kyllä, poista"},{"language":"FR","value":"Oui, enlever"},{"language":"DE","value":"Ja, entfernen"},{"language":"IT","value":"Sì, rimuovi"},{"language":"JA","value":"はい、削除します"},{"language":"NO","value":"Ja, fjern"},{"language":"PL","value":"Tak, usuń"},{"language":"PT","value":"Sim, remover"},{"language":"ES","value":"Si remover"},{"language":"SV","value":"Ja, ta bort"},{"language":"EN","value":"Yes, remove"}]}]},{"fieldNo":"a63636f4-e1da-4006-a381-5b4f304ea1d5","fieldName":"AppCache_tIncompatible","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":546,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Incompatible","script":"","translation":[{"language":"ZH","value":"不相容"},{"language":"DA","value":"Uforenelig"},{"language":"NL","value":"Onverenigbaar"},{"language":"FI","value":"yhteensopimaton"},{"language":"FR","value":"Incompatible"},{"language":"DE","value":"Inkompatibel"},{"language":"IT","value":"Incompatibile"},{"language":"JA","value":"相容れない"},{"language":"NO","value":"Uforenlig"},{"language":"PL","value":"Niekompatybilny"},{"language":"PT","value":"Incompatível"},{"language":"ES","value":"Incompatible"},{"language":"SV","value":"Oförenlig"},{"language":"EN","value":"Incompatible"}]}]},{"fieldNo":"4e67fdd6-62e7-46f5-ed4a-5ef98c192e3f","fieldName":"AppCache_tNoUserInfo","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":547,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"No stored user info found. Please re-login","script":"","translation":[{"language":"ZH","value":"不相容"},{"language":"DA","value":"Uforenelig"},{"language":"NL","value":"Onverenigbaar"},{"language":"FI","value":"yhteensopimaton"},{"language":"FR","value":"Incompatible"},{"language":"DE","value":"Inkompatibel"},{"language":"IT","value":"Incompatibile"},{"language":"JA","value":"相容れない"},{"language":"NO","value":"Uforenlig"},{"language":"PL","value":"Nie znaleziono zapisanych informacji o użytkowniku. Proszę zaloguj się ponownie"},{"language":"PT","value":"Incompatível"},{"language":"ES","value":"Incompatible"},{"language":"SV","value":"Oförenlig"},{"language":"EN","value":"No stored user info found. Please re-login"}]}]},{"fieldNo":"bf54fdb1-a0ac-405c-c65f-70dfc0c2403c","fieldName":"AppCache_tDownloading","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":548,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Downloading new version","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"K","value":"Downloader ny version..."},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"R","value":"Загрузка новой версии"},{"language":"S","value":"Descargando nueva versión"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"DA","value":"Downloader ny version"},{"language":"FR","value":"Téléchargement d'une nouvelle version"},{"language":"DE","value":"Neue Version herunterladen"},{"language":"IT","value":"Download nuova versione"},{"language":"NO","value":"Laster ned ny versjon"},{"language":"PL","value":"Pobieranie nowej wersji"},{"language":"PT","value":"Baixando nova versão"},{"language":"ES","value":"Descargando nueva versión"},{"language":"SV","value":"Nedladdning av ny version"},{"language":"EN","value":"Downloading new version"}]}]},{"fieldNo":"2b4188c3-1fee-4d9e-b9db-4353624dc0ba","fieldName":"AppCache_tPWAUpdate","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":549,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"New version available. Reload required","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"K","value":"Downloader ny version..."},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"R","value":"Загрузка новой версии"},{"language":"S","value":"Descargando nueva versión"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"PL","value":"Nowa wersja dostępna. Wymagane ponowne załadowanie"},{"language":"EN","value":"New version available. Reload required"}]}]},{"fieldNo":"d2e4cf32-6edf-4d0c-cf29-82669d6218de","fieldName":"AppCache_tPWAInfo","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":550,"fieldType":"sap.m.Text","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Update Available","script":"","translation":[{"language":"1","value":"下载新版本"},{"language":"D","value":"Neue Version wird geladen…"},{"language":"F","value":"Téléchargement d'une nouvelle version"},{"language":"K","value":"Downloader ny version..."},{"language":"O","value":"Laster ned ny versjon..."},{"language":"P","value":"Download da nova versão"},{"language":"R","value":"Загрузка новой версии"},{"language":"S","value":"Descargando nueva versión"},{"language":"W","value":"Изтегляне на нова версия"},{"language":"PL","value":"Dostępna aktualizacja"},{"language":"EN","value":"Update Available"}]}]},{"fieldNo":"d3a03661-29d8-4933-cccc-3eebafb31796","fieldName":"AppCache_Screen_Login","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":551,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Login","script":"","translation":[{"language":"PL","value":"Zaloguj sie"},{"language":"EN","value":"Login"}]}]},{"fieldNo":"0937e5fa-b68a-452b-c794-2872f71401e7","fieldName":"AppCache_Screen_PIN","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":552,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Set PIN Code","script":"","translation":[{"language":"PL","value":"Ustaw kod PIN"},{"language":"EN","value":"Set PIN Code"}]}]},{"fieldNo":"1aff3f71-8384-4c97-f145-a910fd2394c8","fieldName":"AppCache_Screen_PINEntry","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":553,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"PIN Code","script":"","translation":[{"language":"PL","value":"Kod PIN"},{"language":"EN","value":"PIN Code"}]}]},{"fieldNo":"704176cb-6989-49df-9dfe-a525d4b09525","fieldName":"AppCache_Screen_Users","fieldParent":"a4096929-0f8e-49c6-ba36-b136359e96b2","fieldPos":554,"fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Users","script":"","translation":[{"language":"NO","value":"Brukere"},{"language":"PL","value":"Użytkownicy"},{"language":"EN","value":"Users"}]}]},{"fieldNo":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldName":"Functions","fieldParent":99999,"fieldPos":555,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2db642c8-fb46-4eb8-cac8-2a297b6ff606","fieldName":"jquery","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":556,"fieldType":"neptune.Script","script":"jQuery.sap.require('sap.m.MessageBox');\njQuery.sap.require('jquery.sap.storage');\n\n// common jQuery funcs\nfunction serializeDataForQueryString(data) {\n    return jQuery.param(data);\n}\n\n/**\n * cordovaRequest is a proxy for jQuery.request\n * on mobile devices handling support for XHR, CORS and Cookies\n * \n * a Promise is returned which calls either success/resolve or error/reject method\n * \n * headers\n *  key: value\n */\nfunction cordovaRequest(opts) {\n    return new Promise((resolve, reject) => {\n        const url = new URL(opts.url);\n        const method = opts.type.toLowerCase();\n        let data = {};\n        let headers = {};\n        let params = {};\n\n        if (opts.headers && typeof headers === 'object') {\n            headers = opts.headers;\n        }\n\n        const { contentType } = opts;\n        if (contentType) {\n            headers['Content-Type'] = contentType;\n\n            if (contentType.includes('json')) {\n                cordova.plugin.http.setDataSerializer('json');\n            }\n        }\n\n        // we pass json as string into jQuery.request\n        if (typeof opts.data !== 'undefined') {\n            if (typeof opts.data === 'string') {\n                data = JSON.parse(opts.data);\n            } else if (typeof opts.data === 'object') {\n                data = opts.data;\n            }\n        }\n\n        // jQuery.request (success, error) functions we already pass as options\n        const { success, error } = opts;\n\n        for (const [key, value] of url.searchParams.entries()) {\n            params[key] = value;\n        }\n\n        // https://www.npmjs.com/package/cordova-plugin-advanced-http\n        cordova.plugin.http.sendRequest(\n            `${url.origin}${url.pathname}`,\n            {\n                params,\n                method,\n                data,\n                headers,\n            },\n            (res) => {\n                let result;\n                    if (typeof res.data !== 'undefined') {\n                        try {\n                            result = JSON.parse(res.data);\n                        } catch (e) {\n                            // if JSON is not parsed correctly. e.g. in case of OK being returned from server after correct login\n                            // we will just set result to res.data\n                            result = res.data;\n                        }\n                    }\n\n                success && success(result, 'success', {\n                    headers: res.headers,\n                    getResponseHeader: function (key) {\n                        return this.headers[key.toLowerCase()];\n                    }});\n                resolve(result);\n            },\n            (err) => {\n                // this is not a an error, but when the plugin parses 'OK'\n                // as response from p9 server from e.g. /user/logon/local\n                // json parsing fails, so we end up here\n                if (\n                    err.error &&\n                    err.error.includes('Unexpected identifier \"OK\"')\n                ) {\n                    success && success(err.error);\n                    resolve(err.error);\n                    return;\n                }\n\n                let result = {\n                    status: err.status,\n                };\n                if (typeof err.data !== 'undefined') {\n                    result.data = JSON.parse(err.data);\n                }\n\n                error && error(result, err.status);\n                reject(result, err.status);\n            },\n        );\n    });\n}\n\nfunction request(opts) {\n    if (typeof opts.url === undefined) throw new Error('request: no url provided for the request');\n    \n    // handling requests on cordova\n    if (\n        isCordova() &&\n        cordova.plugin &&\n        cordova.plugin.http\n    ) return cordovaRequest(opts);\n\n    return jQuery.ajax(Object.assign({}, opts));\n}\n\nfunction jsonRequest(opts) {\n    return request(\n        Object.assign({}, {\n            type: 'POST',\n            contentType: 'application/json',\n        }, opts)\n    );\n}\n\nfunction sapLoadLanguage(lang) {\n    return jQuery.sap.loadResource(`sap/ui/core/cldr/${lang}.json`, {\n        'async': true,\n        dataType: 'json',\n        failOnError: true,\n    });\n}\n\nfunction sapStorageGet(k) {\n    return jQuery.sap.storage(jQuery.sap.storage.Type.local).get(k);\n}\n\nfunction sapStoragePut(k, v) {\n    return jQuery.sap.storage(jQuery.sap.storage.Type.local).put(k, v);\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"65b87b65-78d9-4061-f36e-028a3e4c4f36","fieldName":"encryption","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":557,"fieldType":"neptune.Script","script":"function generatePBKDF2Key(phrase, salt) {\n    return CryptoJS.PBKDF2(phrase, salt, {\n        keySize: 256 / 32,\n        iterations: typeof AppCache.pincodeKeyIterations !== 'undefined' ? AppCache.pincodeKeyIterations : 10,\n    });\n}\n\nfunction encryptAES(msg, secret) {\n    return CryptoJS.AES.encrypt(msg, secret);\n}\n\nfunction decryptAES(encrypted, secret) {\n    const decrypted = CryptoJS.AES.decrypt(encrypted, secret);\n    return decrypted.toString(CryptoJS.enc.Utf8);\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"f93f4fed-7445-4133-d436-f934b7180c37","fieldName":"helpers","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":558,"fieldType":"neptune.Script","script":"function isTouchScreen() {\n    return sap.ui.Device.support.touch;\n}\n\nfunction isWidthGTE(width = 1000) {\n    return window.innerWidth >= width;\n}\n\nfunction nepPrefix() {\n    return `__nep`;\n}\n\nfunction hasNepPrefix(className) {\n    return className.startsWith(nepPrefix());\n}\n\nfunction nepId() {\n    return `${nepPrefix()}${ModelData.genID()}`;\n}\n\nfunction includesJSView(id) {\n    return id.includes('__jsview');\n}\n\nfunction sectionPrefix() {\n    return '__nepsection';\n}\n\nfunction isSection(id) {\n    return id.includes(sectionPrefix());\n}\n\nfunction closeContentNavigator() {\n    launchpadContentNavigator.setWidth('0px');\n}\n\n// AppCache Logging\nfunction appCacheLog(...args) {\n    if (AppCache.enableLogging) console.log(...args);\n}\n\nfunction appCacheError(args) {\n    if (AppCache.enableLogging) console.error(args);\n}\n\nfunction getFieldBindingText(field) {\n    const k = field.name;\n    return field.valueType ? `{${k}_value}` : `{${k}}`;\n}\n\nfunction setTextAndOpenDialogText(title, html) {\n    AppCacheText.setTitle(title);\n    document.getElementById('textDiv').innerHTML = html;\n    diaText.open();\n}\n\n// DOM\nfunction elById(id) {\n    return document.getElementById(id);\n}\n\nfunction querySelector(path) {\n    return document.querySelector(path);\n}\n\nfunction applyCSSToElmId(id, props) {\n    const el = elById(id);\n    if (!el) return;\n\n    Object.entries(props).forEach(function ([k, v]) {\n        el.style[k] = v;\n    });\n}\n\nfunction insertBeforeElm(el, newEl) {\n    if (!el || !newEl) return;\n    \n    const parent = el.parentNode;\n    parent.insertBefore(newEl, el);\n}\n\nfunction addClass(el, list) {\n    if (!el) return;\n\n    list.forEach(function (name) {\n        el.classList.add(name);\n    });\n}\n\nfunction removeClass(el, list) {\n    if (!el) return;\n\n    list.forEach(function (name) {\n        el.classList.remove(name);\n    });\n}\n\nfunction getStyle(el, name) { return el.style[name]; }\nfunction setStyle(el, name, value) { el.style[name] = value; }\n\nfunction getWidth(el) { return el ? el.offsetWidth : 0; }\nfunction getHeight(el) { return el ? el.offsetHeight : 0; }\n\nfunction setWidth(el, width) { return el && (el.style.width = `${width}px`); }\nfunction setHeight(el, height) { return el && (el.style.height = `${height}px`); }\n\nfunction hideChildren(elPath) {\n    const el = document.querySelector(elPath);\n    if (!el) return;\n\n    [].slice.call(el.children).forEach(function (child) {\n        child.style.display = 'none';\n    });\n}\n\nfunction appendStylesheetToHead(href) {\n    const link = document.createElement('link');\n    link.rel = 'stylesheet';\n    link.type = 'text/css';\n    link.href = href;\n    document.head.appendChild(link);\n}\n\nfunction appendIFrame(targetEl, params) {\n    const iframe = document.createElement('iframe');\n    Object.entries(params).forEach(function ([k, v]) {\n        iframe.setAttribute(k, v);\n    });\n    targetEl.appendChild(iframe);\n}\n\nfunction createStyle(cssText) {\n    const s = document.createElement('style');\n    s.appendChild(document.createTextNode(cssText))\n    return s;\n}\n\nfunction appendStyle(targetEl, style) {\n    if (!targetEl) return;\n    targetEl.appendChild(style);\n}\n\nfunction isRTL() {\n    return querySelector('html').getAttribute('dir').toLowerCase() === 'rtl';\n}\n\nfunction addCustomData(sapELm, list) {\n    for (const [key, value] of Object.entries(list)) {\n        sapELm.addCustomData(\n            new sap.ui.core.CustomData(undefined, {\n                key, value, writeToDom: true,\n            })\n        );\n    }\n}\n\nfunction getActivePageCategoryId() {\n    return AppCacheNav.getCurrentPage().getDomRef().dataset.categoryId;\n}\n\n// Launchpad issues\n\nfunction isLaunchpadNotFound(status) {\n    return status !== undefined && typeof status === 'string' && status.toLowerCase().includes('unable to find the launchpad');\n}\n\nfunction showLaunchpadNotFoundError(status) {\n    sap.m.MessageBox.show(status, {\n        title: 'Launchpad Error',\n        onClose: function (oAction) {\n            if (AppCache.isMobile) {\n                if (AppCache.enablePasscode) {\n                    AppCache.Lock();\n                } else {\n                    AppCache.Logout();\n                }\n            }\n        }\n    });\n}\n\nfunction setiOSPwaIcons() {\n    if (!sap.ui.Device.os.ios) {\n        return;\n    }\n    \n    jsonRequest({ type: 'GET', url: `${AppCache.Url}/public/launchpad/${AppCache.launchpadID}/pwa.json` }).then((data) => {\n        function setIcon(icon, href) {\n            document.querySelector(`link[rel='${icon}'`).setAttribute('href', href);\n        }\n\n        if (!data.icons.length) {\n            return;\n        }\n        \n        const src = data.icons[0].src;\n\n        setIcon('shortcut icon', src);\n        setIcon('icon', src);\n        setIcon('apple-touch-icon', src);\n    });\n}\n\nfunction setSelectedLoginType(type) {\n    localStorage.setItem('selectedLoginType', type);\n    AppCacheUserActionPassword.setVisible(type === 'local');\n}\n\nfunction clearSelectedLoginType() {\n    localStorage.removeItem('selectedLoginType');\n}\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"79bcd662-5175-4be8-c1f9-f2c740142f45","fieldName":"neptune.ElementQuery","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":559,"fieldType":"neptune.Script","script":"'undefined' == typeof neptune && (neptune = {}), neptune.ElementQuery = {\r\n    register: function (i, s) {\r\n        let t = new this._ElementQueryClass(s);\r\n        sap.ui.core.ResizeHandler.register(i, function (s) {\r\n            t.resize(i, s.size.width)\r\n        })\r\n    },\r\n    _ElementQueryClass: function (s) {\r\n        s = s || {}, this.isolate = s.isolate || !1, this.debug = s.debug || !1, this.debugCallback = s.debugCallback || function (s) { }, this.callback = s.callback || function (s) { }, this.prefix = s.prefix || 'nepCanvas', this.canvas = {\r\n            XXXXL: 8,\r\n            XXXL: 7,\r\n            XXL: 6,\r\n            XL: 5,\r\n            L: 4,\r\n            M: 3,\r\n            S: 2,\r\n            XS: 1\r\n        }, this.width = {\r\n            xxxlarge: 2360,\r\n            xxlarge: 1880,\r\n            xlarge: 1580,\r\n            large: 1280,\r\n            medium: 980,\r\n            small: 680,\r\n            xsmall: 380\r\n        }, this.size = 9, s.width && (this.width.xxxlarge = s.width.xxxlarge || this.width.xxxlarge, this.width.xxlarge = s.width.xxlarge || this.width.xxlarge, this.width.xlarge = s.width.xlarge || this.width.xlarge, this.width.large = s.width.large || this.width.large, this.width.medium = s.width.medium || this.width.medium, this.width.small = s.width.small || this.width.small, this.width.xsmall = s.width.xsmall || this.width.xsmall), this.resize = function (s, i) {\r\n            let t, e;\r\n            0 !== i && (this.size > this.canvas.XXXXL && i > this.width.xxxlarge || i > this.width.xxxlarge && this.size !== this.canvas.XXXXL ? t = this.canvas.XXXXL : i <= this.width.xxxlarge && i > this.width.xxlarge && this.size !== this.canvas.XXXL ? t = this.canvas.XXXL : i <= this.width.xxlarge && i > this.width.xlarge && this.size !== this.canvas.XXL ? t = this.canvas.XXL : i <= this.width.xlarge && i > this.width.large && this.size !== this.canvas.XL ? t = this.canvas.XL : i <= this.width.large && i > this.width.medium && this.size !== this.canvas.L ? t = this.canvas.L : i <= this.width.medium && i > this.width.small && this.size !== this.canvas.M ? t = this.canvas.M : i <= this.width.small && i > this.width.xsmall && this.size !== this.canvas.S ? t = this.canvas.S : i <= this.width.xsmall && this.size !== this.canvas.XS && (t = this.canvas.XS), t && (this.size = t, this.debug && console.log('Resizing: ' + s.getId() + ' to -> ' + this.size), s.removeStyleClass(this.prefix + 'Full'), s.removeStyleClass(this.prefix + 'XXXLarge'), s.removeStyleClass(this.prefix + 'XXLarge'), s.removeStyleClass(this.prefix + 'XLarge'), s.removeStyleClass(this.prefix + 'Large'), s.removeStyleClass(this.prefix + 'Medium'), s.removeStyleClass(this.prefix + 'Small'), s.removeStyleClass(this.prefix + 'XSmall'), this.isolate ? (e = this.getWidth(this.size), this.size < this.canvas.XXXXL ? s.addStyleClass(this.prefix + e) : s.addStyleClass(this.prefix + 'Full')) : e = this.addAllClasses(this.size, s), this.callback({\r\n                width: i,\r\n                size: e\r\n            })), this.debug && (console.log('Width of ' + s.getId() + ' -> ' + i), this.debugCallback({\r\n                width: i,\r\n                size: this.getWidth(this.size)\r\n            })))\r\n        }, this.addAllClasses = function (s, i) {\r\n            let t = 'XXXXLarge';\r\n            return s <= this.canvas.XXXL && (t = 'XXXLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.XXL && (t = 'XXLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.XL && (t = 'XLarge', i.addStyleClass(this.prefix + t)), s <= this.canvas.L && (t = 'Large', i.addStyleClass(this.prefix + t)), s <= this.canvas.M && (t = 'Medium', i.addStyleClass(this.prefix + t)), s <= this.canvas.S && (t = 'Small', i.addStyleClass(this.prefix + t)), s <= this.canvas.XS && (t = 'XSmall', i.addStyleClass(this.prefix + t)), t\r\n        }, this.getWidth = function (s) {\r\n            return 1 === s ? 'XSmall' : 2 === s ? 'Small' : 3 === s ? 'Medium' : 4 === s ? 'Large' : 5 === s ? 'XLarge' : 6 === s ? 'XXLarge' : 7 === s ? 'XXXLarge' : 'XXXXLarge'\r\n        }\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"99502fb7-e080-4f4b-e8eb-04af31d5bbbb","fieldName":"sap.n.Adaptive","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":560,"fieldType":"neptune.Script","script":"sap.n.Adaptive = {\r\n\r\n    configurations: {},\r\n    pages: {},\r\n    dialogs: {},\r\n\r\n    // Launchpad\r\n    initApp: function (report) {\r\n        sap.n.Shell.attachBeforeDisplay(function (data) {\r\n            if (localAppID !== 'ADAPTIVEDESIGNER') {\r\n                report.init(data, true);\r\n                return;\r\n            }\r\n\r\n            // Update Metadata\r\n            nwd.adaptive.loadMetaData(report.metadata);\r\n\r\n            let config = null;\r\n            // Handle BI Template - for 2-way binding\r\n            if (data.application === 'planet9_adaptive_bi') {\r\n                config = data;\r\n            } else {\r\n                config = JSON.parse(JSON.stringify(data));\r\n                config.settings.events = data.settings.events;\r\n            }\r\n            report.init(config, false);\r\n        });\r\n    },\r\n\r\n    run: function (config, appdata, method) {\r\n        return new Promise(function (resolve) {\r\n            // Check required fields\r\n            let valid = true;\r\n            if (method !== 'Get') {\r\n                const canBeValidated = config.settings.fieldsRun.filter(function ({ visible }) {\r\n                    return visible;\r\n                }).map(function ({ name }) {\r\n                    return name;\r\n                });\r\n                let requiredFields = config.settings.fieldsSel.filter(function ({ name, required }) {\r\n                    return required && canBeValidated.includes(name);\r\n                });\r\n                valid = sap.n.Adaptive.checkRequiredSel(requiredFields, appdata);\r\n            }\r\n            if (!valid) return resolve({ status: 'required' });\r\n\r\n            // New Record\r\n            if (method === 'Get' && !appdata) return resolve({});\r\n\r\n            // Script Startparameter\r\n            const s = config.settings;\r\n            const p = config.properties;\r\n            if (s && s.properties.report.scriptparam) appdata._startparam = s.properties.report.scriptparam;\r\n            if (p && p.report.scriptparam) appdata._startparam = p.report.scriptparam;\r\n\r\n            jsonRequest({\r\n                url: `${AppCache.Url}/api/functions/Adaptive/RunReport?report=${config.id}&method=${method}`,\r\n                data: JSON.stringify(appdata),\r\n                success: function (data) {\r\n                    if (method === 'Get') return resolve(Array.isArray(data) ? data[0] : data);\r\n                    resolve(data);\r\n                },\r\n                error: function (result, _status) {\r\n                    resolve(result);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    init: function (config) {\r\n        return new Promise(function (resolve) {\r\n            let reqData = {};\r\n\r\n            // Script Startparameter\r\n            const s = config.settings;\r\n            const p = config.properties;\r\n            if (s && s.properties.report.scriptparam) reqData._startparam = s.properties.report.scriptparam;\r\n            if (p && p.report.scriptparam) reqData._startparam = p.report.scriptparam;\r\n\r\n            jsonRequest({\r\n                url: AppCache.Url + '/api/functions/Adaptive/RunSelection?report=' + config.id,\r\n                data: JSON.stringify(reqData),\r\n                success: function (data) {\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    resolve(result);\r\n                }\r\n\r\n            });\r\n\r\n        });\r\n\r\n    },\r\n\r\n    navigation: function (navigation, appdata, events, id) {\r\n        if (!navigation) return;\r\n\r\n        let config, childPage;\r\n        switch (navigation.destinationType) {\r\n            case 'F':\r\n                sap.n.Adaptive.getConfig(navigation.destinationTargetF).then(function (data) {\r\n                    config = data;\r\n                    config.settings.data = JSON.parse(JSON.stringify(appdata));\r\n                    config.settings.events = events;\r\n                    config.settings.navigation = navigation;\r\n\r\n                    childPage = sap.n.Adaptive.navigate(data.application, config, navigation, id);\r\n                    if (navigation.openAs === 'P' && events.onNavigatePage) events.onNavigatePage(childPage);\r\n                    if (navigation.openAs === 'D' && events.onNavigateDialog) events.onNavigateDialog(childPage);\r\n\r\n                });\r\n                break;\r\n\r\n            case 'A':\r\n                config = {\r\n                    data: JSON.parse(JSON.stringify(appdata)),\r\n                    events,\r\n                }\r\n\r\n                childPage = sap.n.Adaptive.navigate(navigation.destinationTargetA, config, navigation, id);\r\n                if (navigation.openAs === 'P' && events.onNavigatePage) events.onNavigatePage(childPage);\r\n                if (navigation.openAs === 'D') childPage.open();\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n    },\r\n\r\n    navigate: function (pageName, config, navigation, id) {\r\n        if (!pageName) return;\r\n        if (!id) id = ModelData.genID();\r\n\r\n        pageName = pageName.toUpperCase();\r\n\r\n        let pageID;\r\n\r\n        // Open Navigation Destination\r\n        switch (navigation.openAs) {\r\n            case 'D':\r\n                pageID = pageName + '_' + id + '_D';\r\n                let title = navigation.dialogTitle || '';\r\n\r\n                if (navigation.dialogTitleFieldText) {\r\n                    if (navigation.dialogTitle) title += ` ${navigation.dialogTitleFieldText}`;\r\n                    else title = navigation.dialogTitleFieldText;\r\n                }\r\n\r\n                if (sap.n.Adaptive.dialogs[pageID] && sap.n.Adaptive.dialogs[pageID].getContent().length) {\r\n                    // Apply Changes to Dialog \r\n                    if (navigation.dialogHeight) sap.n.Adaptive.dialogs[pageID].setContentHeight(navigation.dialogHeight);\r\n                    if (navigation.dialogWidth) sap.n.Adaptive.dialogs[pageID].setContentWidth(navigation.dialogWidth);\r\n                    if (navigation.dialogTitle) sap.n.Adaptive.dialogs[pageID].setTitle(title);\r\n                    if (navigation.dialogIcon) sap.n.Adaptive.dialogs[pageID].setIcon(navigation.dialogIcon);\r\n\r\n                    if (navigation.dialogResize) {\r\n                        sap.n.Adaptive.dialogs[pageID].setResizable(navigation.dialogResize);\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].setResizable(false);\r\n                    }\r\n\r\n                    if (navigation.dialogHeader) {\r\n                        sap.n.Adaptive.dialogs[pageID].setShowHeader(navigation.dialogHeader);\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].setShowHeader(false);\r\n                    }\r\n\r\n                    if (navigation.dialogScrollHorizontal) {\r\n                        sap.n.Adaptive.dialogs[pageID].addStyleClass('nepScrollContent');\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].removeStyleClass('nepScrollContent');\r\n                    }\r\n\r\n                    sap.n.Adaptive.dialogs[pageID].setStretch(sap.n.Launchpad.isPhone());\r\n\r\n                    if (sap.n.Apps[pageID] && sap.n.Apps[pageID].beforeDisplay) {\r\n                        sap.n.Apps[pageID].beforeDisplay.forEach(function (data) {\r\n                            data(config);\r\n                        });\r\n                    }\r\n                } else {\r\n                    sap.n.Adaptive.dialogs[pageID] = new sap.m.Dialog({\r\n                        contentWidth: navigation.dialogWidth || '1024px',\r\n                        contentHeight: navigation.dialogHeight || '500px',\r\n                        stretch: sap.n.Launchpad.isPhone(),\r\n                        showHeader: navigation.dialogHeader || false,\r\n                        title: title,\r\n                        icon: navigation.dialogIcon,\r\n                        draggable: true,\r\n                        resizable: navigation.dialogResize || false,\r\n                        horizontalScrolling: false,\r\n                        beforeClose: function (oEvent) {\r\n                            if (sap.n.Adaptive.dialogs[pageID]._oManuallySetSize) {\r\n                                const s = sap.n.Adaptive.dialogs[pageID]._oManuallySetSize;\r\n                                sap.n.Adaptive.dialogs[pageID].setContentWidth(`${s.width}px`);\r\n                                sap.n.Adaptive.dialogs[pageID].setContentHeight(`${s.height}px`);\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (navigation.dialogScrollHorizontal) {\r\n                        sap.n.Adaptive.dialogs[pageID].addStyleClass('nepScrollContent');\r\n                    } else {\r\n                        sap.n.Adaptive.dialogs[pageID].removeStyleClass('nepScrollContent');\r\n                    }\r\n\r\n                    delete sap.n.Apps[pageID];\r\n\r\n                    AppCache.Load(pageName, {\r\n                        appGUID: pageID,\r\n                        parentObject: sap.n.Adaptive.dialogs[pageID],\r\n                        startParams: config,\r\n                    });\r\n                }\r\n\r\n                return sap.n.Adaptive.dialogs[pageID];\r\n\r\n            case 'S':\r\n                if (localAppID === 'ADAPTIVEDESIGNER') {\r\n                    sap.m.MessageToast.show('Sidepanel can only be displayed in Launchpad');\r\n                } else {\r\n                    let title = navigation.dialogTitle || '';\r\n                    if (navigation.dialogTitleFieldText) {\r\n                        if (navigation.dialogTitle) title += ` ${navigation.dialogTitleFieldText}`;\r\n                        else title = navigation.dialogTitleFieldText;\r\n                    }\r\n\r\n                    sap.n.Shell.loadSidepanel(pageName, title, {\r\n                        icon: navigation.dialogIcon,\r\n                        additionaltext: navigation.dialogSubTitle,\r\n                        appGUID: ModelData.genID(),\r\n                        startParams: config,\r\n                    });\r\n                }\r\n                return null;\r\n\r\n            default:\r\n                pageID = pageName + '_' + id + '_P';\r\n                if (sap.n.Adaptive.pages[pageID]) {\r\n                    if (sap.n.Apps[pageID] && sap.n.Apps[pageID].beforeDisplay) {\r\n                        sap.n.Apps[pageID].beforeDisplay.forEach(function (data) {\r\n                            data(config);\r\n                        });\r\n                    }\r\n                } else {\r\n                    sap.n.Adaptive.pages[pageID] = new sap.m.Page({\r\n                        showFooter: false,\r\n                        showHeader: false,\r\n                        enableScrolling: false\r\n                    });\r\n\r\n                    AppCache.Load(pageName, {\r\n                        appGUID: pageID,\r\n                        parentObject: sap.n.Adaptive.pages[pageID],\r\n                        startParams: config,\r\n                    });\r\n                }\r\n                return sap.n.Adaptive.pages[pageID];\r\n        }\r\n    },\r\n\r\n    buildForm: function (parent, config, appdata) {\r\n        try {\r\n            parent.destroyContent();\r\n\r\n            const props = config.settings.properties;\r\n            let form = new sap.ui.layout.form.SimpleForm({\r\n                layout: 'ResponsiveGridLayout',\r\n                editable: true,\r\n                columnsL: parseInt(props.form.columnsL) || 2,\r\n                columnsM: parseInt(props.form.columnsM) || 1,\r\n                labelSpanL: parseInt(props.form.labelSpanL) || 4,\r\n                labelSpanM: parseInt(props.form.labelSpanM) || 2,\r\n            });\r\n\r\n            if (props.form.enableCompact) {\r\n                form.addStyleClass('sapUiSizeCompact');\r\n            } else {\r\n                form.removeStyleClass('sapUiSizeCompact');\r\n            }\r\n\r\n            // Selection Fields\r\n            config.settings.fieldsSel.forEach(function (field) {\r\n                // Trigger new form\r\n                if (field.enableNewForm) {\r\n\r\n                    parent.addContent(form);\r\n                    form = new sap.ui.layout.form.SimpleForm({\r\n                        layout: 'ResponsiveGridLayout',\r\n                        editable: true,\r\n                        columnsL: parseInt(field.columnsL) || 2,\r\n                        columnsM: parseInt(field.columnsM) || 1,\r\n                        labelSpanL: parseInt(field.labelSpanL) || 4,\r\n                        labelSpanM: parseInt(field.labelSpanM) || 2,\r\n                    });\r\n\r\n                }\r\n\r\n                if (field.columnLabel) form.addContent(new sap.ui.core.Title({\r\n                    text: field.columnLabel,\r\n                    level: config.settings.properties.form.titleLevel || 'Auto'\r\n                }));\r\n\r\n                const { type, required, name } = field;\r\n                const fieldValue = `{AppData>/${name}}`;\r\n                const fieldValueState = `{AppData>/${name}ValueState}`;\r\n\r\n                switch (type) {\r\n                    case 'Editor':\r\n                        form.addContent(\r\n                            new sap.m.Label({\r\n                                required,\r\n                                text: sap.n.Adaptive.translateFieldLabel(field, config),\r\n                            })\r\n                        );\r\n\r\n                        let editorField = new sap.m.FlexBox({\r\n                            height: field.editorHeight || '400px',\r\n                            renderType: 'Bare',\r\n                            width: '100%',\r\n                            visible: field.visible,\r\n                        });\r\n\r\n                        try {\r\n                            sap.n.Adaptive.editor(editorField, {});\r\n                        } catch (e) {\r\n                            console.log(e);\r\n                        }\r\n\r\n                        field._editor = editorField.editor;\r\n                        field._editor.setEditable(field.editable);\r\n\r\n                        form.addContent(editorField);\r\n\r\n                        if (field.default) editorField.setState(field.default);\r\n                        break;\r\n\r\n                    case 'DatePicker':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.DatePicker({\r\n                                visible: field.visible,\r\n                                editable: field.editable,\r\n                                valueState: fieldValueState,\r\n                                dateValue: fieldValue,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'DateTimePicker':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.DateTimePicker({\r\n                                visible: field.visible,\r\n                                editable: field.editable,\r\n                                secondsStep: parseInt(field.dateTimePickerSecondsStep) || 1,\r\n                                minutesStep: parseInt(field.dateTimePickerMinutesStep) || 1,\r\n                                valueState: fieldValueState,\r\n                                dateValue: fieldValue,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'CheckBox':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.CheckBox({\r\n                                visible: field.visible,\r\n                                editable: field.editable,\r\n                                valueState: fieldValueState,\r\n                                selected: fieldValue,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'Switch':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.Switch({\r\n                                visible: field.visible,\r\n                                enabled: field.editable,\r\n                                state: fieldValue,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'MultiSelect':\r\n                    case 'MultiSelectLookup':\r\n                    case 'MultiSelectScript':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n\r\n                        let multiField = new sap.m.MultiComboBox({\r\n                            width: '100%',\r\n                            visible: field.visible,\r\n                            selectedKeys: fieldValue,\r\n                            placeholder: field.placeholder || '',\r\n                            valueState: fieldValueState,\r\n                            showSecondaryValues: true\r\n                        });\r\n\r\n                        if (field.items) field.items.sort(sort_by('text'));\r\n                        field.items.forEach(function (item) {\r\n                            multiField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text, additionalText: item.additionalText }));\r\n                        });\r\n\r\n                        form.addContent(multiField);\r\n                        break;\r\n\r\n                    case 'SingleSelect':\r\n                    case 'SingleSelectLookup':\r\n                    case 'SingleSelectScript':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n\r\n                        let singleField = new sap.m.ComboBox({\r\n                            width: '100%',\r\n                            visible: field.visible,\r\n                            editable: field.editable,\r\n                            placeholder: field.placeholder || '',\r\n                            selectedKey: fieldValue,\r\n                            valueState: fieldValueState,\r\n                            showSecondaryValues: true\r\n                        });\r\n                        form.addContent(singleField);\r\n\r\n                        singleField.addItem(new sap.ui.core.Item({ key: '', text: '', }));\r\n\r\n                        if (field.items) field.items.sort(sort_by('text'));\r\n                        field.items.forEach(function (item) {\r\n                            singleField.addItem(\r\n                                new sap.ui.core.ListItem({\r\n                                    key: item.key, text: item.text, additionalText: item.additionalText\r\n                                })\r\n                            );\r\n                        });\r\n                        break;\r\n\r\n                    case 'TextArea':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.TextArea({\r\n                                visible: field.visible,\r\n                                editable: field.editable,\r\n                                rows: parseInt(field.textAreaRows) || 2,\r\n                                placeholder: field.placeholder || '',\r\n                                valueState: fieldValueState,\r\n                                value: fieldValue,\r\n                                width: '100%'\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    default:\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required }));\r\n                        form.addContent(\r\n                            new sap.m.Input({\r\n                                visible: field.visible,\r\n                                editable: field.editable,\r\n                                type: field.inputType || 'Text',\r\n                                placeholder: field.placeholder || '',\r\n                                valueState: fieldValueState,\r\n                                value: fieldValue,\r\n                            })\r\n                        );\r\n                        break;\r\n                }\r\n            });\r\n\r\n            parent.addContent(form);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    buildTableFilter: function (parent, table, config, appdata, enableSearch, run) {\r\n        try {\r\n            parent.destroyContent();\r\n            if (!config) return;\r\n\r\n            let numFields = ModelData.Find(config.settings.fieldsSel, 'visible', true)\r\n            let numFilters = (numFields) ? numFields.length : 1;\r\n            if (enableSearch) numFilters++;\r\n\r\n            let columnsM = 2;\r\n            let columnsL = 2;\r\n\r\n            switch (numFilters) {\r\n                case 3:\r\n                case 5:\r\n                case 6:\r\n                case 7:\r\n                case 8:\r\n                    columnsL = 3;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            let form = new sap.ui.layout.form.SimpleForm({\r\n                layout: 'ColumnLayout',\r\n                editable: true,\r\n                labelSpanL: 12,\r\n                labelSpanM: 12,\r\n                columnsM: columnsM,\r\n                columnsL: columnsL,\r\n            });\r\n\r\n            if (config.settings.properties.form.enableCompact) {\r\n                form.addStyleClass('sapUiSizeCompact');\r\n            } else {\r\n                form.removeStyleClass('sapUiSizeCompact');\r\n            }\r\n\r\n            // Search\r\n            if (enableSearch) {\r\n\r\n                form.addContent(new sap.m.Label({\r\n                    text: sap.n.Adaptive.translateProperty('report', 'searchLabel', config),\r\n                    width: '100%'\r\n                }));\r\n\r\n                form.addContent(new sap.m.SearchField({\r\n                    placeholder: sap.n.Adaptive.translateProperty('report', 'searchPlaceholder', config),\r\n                    liveChange: function (oEvent) {\r\n                        let searchField = this;\r\n                        let filters = [];\r\n                        let bindingItems = table.getBinding('items');\r\n                        let fieldsFilter = ModelData.Find(config.settings.fieldsRun, 'enableFilter', true);\r\n\r\n                        fieldsFilter.forEach(function ({ name, valueType }) {\r\n                            filters.push(\r\n                                new sap.ui.model.Filter(valueType ? `${name}_value` : name, 'Contains', searchField.getValue()),\r\n                            );\r\n                        });\r\n\r\n                        bindingItems.filter([new sap.ui.model.Filter({\r\n                            filters: filters,\r\n                            and: false\r\n                        })]);\r\n\r\n                    }\r\n\r\n                }));\r\n\r\n            }\r\n\r\n            config.settings.fieldsSel.forEach(function (field) {\r\n                const { name, type } = field;\r\n                if (field.default) {\r\n                    if (['MultiSelect', 'MultiSelectLookup', 'MultiSelectScript'].includes(type)) {\r\n                        if (typeof field.default === 'object') {\r\n                            appdata[name] = field.default;\r\n                        } else {\r\n                            if (field.default.indexOf('[') > -1) {\r\n                                appdata[name] = JSON.parse(field.default);\r\n                            } else {\r\n                                appdata[name] = field.default;\r\n                            }\r\n                        }\r\n\r\n                    } else if (['Switch', 'CheckBox'].includes(type)) {\r\n                        if (field.default === 'true' || field.default === '1' || field.default === 'X') {\r\n                            appdata[name] = true;\r\n                        } else {\r\n                            delete appdata[name];\r\n                        }\r\n\r\n                    } else {\r\n                        appdata[name] = field.default;\r\n                    }\r\n                }\r\n                if (field.required) delete appdata[`${name}ValueState`];\r\n\r\n                const fieldValue = `{AppData>/${name}}`;\r\n                const fieldValueState = `{AppData>/${name}ValueState}`;\r\n\r\n                function onChange(_oEvent) {\r\n                    if (run) run();\r\n                }\r\n\r\n                switch (type) {\r\n                    case 'MultiSelect':\r\n                    case 'MultiSelectLookup':\r\n                    case 'MultiSelectScript':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n\r\n                        let multiField = new sap.m.MultiComboBox({\r\n                            width: '100%',\r\n                            visible: field.visible,\r\n                            selectedKeys: fieldValue,\r\n                            valueState: fieldValueState,\r\n                            showSecondaryValues: true,\r\n                            selectionChange: onChange,\r\n                        });\r\n\r\n                        if (field.items) {\r\n                            field.items.sort(sort_by('text'));\r\n                            field.items.forEach(function ({ key, text, additionalText }) {\r\n                                multiField.addItem(new sap.ui.core.ListItem({ key, text, additionalText }));\r\n                            });\r\n                        }\r\n\r\n                        form.addContent(multiField);\r\n                        break;\r\n\r\n                    case 'SingleSelect':\r\n                    case 'SingleSelectLookup':\r\n                    case 'SingleSelectScript':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n\r\n                        let singleField = new sap.m.ComboBox({\r\n                            width: '100%',\r\n                            visible: field.visible,\r\n                            selectedKey: fieldValue,\r\n                            valueState: fieldValueState,\r\n                            showSecondaryValues: true,\r\n                            change: onChange,\r\n                        });\r\n                        singleField.addItem(new sap.ui.core.Item({ key: '', text: '', }));\r\n\r\n                        if (field.items) {\r\n                            field.items.sort(sort_by('text'));\r\n                            field.items.forEach(function ({ key, text, additionalText }) {\r\n                                singleField.addItem(new sap.ui.core.ListItem({ key, text, additionalText }));\r\n                            });\r\n                        }\r\n\r\n                        form.addContent(singleField);\r\n                        break;\r\n\r\n                    case 'DateRange':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n                        form.addContent(\r\n                            new sap.m.DateRangeSelection({\r\n                                width: '100%',\r\n                                visible: field.visible,\r\n                                dateValue: fieldValue,\r\n                                secondDateValue: `{AppData>/${name}_end}`,\r\n                                valueState: fieldValueState,\r\n                                change: onChange,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'CheckBox':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n                        form.addContent(\r\n                            new sap.m.CheckBox({\r\n                                width: '100%',\r\n                                visible: field.visible,\r\n                                useEntireWidth: true,\r\n                                selected: fieldValue,\r\n                                valueState: fieldValueState,\r\n                                select: onChange,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    case 'Switch':\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n                        form.addContent(\r\n                            new sap.m.Switch({\r\n                                visible: field.visible,\r\n                                state: fieldValue,\r\n                                change: onChange,\r\n                            })\r\n                        );\r\n                        break;\r\n\r\n                    default:\r\n                        form.addContent(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), required: field.required }));\r\n                        form.addContent(\r\n                            new sap.m.SearchField({\r\n                                width: '100%',\r\n                                visible: field.visible,\r\n                                value: fieldValue,\r\n                                // valueState: fieldValueState,\r\n                                search: onChange,\r\n                            })\r\n                        );\r\n                        break;\r\n                }\r\n            });\r\n\r\n            parent.addContent(form);\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    translateFieldLabel: function (field, config) {\r\n        if (!config.language) return field.text;\r\n\r\n        const t = config.settings.translation;\r\n        if (t && t[config.language] && t[config.language].fieldCatalog[field.name]) {\r\n            return t[config.language].fieldCatalog[field.name]\r\n        }\r\n\r\n        return field.text;\r\n    },\r\n\r\n    translateProperty: function (parent, key, config) {\r\n\r\n        if (!config.language) return config.settings.properties[parent][key]\r\n\r\n        if (config.settings.translation && config.settings.translation[config.language] && config.settings.translation[config.language][parent][key]) {\r\n            return config.settings.translation[config.language][parent][key]\r\n        }\r\n        return config.settings.properties[parent][key];\r\n\r\n    },\r\n\r\n    buildTableColumns: function (table, config, events) {\r\n\r\n        try {\r\n\r\n            if (config.settings.properties.table.enableCompact) {\r\n                table.addStyleClass('sapUiSizeCompact');\r\n            } else {\r\n                table.removeStyleClass('sapUiSizeCompact');\r\n            }\r\n\r\n            try {\r\n                table.destroyColumns();\r\n            } catch (e) { }\r\n\r\n            let Column = new sap.m.ColumnListItem({ selected: '{_sel}' });\r\n\r\n            // Handle Item Press\r\n            if (config.settings.properties.report._navigationItemPress) {\r\n\r\n                Column.setType('Active');\r\n                Column.attachPress(function (oEvent) {\r\n\r\n                    let context = oEvent.oSource.getBindingContext();\r\n                    let columnData = context.getObject();\r\n\r\n                    if (config.settings.properties.report._navigationItemPress.dialogTitleField) {\r\n                        config.settings.properties.report._navigationItemPress.dialogTitleFieldText = columnData[config.settings.properties.report._navigationItemPress.dialogTitleField + '_value'] || columnData[config.settings.properties.report._navigationItemPress.dialogTitleField];\r\n                    }\r\n\r\n                    sap.n.Adaptive.navigation(config.settings.properties.report._navigationItemPress, columnData, events, table.sId)\r\n                });\r\n\r\n            }\r\n\r\n            // Build Columns\r\n            config.settings.fieldsRun.forEach(function (field) {\r\n                if (!field.visible) return;\r\n\r\n                let ColumnHeader = new sap.m.Column({\r\n                    width: field.width,\r\n                    minScreenWidth: field.minScreenWidth,\r\n                });\r\n\r\n                if (field.hAlign) ColumnHeader.setHAlign(field.hAlign);\r\n\r\n                // Enable Sum \r\n                if (field.enableSum && field.type === 'ObjectNumber') {\r\n                    let sumField = new sap.m.ObjectNumber({\r\n                        number: '{AppConfig>/settings/properties/table/_sum/' + field.name + '}',\r\n                        unit: '{AppConfig>/settings/properties/table/_sum/' + field.name + '_unit}',\r\n                    })\r\n                    ColumnHeader.setFooter(sumField);\r\n                }\r\n\r\n                let HBox = new sap.m.HBox();\r\n\r\n                HBox.addItem(new sap.m.Label({ text: sap.n.Adaptive.translateFieldLabel(field, config), wrapping: true }));\r\n\r\n                let enabled = true;\r\n                if (field.enableSort || field.enableGroup) {\r\n                    let ColumnButton = new sap.ui.core.Icon({\r\n                        src: 'sap-icon://slim-arrow-down',\r\n                        press: function (oEvent) {\r\n                            if (events.onHeaderClick) events.onHeaderClick(field, this);\r\n                        }\r\n                    });\r\n                    ColumnButton.addStyleClass('sapUiTinyMarginBegin');\r\n                    HBox.addItem(ColumnButton);\r\n                }\r\n\r\n                ColumnHeader.setHeader(HBox);\r\n\r\n                table.addColumn(ColumnHeader);\r\n\r\n                let newField = null;\r\n                let formatterProp = 'text';\r\n\r\n                const { name, type } = field;\r\n                switch (type) {\r\n                    case 'Link':\r\n                        const linkOpts = {\r\n                            text: getFieldBindingText(field),\r\n                            wrapping: field.wrapping || false,\r\n                            press: function (oEvent) {\r\n                                if (!field._navigation) return;\r\n\r\n                                let context = oEvent.oSource.getBindingContext();\r\n                                let columnData = context.getObject();\r\n\r\n                                // Sidepanel Lookup Text \r\n                                if (field._navigation.openAs === 'S') {\r\n                                    const dtf = field._navigation.dialogTitleField;\r\n                                    const fieldName = ModelData.FindFirst(config.settings.fieldsRun, 'name', dtf);\r\n                                    field._navigation.dialogTitleFieldText = fieldName.valueType ? columnData[`${dtf}_value`] : columnData[dtf];\r\n                                }\r\n\r\n                                // Add pressed fieldname\r\n                                events.objectPressed = name;\r\n                                sap.n.Adaptive.navigation(field._navigation, columnData, events, newField.sId)\r\n                            }\r\n                        }\r\n\r\n                        if (field.linkHrefType) {\r\n                            linkOpts.href = `{${name}_href}`;\r\n                            linkOpts.target = '_blank';\r\n                        }\r\n\r\n                        newField = new sap.m.Link(linkOpts);\r\n                        break;\r\n\r\n                    case 'ObjectNumber':\r\n                        formatterProp = 'number';\r\n                        const objNumOpts = {\r\n                            number: getFieldBindingText(field),\r\n                        };\r\n\r\n                        if (field.numberUnitType) objNumOpts.unit = `{${name}_unit}`;\r\n                        if (field.numberStateType) objNumOpts.state = `{${name}_state}`;\r\n\r\n                        newField = new sap.m.ObjectNumber(objNumOpts);\r\n\r\n                        if (field.numberUnitType && field.numberUnitFormatter) {\r\n                            let fieldName = `${name}_unit`;\r\n                            newField.bindProperty('unit', {\r\n                                parts: [fieldName],\r\n                                formatter: function (fieldName) {\r\n                                    if (typeof (fieldName) === 'undefined' || fieldName === null) return;\r\n                                    return sap.n.Adaptive.formatter(fieldName, field.numberUnitFormatter);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n\r\n                    case 'ObjectStatus':\r\n                        formatterProp = 'text';\r\n                        const objStatusOpts = {\r\n                            text: getFieldBindingText(field),\r\n                        };\r\n\r\n                        if (field.statusTitleType) objStatusOpts.title = `{${name}_title`;\r\n                        if (field.statusIconType) objStatusOpts.icon = `{${name}_icon`;\r\n                        if (field.statusStateType) objStatusOpts.state = `{${name}_state`;\r\n\r\n                        newField = new sap.m.ObjectStatus(objStatusOpts);\r\n\r\n                        if (field.statusTitleType && field.statusTitleFormatter) {\r\n                            let fieldName = `${name}_title`;\r\n                            newField.bindProperty('title', {\r\n                                parts: [fieldName],\r\n                                formatter: function (fieldName) {\r\n                                    if (typeof (fieldName) === 'undefined' || fieldName === null) return;\r\n                                    return sap.n.Adaptive.formatter(fieldName, field.statusTitleFormatter);\r\n                                }\r\n                            });\r\n                        }\r\n                        break;\r\n\r\n                    case 'CheckBox':\r\n                        newField = new sap.m.CheckBox({\r\n                            editable: false,\r\n                            selected: getFieldBindingText(field),\r\n                            wrapping: field.wrapping || false,\r\n                        })\r\n                        break;\r\n\r\n                    case 'Switch':\r\n                        newField = new sap.m.Switch({\r\n                            enabled: false,\r\n                            state: getFieldBindingText(field),\r\n                        })\r\n                        break;\r\n\r\n                    case 'Image':\r\n                        newField = new sap.m.Image({\r\n                            height: '32px',\r\n                            src: getFieldBindingText(field),\r\n                        })\r\n                        break;\r\n\r\n                    case 'Icon':\r\n                        newField = new sap.ui.core.Icon({\r\n                            src: getFieldBindingText(field),\r\n                        })\r\n                        break;\r\n\r\n                    case 'Input':\r\n                        newField = new sap.m.Input({\r\n                            value: getFieldBindingText(field),\r\n                        })\r\n                        break;\r\n\r\n                    default:\r\n                        newField = new sap.m.Text({\r\n                            text: getFieldBindingText(field),\r\n                            wrapping: field.wrapping || false,\r\n                        })\r\n                        break;\r\n                }\r\n\r\n                Column.addCell(newField);\r\n\r\n                // Formatter \r\n                if (field.formatter) {\r\n                    let fieldName = (field.valueType ? `${name}_value` : name);\r\n                    newField.bindProperty(formatterProp, {\r\n                        parts: [fieldName],\r\n                        formatter: function (fieldName) {\r\n                            if (typeof (fieldName) === 'undefined' || fieldName === null) return;\r\n                            return sap.n.Adaptive.formatter(fieldName, field.formatter);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            const t = config.settings.properties.table;\r\n\r\n            // Row Action 1\r\n            if (t.enableAction1) {\r\n                table.addColumn(\r\n                    new sap.m.Column({ width: t.action1Width || '' })\r\n                );\r\n                Column.addCell(\r\n                    new sap.m.Button({\r\n                        text: t.action1Text,\r\n                        icon: t.action1Icon,\r\n                        type: t.action1Type,\r\n                        press: function (oEvent) {\r\n                            if (!t._action1Nav) return;\r\n\r\n                            let context = oEvent.oSource.getBindingContext();\r\n                            let columnData = context.getObject();\r\n\r\n                            const k = t._action1Nav.dialogTitleField;\r\n                            if (k) {\r\n                                t._action1Nav.dialogTitleFieldText = columnData[`${k}_value`] || columnData[k];\r\n                            }\r\n\r\n                            sap.n.Adaptive.navigation(t._action1Nav, columnData, events, table.sId)\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Row Action 2\r\n            if (t.enableAction2) {\r\n                table.addColumn(\r\n                    new sap.m.Column({ width: t.action2Width || '' })\r\n                );\r\n                Column.addCell(\r\n                    new sap.m.Button({\r\n                        text: t.action2Text,\r\n                        icon: t.action2Icon,\r\n                        type: t.action2Type,\r\n                        width: t.action2Width || '',\r\n                        press: function (oEvent) {\r\n                            if (!t._action2Nav) return;\r\n\r\n                            let context = oEvent.oSource.getBindingContext();\r\n                            let columnData = context.getObject();\r\n\r\n                            const k = t._action2Nav.dialogTitleField;\r\n                            if (k) {\r\n                                t._action2Nav.dialogTitleFieldText = columnData[`${k}_value`] || columnData[k];\r\n                            }\r\n\r\n                            sap.n.Adaptive.navigation(t._action2Nav, columnData, events, table.sId)\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Row Action 3\r\n            if (t.enableAction3) {\r\n                table.addColumn(\r\n                    new sap.m.Column({ width: t.action3Width || '' })\r\n                );\r\n                Column.addCell(\r\n                    new sap.m.Button({\r\n                        text: t.action3Text,\r\n                        icon: t.action3Icon,\r\n                        type: t.action3Type,\r\n                        width: t.action3Width || '',\r\n                        press: function (oEvent) {\r\n                            if (!t._action3Nav) return;\r\n\r\n                            let context = oEvent.oSource.getBindingContext();\r\n                            let columnData = context.getObject();\r\n\r\n                            const k = t._action3Nav.dialogTitleField;\r\n                            if (k) {\r\n                                t._action3Nav.dialogTitleFieldText = columnData[`${k}_value`] || columnData[k];\r\n                            }\r\n\r\n                            sap.n.Adaptive.navigation(t._action3Nav, columnData, events, table.sId)\r\n                        }\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Table - Aggregation\r\n            table.bindAggregation('items', { path: '/', template: Column, templateShareable: false });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n    },\r\n\r\n    formatter: function (fieldName, formatter) {\r\n        let formatDate00 = sap.ui.core.format.DateFormat.getDateTimeInstance();\r\n        let formatDate01 = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'dd.MM.yyyy' });\r\n        let formatDate02 = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'mm-dd-yyyy' });\r\n        let formatDate03 = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'yyyy MMM' });\r\n        let formatDate04 = sap.ui.core.format.DateFormat.getDateTimeInstance({ pattern: 'yyyy QQ' });\r\n\r\n        let formatNumber01 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 0, minFractionDigits: 0, groupingEnabled: true, groupingSeparator: ' ' });\r\n        let formatNumber02 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 1, minFractionDigits: 1, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: ',' });\r\n        let formatNumber03 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 2, minFractionDigits: 2, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: ',' });\r\n        let formatNumber04 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 3, minFractionDigits: 3, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: ',' });\r\n        let formatNumber05 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 1, minFractionDigits: 1, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: '.' });\r\n        let formatNumber06 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 2, minFractionDigits: 2, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: '.' });\r\n        let formatNumber07 = sap.ui.core.format.NumberFormat.getFloatInstance({ maxFractionDigits: 3, minFractionDigits: 3, groupingEnabled: true, groupingSeparator: ' ', decimalSeparator: '.' });\r\n\r\n        switch (formatter) {\r\n\r\n            case 'date00':\r\n                return formatDate00.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case 'date01':\r\n                return formatDate01.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case 'date02':\r\n                return formatDate02.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case 'date03':\r\n                return formatDate03.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case 'date04':\r\n                return formatDate04.format(sap.n.Adaptive.getDate(fieldName));\r\n\r\n            case 'sapdate01':\r\n                return fieldName.substr(6, 2) + '.' + fieldName.substr(4, 2) + '.' + fieldName.substr(0, 4);\r\n\r\n            case 'sapdate02':\r\n                return fieldName.substr(4, 2) + '-' + fieldName.substr(6, 2) + '-' + fieldName.substr(0, 4);\r\n\r\n            case 'zero':\r\n                return fieldName.replace(/^0+/, '');\r\n\r\n            case 'uppercase':\r\n                return fieldName.toUpperCase();\r\n\r\n            case 'lowercase':\r\n                return fieldName.toLowerCase();\r\n\r\n            case 'number00':\r\n                return parseFloat(fieldName).toLocaleString();\r\n\r\n            case 'number01':\r\n                return formatNumber01.format(fieldName);\r\n\r\n            case 'number02':\r\n                return formatNumber02.format(fieldName);\r\n\r\n            case 'number03':\r\n                return formatNumber03.format(fieldName);\r\n\r\n            case 'number04':\r\n                return formatNumber04.format(fieldName);\r\n\r\n            case 'number05':\r\n                return formatNumber05.format(fieldName);\r\n\r\n            case 'number06':\r\n                return formatNumber06.format(fieldName);\r\n\r\n            case 'number07':\r\n                return formatNumber07.format(fieldName);\r\n\r\n            case 'file':\r\n                oFileSizeFormat = sap.ui.core.format.FileSizeFormat.getInstance({ binaryFilesize: false, decimals: 2 });\r\n                return oFileSizeFormat.format(fieldName);\r\n\r\n            default:\r\n                return fieldName;\r\n        }\r\n    },\r\n\r\n    getDate: function (dateValue) {\r\n        if (typeof dateValue === 'string' && dateValue.length === 13) return new Date(parseInt(dateValue));\r\n        return new Date(dateValue);\r\n    },\r\n\r\n    getConfig: function (id) {\r\n        return new Promise(function (resolve) {\r\n            if (localAppID !== 'ADAPTIVEDESIGNER') {\r\n                if (sap.n.Adaptive.configurations[id]) return resolve(sap.n.Adaptive.configurations[id]);\r\n            }\r\n\r\n            jsonRequest({\r\n                url: AppCache.Url + '/api/functions/Adaptive/Get',\r\n                data: JSON.stringify({ id: id }),\r\n                success: function (data) {\r\n                    sap.n.Adaptive.configurations[id] = data;\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    resolve(result);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    checkRequiredSel: function (fields, data) {\r\n        let valid = true;\r\n        fields.filter(function ({ required }) {\r\n            return required;\r\n        }).forEach(function ({ type, name, required }) {\r\n            const v = data[name];\r\n            const k = `${name}ValueState`;\r\n\r\n            data[k] = 'None';\r\n\r\n            if (!v) {\r\n                valid = false;\r\n                data[k] = 'Error';\r\n            }\r\n\r\n            if (['MultiSelect', 'MultiSelectLookup', 'MultiSelectScript'].includes(type) && v && !v.length) {\r\n                valid = false;\r\n                data[k] = 'Error';\r\n            }\r\n        });\r\n\r\n        // remove invalid state\r\n        if (valid) {\r\n            fields.filter(function ({ required }) {\r\n                return required;\r\n            }).forEach(function ({ name }) {\r\n                delete data[`${name}ValueState`];\r\n            });\r\n        }\r\n\r\n        return valid;\r\n    },\r\n\r\n    setDefaultData: function (config, metadata) {\r\n        if (!metadata) return;\r\n\r\n        const propReport = metadata.properties.report || [];\r\n        for (let key in propReport) {\r\n            let field = propReport[key];\r\n            if (typeof field.default !== 'undefined' && typeof config.settings.properties.report[key] === 'undefined') config.settings.properties.report[key] = field.default;\r\n        }\r\n\r\n        const propForm = metadata.properties.form || [];\r\n        for (let key in propForm) {\r\n            let field = propForm[key];\r\n            if (typeof field.default !== 'undefined' && typeof config.settings.properties.form[key] === 'undefined') config.settings.properties.form[key] = field.default;\r\n        }\r\n\r\n        const propTable = metadata.properties.table || [];\r\n        for (let key in propTable) {\r\n            let field = propTable[key];\r\n            if (typeof field.default !== 'undefined' && typeof config.settings.properties.table[key] === 'undefined') config.settings.properties.table[key] = field.default;\r\n        }\r\n    },\r\n\r\n    grouping: function (config, groupBy, oContext) {\r\n        let data = oContext.getObject();\r\n        let field = ModelData.FindFirst(config.settings.fieldsRun, 'name', groupBy);\r\n        let fieldName = (field.valueType ? field.name + '_value' : field.name);\r\n\r\n        if (field.formatter) return sap.n.Adaptive.formatter(data[fieldName], field.formatter);\r\n\r\n        return data[fieldName];\r\n    },\r\n\r\n    editor: function (obj, config) {\r\n        obj.editor = {\r\n            data: config.data || '',\r\n            editable: config.editable || false,\r\n            setData: function (data) {\r\n                this.data = data;\r\n                if (typeof obj.editor.sun !== 'undefined') {\r\n                    obj.editor.sun.setContents(this.data);\r\n                    obj.editor.sun.core.history.stack = [];\r\n                    obj.editor.sun.core.history.reset();\r\n                }\r\n            },\r\n            getData: function () {\r\n                return this.data;\r\n            },\r\n            onChange: config.onChange || function () { },\r\n            setEditable: function (status) {\r\n                this.editable = status;\r\n                if (typeof obj.editor.sun !== 'undefined') {\r\n                    if (this.editable) {\r\n                        obj.editor.sun.enabled();\r\n                    } else {\r\n                        obj.editor.sun.disabled();\r\n                    }\r\n                }\r\n            }\r\n        };\r\n\r\n        let id;\r\n\r\n        id = config.id || ModelData.genID();\r\n        let data = config.data || '';\r\n\r\n        obj.addStyleClass(id);\r\n\r\n        id = 'nepHtmlEditor-' + ModelData.genID();\r\n        obj.addStyleClass('nepHtmlEditor ');\r\n        obj.addStyleClass(id);\r\n        obj.addItem(new sap.ui.core.HTML(id, {}).setContent(`<textarea id=${id}></textarea>`));\r\n\r\n        function resizeEditor(el) {\r\n            if (!el) return;\r\n\r\n            const prefix = `.${id} .se-wrapper-inner.se-wrapper`;\r\n            const height = getHeight(el) - getHeight(querySelector('.se-toolbar.sun-editor-common')) - 32 - 4 - 2;\r\n            setHeight(querySelector(`${prefix}-wysiwyg.sun-editor-editable`), height);\r\n            setHeight(querySelector(`${prefix}-code`), height + 22);\r\n        }\r\n\r\n        obj.onAfterRendering = function () {\r\n            sap.ui.Device.resize.attachHandler(function (mParams) {\r\n                resizeEditor(obj.getDomRef());\r\n            });\r\n\r\n            let height = getHeight(obj.getDomRef()) - 250;\r\n            let createEditor = function () {\r\n                const buttonList = [\r\n                    ['undo', 'redo'],\r\n                    ['font', 'fontSize', 'formatBlock'],\r\n                    ['bold', 'underline', 'italic', 'fontColor', 'hiliteColor'],\r\n                    ['outdent', 'indent', 'align', 'horizontalRule', 'list', 'lineHeight'],\r\n                    ['table', 'link', 'image', 'video', 'audio'],\r\n                    ['showBlocks', 'removeFormat', 'codeView', 'fullScreen'],\r\n                ];\r\n\r\n                let editor = SUNEDITOR.create((document.getElementById(id) || id), {\r\n                    width: '100%',\r\n                    height: height,\r\n                    value: obj.editor.data,\r\n                    resizingBar: false,\r\n                    defaultStyle: 'font-family: cursive: font-size:14px',\r\n                    buttonList: config.buttonList || buttonList,\r\n                    font: ['Arial', 'Comic Sans MS', 'Courier New', 'Impact', 'Georgia', 'Tahoma', 'Trebuchet MS', 'Verdana'],\r\n                    attributesWhitelist: {\r\n                        'all': 'style',\r\n                        'img': 'src|style|data-rotatey|data-rotatex|data-index',\r\n                    }\r\n                });\r\n\r\n                editor.onBlur = function (e, core) {\r\n                    obj.editor.data = editor.getContents();\r\n                    obj.editor.onChange(obj.editor.data);\r\n                };\r\n\r\n                editor.onChange = function (e, core) {\r\n                    obj.editor.data = editor.getContents();\r\n                    obj.editor.onChange(obj.editor.data);\r\n                };\r\n\r\n                if (obj.editor.editable) {\r\n                    editor.enabled();\r\n                } else {\r\n                    editor.disabled();\r\n                }\r\n\r\n                obj.editor.sun = editor;\r\n\r\n                setTimeout(function () {\r\n                    resizeEditor(obj.getDomRef());\r\n                }, 1);\r\n            }\r\n\r\n            if (typeof SUNEDITOR !== 'object') {\r\n                let actions = [];\r\n                actions.push(sap.n.Adaptive.loadLibraryEditor());\r\n                Promise.all(actions).then(function (values) {\r\n                    createEditor();\r\n                });\r\n            } else {\r\n                createEditor();\r\n            }\r\n        };\r\n    },\r\n\r\n    loadLibraryEditor: function () {\r\n        return new Promise(function (resolve) {\r\n            appendStylesheetToHead('/public/editor/suneditor.min.css');\r\n\r\n            request({\r\n                type: 'GET',\r\n                url: '/public/editor/suneditor.min.js',\r\n                success: function (data) {\r\n                    resolve('OK');\r\n                },\r\n                error: function (jqXHR, textStatus, errorThrown) {\r\n                    resolve('ERROR');\r\n                },\r\n                dataType: 'script',\r\n                cache: true\r\n            });\r\n        });\r\n    }\r\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"0549ca33-0f90-47cf-dd6b-2dbd473b329b","fieldName":"sap.n.Ajax","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":561,"fieldType":"neptune.Script","script":"sap.n.Ajax = {\n    SuccessGetMenu: function () {\n        // Enhancement\n        if (sap.n.Enhancement.SuccessGetMenu) {\n            try {\n                sap.n.Enhancement.SuccessGetMenu();\n            } catch (e) {\n                appCacheError('Enhancement SuccessGetMenu ' + e);\n            }\n        }\n\n        let delRun = [];\n        let delFav = [];\n\n        // Check Most Run\n        Object.entries(modelAppCacheTilesRun.oData).forEach(function ([_, data]) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (!rec) {\n                delRun.push(data);\n            } else {\n                ModelData.Update(AppCacheTilesRun, 'id', rec.id, rec);\n            }\n        });\n\n        delRun.forEach(function (data) {\n            ModelData.Delete(AppCacheTilesRun, 'id', data.id);\n        });\n\n        modelAppCacheTilesFav.oData.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (!rec) delFav.push(data);\n        });\n\n        delFav.forEach(function (data) {\n            ModelData.Delete(AppCacheTilesFav, 'id', data.id);\n        });\n\n        // Save Run/Fav\n        setCacheAppCacheTilesRun();\n        setCacheAppCacheTilesFav();\n\n        if (delRun.length) sap.n.Launchpad.handleFavRedraw();\n\n        // Check for rebuilding menu\n        let rebuild = false;\n\n        // Tiles - Check last update\n        Array.isArray(currTiles) && currTiles.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // Category - Check last update\n        Array.isArray(currCategory) && currCategory.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // Category Child - Check last update\n        Array.isArray(currCategoryChild) && currCategoryChild.forEach(function (data) {\n            let rec = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\n            if (rec) {\n                if (data.updatedAt !== rec.updatedAt) rebuild = true;\n            } else {\n                rebuild = true;\n            }\n        });\n\n        // New/Deleted\n        if (currTiles.length !== modelAppCacheTiles.oData.length) rebuild = true;\n        if (currCategory.length !== modelAppCacheCategory.oData.length) rebuild = true;\n        if (currCategoryChild.length !== modelAppCacheCategoryChild.oData.length) rebuild = true;\n        if (currFav.length !== modelAppCacheTilesFav.oData.length) rebuild = true;\n\n        // Rebuild \n        if (rebuild) {\n            location.hash = '';\n            sap.n.Launchpad.BuildMenu();\n            sap.n.Launchpad.RebuildTiles();\n        }\n\n        // When using hash first time, need to get tiles from server before hash will work\n        if (sap.n.HashNavigation.lateNav) {\n            location.hash = sap.n.HashNavigation.lateNav;\n            sap.n.HashNavigation.lateNav = null;\n        }\n\n        // Cleanup\n        currCategoryChild = [];\n        currCategory = [];\n        currTiles = [];\n    },\n\n    loadApps: function (dataTile) {\n        if (!dataTile.urlApplication) dataTile.urlApplication = '';\n        if (!dataTile.urlType) dataTile.urlType = '';\n        if (!dataTile.urlAuth) dataTile.urlAuth = '';\n\n        // Application\n        if (dataTile.actionApplication) {\n            let viewName = 'app:' + dataTile.actionApplication + ':' + AppCache.userInfo.language + ':' + dataTile.urlApplication;\n            viewName = viewName.toUpperCase();\n\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length <= 2) {\n                        appCacheLog(`LoadApps: loading ${dataTile.actionApplication}`);\n                        AppCache.Load(dataTile.actionApplication, {\n                            load: 'download',\n                            appPath: dataTile.urlApplication,\n                            appType: dataTile.urlType,\n                            appAuth: dataTile.urlAuth,\n                            sapICFNode: dataTile.sapICFNode,\n                        });\n                    }\n                }).catch(function (e) {\n                    console.log(e);\n                });\n            } else {\n                if (!sapStorageGet(viewName)) {\n                    appCacheLog(`LoadApps: loading ${dataTile.actionApplication}`);\n                    AppCache.Load(dataTile.actionApplication, {\n                        load: 'download',\n                        appPath: dataTile.urlApplication,\n                        appType: dataTile.urlType,\n                        appAuth: dataTile.urlAuth,\n                        sapICFNode: dataTile.sapICFNode,\n                    });\n                }\n            }\n        }\n\n        // Application in Tile\n        if (dataTile.type === 'application' && dataTile.tileApplication) {\n            let viewName = 'app:' + dataTile.tileApplication + ':' + AppCache.userInfo.language + ':' + dataTile.urlApplication;\n            viewName = viewName.toUpperCase();\n\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length <= 2) {\n                        appCacheLog(`LoadApps: loading ${dataTile.tileApplication}`);\n                        AppCache.Load(dataTile.tileApplication, {\n                            load: 'download'\n                        });\n                    }\n                }).catch(function (e) {\n                    console.log(e);\n                });\n            } else {\n                if (!sapStorageGet(viewName)) {\n                    appCacheLog(`LoadApps: loading ${dataTile.tileApplication}`);\n                    AppCache.Load(dataTile.tileApplication, {\n                        load: 'download'\n                    });\n                }\n            }\n        }\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"090f468e-3e9c-4981-e37d-3f6b3c942ef6","fieldName":"sap.n.Card","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":562,"fieldType":"neptune.Script","script":"sap.n.Card = {\r\n    applyDragDropToFavorites: function (container) {\r\n        function onStop (evt, ui) {\r\n            const grid = container.getDomRef();\r\n            if (!grid) return;\r\n\r\n            const updated = Array.from(grid.querySelectorAll('.nepFCardContainer'))\r\n                .map((tileElm) => tileElm.dataset.tileId)\r\n                .filter((tileId) => typeof tileId !== 'undefined')\r\n                .map((tileId) => ModelData.FindFirst(AppCacheTilesFav, 'id', tileId));\r\n            \r\n            modelAppCacheTilesFav.setData(updated);\r\n            setCacheAppCacheTilesFav();\r\n            sap.n.Launchpad.saveFav();\r\n            sap.n.Launchpad.BuildTreeMenu();\r\n        }\r\n            \r\n        sap.n.DragDrop.restrictedTo(document.getElementById(container.getId()), undefined, onStop);\r\n    },\r\n\r\n    setBackgroundShade: function (dataTile, dataCat, card, isIcon) {\r\n        let backgroundColor, backgroundShade;\r\n\r\n        if (typeof dataCat === 'undefined') dataCat = {};\r\n\r\n        if (dataCat.styleClass) card.addStyleClass(dataCat.styleClass);\r\n        if (dataTile.styleClass) card.addStyleClass(dataTile.styleClass);\r\n\r\n        if (dataCat.enableShadeCalc) {\r\n            switch (sap.n.Launchpad.backgroundShade) {\r\n                case 'ShadeA':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeB';\r\n                    break;\r\n\r\n                case 'ShadeB':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeC';\r\n                    break;\r\n\r\n                case 'ShadeC':\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeD';\r\n                    break;\r\n\r\n                default:\r\n                    sap.n.Launchpad.backgroundShade = 'ShadeA';\r\n                    break;\r\n            }\r\n        } else {\r\n            sap.n.Launchpad.backgroundShade = dataCat.backgroundShade;\r\n        }\r\n\r\n        backgroundColor = dataTile.backgroundColor || dataCat.backgroundColor || '';\r\n        backgroundShade = dataTile.backgroundShade || sap.n.Launchpad.backgroundShade || 'ShadeA';\r\n\r\n        if (isIcon && !backgroundColor) backgroundColor = 'ColorSet10';\r\n\r\n        card.addStyleClass('sap' + backgroundColor + backgroundShade.substr(5, 1));\r\n    },\r\n\r\n    cardWidth: function (config) {\r\n        // Backward compability\r\n        if (parseInt(AppCache.p9Version.substring(0, 2)) < 21) {\r\n            if (!config.dataTile.cardWidth && config.dataTile.frameType) {\r\n                switch (parseInt(config.dataTile.frameType)) {\r\n                    case 20:\r\n                    case 25:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.SMALL;\r\n                        break;\r\n\r\n                    case 30:\r\n                    case 40:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.MEDIUM;\r\n                        break;\r\n\r\n                    case 50:\r\n                    case 60:\r\n                    case 70:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.WIDE;\r\n                        break;\r\n\r\n                    case 75:\r\n                    case 80:\r\n                    case 90:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.WIDER;\r\n                        break;\r\n\r\n                    case 100:\r\n                        config.dataTile.cardWidth = sap.n.Layout.tileWidth.MAX;\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (!config.dataTile.cardWidth && config.dataTile.forceRow) config.dataTile.cardWidth = sap.n.Layout.tileWidth.MAX;\r\n\r\n        }\r\n\r\n        return config.dataTile.cardWidth || sap.n.Layout.tileWidth.SMALL;\r\n    },\r\n\r\n    buildCardDefault: function (config) {\r\n        // Customization Properties\r\n        const props = sap.n.Customization.getProperties([...config.path, config.dataTile.id]);\r\n        if (props.width) config.dataTile.cardWidth = props.width;\r\n        if (props.height) config.dataTile.cardHeight = props.height;\r\n\r\n        let cardWidth = sap.n.Card.cardWidth(config);\r\n        let cardHeader;\r\n\r\n        // Favorites\r\n        if (config.isFav) {\r\n            let favData = ModelData.FindFirst(AppCacheTilesFav, 'id', config.dataTile.id);\r\n            if (favData) {\r\n                if (favData.cardWidth) cardWidth = favData.cardWidth;\r\n                if (favData.cardHeight) config.dataTile.cardHeight = favData.cardHeight;\r\n            }\r\n        }\r\n\r\n        // Card Container\r\n        const cardContainerId = `${nepId()}_tile${config.dataTile.id}`;\r\n        let cardContainer = new sap.m.FlexBox(cardContainerId, {\r\n            width: '100%',\r\n            fitContainer: true,\r\n        }).addStyleClass('nepFCardContainer nepTile' + cardWidth);\r\n        \r\n        addCustomData(cardContainer, {\r\n            type: 'tile',\r\n            context: 'tile',\r\n            'tile-id': config.dataTile.id,\r\n        });\r\n\r\n        if (!config.isFav && !sap.n.Customization.isDisabled()) {\r\n            const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\r\n            if (!lockScreenChanges) {\r\n                cardContainer.addEventDelegate(\r\n                    sap.n.Customization.Popover.createEventDelegate({\r\n                        type: 'tile',\r\n                        elmId: cardContainerId,\r\n                        tileId: config.dataTile.id,\r\n                    })\r\n                );\r\n            }\r\n\r\n            // Remove Card\r\n            const btnRemoveCard = new sap.m.Button();\r\n            btnRemoveCard.addStyleClass('nepDeleteCard');\r\n            btnRemoveCard.tooltip = new sap.ui.core.TooltipBase().setText('');\r\n            btnRemoveCard.setIcon('sap-icon://less');\r\n            btnRemoveCard.setType(sap.m.ButtonType.Reject);\r\n            btnRemoveCard.attachPress(() => {\r\n                sap.n.Customization.remove([...config.path, config.dataTile.id]);\r\n                cardContainer.destroy();\r\n            });\r\n            cardContainer.addItem(btnRemoveCard);\r\n        }\r\n\r\n        // Card\r\n        let card = new sap.f.Card(nepId(), {\r\n            width: '100%',\r\n        }).addStyleClass('nepFCard tile' + config.dataTile.id);\r\n\r\n        if (config.dataTile.styleClass) cardContainer.addStyleClass(config.dataTile.styleClass);\r\n        if (config.dataTile.cardHeight) cardContainer.addStyleClass('nepTile' + config.dataTile.cardHeight);\r\n        if (config.dataTile.openClickTile) card.addStyleClass('nepTileClickable');\r\n        if (config.dataTile.cardHeightFit || config.dataCat.cardHeightFit) card.addStyleClass('sapFCardFitContent');\r\n\r\n        // Background Color\r\n        sap.n.Card.setBackgroundShade(config.dataTile, config.dataCat, card);\r\n\r\n        // Icon/Image\r\n        let cardIconSrc = config.dataTile.icon || '';\r\n\r\n        if (config.dataTile.cardImage) {\r\n            let imageUrl = AppCache.Url + config.dataTile.cardImage;\r\n            if (AppCache.isMobile && config.dataTile.cardImageData) cardIconSrc = config.dataTile.cardImageData;\r\n            cardIconSrc = imageUrl;\r\n        }\r\n\r\n        // Header\r\n        cardHeader = new sap.f.cards.Header(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', config.dataTile),\r\n            subtitle: sap.n.Launchpad.translateTile('subTitle', config.dataTile),\r\n            statusText: sap.n.Launchpad.translateTile('footer', config.dataTile),\r\n            iconSrc: cardIconSrc,\r\n        });\r\n\r\n        // Content\r\n        let cardContent = new sap.m.FlexBox(nepId(), {\r\n            direction: 'Column',\r\n            height: '100%',\r\n            justifyContent: 'SpaceBetween',\r\n            width: '100%',\r\n            fitContainer: true\r\n        });\r\n        \r\n        // Content Body\r\n        let cardBody = new sap.m.FlexBox(nepId(), {\r\n            fitContainer: true,\r\n            renderType: 'Bare',\r\n            direction: 'Column',\r\n            justifyContent: 'Start'\r\n        }).addStyleClass('nepFCardBody');\r\n\r\n        // Background Image \r\n        let imageSource = config.dataTile.image\r\n        if (AppCache.isMobile && config.dataTile.imageData) imageSource = config.dataTile.imageData;\r\n\r\n        let inlineHeight = config.dataTile.imageHeight || 'auto';\r\n\r\n        // Background Image Inline\r\n        if (config.dataTile.image && !config.dataTile.imagePosition) {\r\n\r\n            let imageSource = config.dataTile.image\r\n            if (AppCache.isMobile && config.dataTile.imageData) imageSource = config.dataTile.imageData;\r\n\r\n            let cardImage = new sap.m.Image(nepId(), {\r\n                src: imageSource,\r\n                width: '100%',\r\n                height: inlineHeight,\r\n                densityAware: false,\r\n            }).addStyleClass('nepFCardInlineImage tileInlineImage' + config.dataTile.id);\r\n\r\n            cardBody.addItem(cardImage);\r\n        }\r\n\r\n        // Background Image on Top\r\n        function getBackgroundImageOnTop() {\r\n            cardHeader.topImageId = nepId();\r\n            const id = cardHeader.topImageId;\r\n            const tileId = config.dataTile.id;\r\n\r\n            const img = new Image();\r\n            img.oncontextmenu = function () {\r\n                if (!sap.n.Customization.isDisabled()) {\r\n                    sap.n.Customization.Popover.open(img, {\r\n                        tileId,\r\n                        type: 'tile',\r\n                        elmId: card.getId(), \r\n                    });\r\n                    return false;\r\n                }\r\n            };\r\n\r\n            Object.entries({\r\n                'src': imageSource,\r\n                'alt': '',\r\n                'aria-hidden': 'true',\r\n                'role': 'presentation',\r\n                'data-sap-ui': id,\r\n            }).forEach(function ([k, v]) {\r\n                img.setAttribute(k, v);\r\n            });\r\n\r\n            addClass(img, ['sapMImg', 'nepFCardTopImage', 'tileTopImage', tileId, `tileTopImage${tileId}`]);\r\n            img.style.cssText = `\r\n                width: 100%;\r\n                height: ${inlineHeight};\r\n            `;\r\n\r\n            return img;\r\n        }\r\n\r\n        const isBackgroundImageOnTop = config.dataTile.imagePosition === 'top';\r\n        const img = isBackgroundImageOnTop ? getBackgroundImageOnTop() : '';\r\n\r\n        // Card Body Content\r\n        switch (config.dataTile.type) {\r\n            case 'adaptive':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyAdaptive(config));\r\n                break;\r\n\r\n            case 'application':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyApplication(config));\r\n                break;\r\n\r\n            case 'intcard':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyIntCard(config));\r\n                cardHeader.setVisible(false);\r\n                break;\r\n\r\n            case 'highchart':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyHighchart(config));\r\n                break;\r\n\r\n            case 'highstock':\r\n                cardBody.addItem(sap.n.Card.buildCardBodyHighstock(config));\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        // Description\r\n        if (config.dataTile.description) cardBody.addItem(new sap.m.Text({ text: sap.n.Launchpad.translateTile('description', config.dataTile) }).addStyleClass('nepCardDescription'));\r\n\r\n        // Action Panel\r\n        let cardAction = new sap.m.VBox(nepId());\r\n\r\n        // Add Objects\r\n        cardContainer.addItem(card);\r\n        cardContent.addItem(cardBody);\r\n        cardContent.addItem(cardAction);\r\n        card.setHeader(cardHeader);\r\n        card.setContent(cardContent);\r\n\r\n        // Actions \r\n        sap.n.Card.buildCardAction({\r\n            pageID: config.pageID,\r\n            dataTile: config.dataTile,\r\n            parent: cardAction,\r\n            cardActionParent: card,\r\n            dataCat: config.dataCat,\r\n            cardContainer: cardContainer,\r\n            isFav: config.isFav\r\n        });\r\n\r\n        let _cardHeader_delegate = {\r\n            onAfterRendering: function () {\r\n                let dom = cardHeader.getDomRef();\r\n                if (!dom) {\r\n                    return;\r\n                }\r\n\r\n                let labelledby = dom.getAttribute('aria-labelledby') || '';\r\n                let split = labelledby.split(' ');\r\n\r\n                dom.setAttribute('aria-labelledby', split[0]);\r\n                dom.removeAttribute('tabindex');\r\n\r\n                // Background Image on Top\r\n                if (config.dataTile.imagePosition === 'top') {\r\n                    if (!elById(cardHeader.topImageId)) {\r\n                        insertBeforeElm(elById(cardHeader.getId()), img);\r\n                    }\r\n                }\r\n\r\n                let focusableCardHeader = dom.querySelector(\".sapFCardHeaderWrapper\");\r\n                if (focusableCardHeader) focusableCardHeader.removeAttribute(\"tabindex\");\r\n            }\r\n        };\r\n        cardHeader.addEventDelegate(_cardHeader_delegate);\r\n\r\n        return cardContainer;\r\n    },\r\n\r\n    setCardContentHeight: function (config, cardContent) {\r\n        if (config.dataTile.bodyHeight) cardContent.setHeight(config.dataTile.bodyHeight);\r\n    },\r\n\r\n    buildCardBodyAdaptive: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n        if (!config.dataTile.settings.adaptive.idTile) return cardContent;\r\n\r\n        sap.n.Adaptive.getConfig(config.dataTile.settings.adaptive.idTile).then(function (startParams) {\r\n            // Exists ? \r\n            if (!startParams) {\r\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\r\n                return;\r\n            }\r\n\r\n            AppCache.Load(startParams.application, {\r\n                parentObject: cardContent,\r\n                appGUID: ModelData.genID(),\r\n                startParams: startParams\r\n            });\r\n        }).catch(function (_data) { });\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyApplication: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let startParams = {};\r\n        try {\r\n            startParams = JSON.parse(config.dataTile.startParams);\r\n        } catch (e) { }\r\n\r\n        if (config.dataTile.tileApplication) {\r\n            AppCache.Load(config.dataTile.tileApplication, {\r\n                parentObject: cardContent,\r\n                startParams: startParams,\r\n            });\r\n        }\r\n\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyIntCard: function (config) {\r\n\r\n        if (!sap.ui.integration) sap.ui.getCore().loadLibrary(\"sap.ui.integration\")\r\n\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        // Integration Card \r\n        let intCard = new sap.ui.integration.widgets.Card(nepId(), {\r\n            width: '100%',\r\n            manifest: AppCache.Url + config.dataTile.dataUrl,\r\n        }).addStyleClass('nepFCard nepICCard');\r\n\r\n        cardContent.addContent(intCard);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyHighchart: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let chartId = 'chart' + ModelData.genID();\r\n        let chartHeight = config.dataTile.bodyHeight || '400px';\r\n        let oHighchart;\r\n\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style=\"height:100%; width:100%\"></div>`,\r\n            afterRendering: function (oEvent) {\r\n                setTimeout(function () {\r\n                    let chartData = localStorage.getItem(`p9TileChart${config.dataTile.id}`);\r\n                    if (chartData) {\r\n                        chartData = JSON.parse(chartData);\r\n                        if (!chartData.chart) chartData.chart = {};\r\n                        chartData.chart.renderTo = chartId;\r\n                        oHighchart = Highcharts.chart(chartData);\r\n                    } else {\r\n                        oHighchart = Highcharts.chart({\r\n                            chart: {\r\n                                renderTo: chartId,\r\n                                height: chartHeight,\r\n                                style: { fontFamily: '72' }\r\n                            },\r\n                            credits: { enabled: false },\r\n                            title: { text: '' },\r\n                            subTitle: { text: '' },\r\n                            series: []\r\n                        });\r\n                    }\r\n\r\n                    // Fetch Data \r\n                    if (config.dataTile.dataUrl) {\r\n\r\n                        // Trigger Pull 1. Time\r\n                        setTimeout(function () { sap.n.Launchpad.getHighchartData(config.dataTile, oHighchart, config.pageID, chartId, 'start'); }, 250);\r\n\r\n                        // Pull Interval\r\n                        if (config.dataTile.dataInterval && config.dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                            sap.n.Launchpad.Timers[chartId] = {\r\n                                timer: setInterval(function () {\r\n                                    if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                    sap.n.Launchpad.getHighchartData(config.dataTile, oHighchart, config.pageID, chartId, 'continue');\r\n                                }, config.dataTile.dataInterval * 1000),\r\n                                pageId: config.pageID\r\n                            };\r\n                        }\r\n                    }\r\n\r\n                }, 200);\r\n            }\r\n        });\r\n\r\n        cardContent.addContent(oHighchartHTML);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardBodyHighstock: function (config) {\r\n        let cardContent = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        }).addStyleClass('sapUiNoContentPadding nepTileApplicationPanel');\r\n\r\n        this.setCardContentHeight(config, cardContent);\r\n\r\n        let chartId = 'chart' + ModelData.genID();\r\n        let chartHeight = config.dataTile.bodyHeight || '400px';\r\n        let oHighchart;\r\n\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style='height:100%;width:100%'></div>`,\r\n            afterRendering: function (oEvent) {\r\n                let chartData = localStorage.getItem('p9TileChart' + config.dataTile.id);\r\n                if (chartData) {\r\n                    let chartData = JSON.parse(chartData);\r\n                    if (!chartData.chart) chartData.chart = {};\r\n                    chartData.chart.renderTo = chartId;\r\n                    oHighchart = Highcharts.stockChart(chartData);\r\n                } else {\r\n                    oHighchart = Highcharts.stockChart({\r\n                        chart: {\r\n                            renderTo: chartId,\r\n                            height: chartHeight,\r\n                            style: { fontFamily: '72' }\r\n                        },\r\n                        credits: { enabled: false },\r\n                        title: { text: '' },\r\n                        subTitle: { text: '' },\r\n                        series: []\r\n                    });\r\n                }\r\n\r\n                // Fetch Data \r\n                if (config.dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () { sap.n.Launchpad.getHighstockData(config.dataTile, oHighchart, config.pageID, chartId, 'start'); }, 250);\r\n\r\n                    // Pull Interval\r\n                    if (config.dataTile.dataInterval && config.dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighstockData(config.dataTile, oHighchart, config.pageID, chartId, 'continue');\r\n                            }, config.dataTile.dataInterval * 1000),\r\n                            pageId: config.pageID\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        cardContent.addContent(oHighchartHTML);\r\n        return cardContent;\r\n    },\r\n\r\n    buildCardAction: function (config) {\r\n        let dataTile = config.dataTile;\r\n        let buttonStyle = '';\r\n        let supportedBrowser = true;\r\n        let openEnabled = true;\r\n        let cardActionContainer = new sap.m.FlexBox(nepId(), {}).addStyleClass('nepActionContainer nepCardAction sapUiSizeCompact');\r\n\r\n        // Check Offline Mode -> Disable Open button \r\n        if (AppCache.isOffline) {\r\n            if (dataTile.actionURL) openEnabled = false;\r\n            if (dataTile.type === 'storeitem') openEnabled = false;\r\n            if (!dataTile.urlApplication) dataTile.urlApplication = '';\r\n\r\n            if (dataTile.actionApplication) {\r\n                let app = ModelData.FindFirst(AppCacheData,\r\n                    ['application', 'language', 'appPath'],\r\n                    [dataTile.actionApplication.toUpperCase(),\r\n                    AppCache.userInfo.language,\r\n                    dataTile.urlApplication || '']);\r\n                if (!app) openEnabled = false;\r\n            }\r\n\r\n            if (dataTile.actionWebApp) {\r\n                if (dataTile.openWindow) {\r\n                    openEnabled = false;\r\n                } else {\r\n                    let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName).then(function (viewData) {\r\n                            if (viewData.length < 10) openEnabled = false;\r\n                        });\r\n                    } else {\r\n                        if (!sapStorageGet(viewName)) openEnabled = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Supported Browsers\r\n        const w = dataTile.browserBlockWin;\r\n        if (sap.ui.Device.os.name === 'win' && w && w !== '[]' && w.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        const m = dataTile.browserBlockMac;\r\n        if (sap.ui.Device.os.name === 'mac' && m && dataTile.browserBlockWin !== '[]' && m.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        let butStart;\r\n        let inFavCat;\r\n\r\n        if (dataTile.actionType === 'F' || dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.type === 'storeitem') {\r\n            if (supportedBrowser) {\r\n                if (dataTile.blackoutEnabled) {\r\n                    butStart = new sap.m.Button(nepId(), {\r\n                        text: dataTile.blackoutText,\r\n                        press: function (oEvent) {\r\n                            descBlackout.editor.setData(dataTile.blackoutDescription);\r\n                            popBlackout.openBy(this);\r\n                        }\r\n                    });\r\n                    butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd nepTileBlackout ' + buttonStyle);\r\n                } else {\r\n                    if (dataTile.openClickTile) {\r\n                        if (openEnabled) {\r\n                            config.cardActionParent.attachBrowserEvent('tap', function (oEvent) {\r\n                                // button would decide the tap action\r\n                                if (oEvent.target && oEvent.target.classList.contains('sapMBtnIcon')) {\r\n                                    return;\r\n                                }\r\n                                \r\n                                oEvent.stopImmediatePropagation();\r\n                                setTimeout(function () {\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n                            config.cardActionParent.attachBrowserEvent('keypress', function (oEvent) {\r\n                                setTimeout(function () {\r\n                                    if (oEvent.code !== 'Enter') {\r\n                                        return;\r\n                                    }\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n                            cardActionContainer.addStyleClass('nepNavBarTile');\r\n                            let _cardActionParent_delegate = {\r\n                                onAfterRendering: function () {\r\n                                    let elem = config.cardActionParent.getDomRef();\r\n                                    elem.setAttribute(\"tabindex\", \"0\");\r\n                                    elem.setAttribute(\"role\", \"button\");\r\n                                    elem.removeAttribute(\"aria-labelledby\");\r\n                                }\r\n                            };\r\n                            config.cardActionParent.addEventDelegate(_cardActionParent_delegate);\r\n                            config.cardActionParent.exit = function () {\r\n                                config.cardActionParent.removeEventDelegate(_cardActionParent_delegate);\r\n                            };\r\n                        }\r\n                    } else {\r\n                        let openText = (dataTile.cardButtonIconOnly) ? '' : AppCache_tOpen.getText();\r\n                        if (dataTile.openText) openText = sap.n.Launchpad.translateTile('openText', dataTile);\r\n                        butStart = new sap.m.Button(nepId(), {\r\n                            text: openText,\r\n                            enabled: openEnabled,\r\n                            icon: dataTile.cardButtonIcon,\r\n                            press: function (oEvent) {\r\n                                sap.n.Launchpad.HandleTilePress(dataTile, config.dataCat);\r\n                            }\r\n                        });\r\n\r\n                        butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n                    }\r\n                }\r\n            } else {\r\n                butStart = new sap.m.Button(nepId(), {\r\n                    text: AppCache_tIncompatible.getText(),\r\n                    iconFirst: false,\r\n                    enabled: openEnabled,\r\n                    icon: 'sap-icon://sys-help',\r\n                    press: function (oEvent) {\r\n                        let browsers;\r\n\r\n                        if (sap.ui.Device.os.name === 'win') browsers = JSON.parse(dataTile.browserBlockWin);\r\n                        if (sap.ui.Device.os.name === 'mac') browsers = JSON.parse(dataTile.browserBlockMac);\r\n\r\n                        const m = {\r\n                            'cr': 'Chrome',\r\n                            'ed': 'Edge',\r\n                            'ff': 'Firefox',\r\n                            'ie': 'Internet Explorer',\r\n                            'op': 'Opera',\r\n                            'sf': 'Safari',\r\n                        };\r\n\r\n                        let array = browsers.map(function (k) {\r\n                            return { name: m[k] };\r\n                        });\r\n                        array.sort(sort_by('name'));\r\n                        modellistSupportedBrowsers.setData(array);\r\n                        popSupportedBrowsers.openBy(this);\r\n                    }\r\n                });\r\n\r\n                butStart.addStyleClass('nepTileAction nepTileBlocked sapUiTinyMarginEnd ' + buttonStyle);\r\n                cardActionContainer.addItem(butStart);\r\n            }\r\n\r\n            let butIdAdd = config.isFav ? '' : 'FavAdd';\r\n            let butFavAdd = new sap.m.Button(`${nepPrefix()}${butIdAdd}${dataTile.id}`, {\r\n                tooltip: AppCache_tAddFav.getText(),\r\n                icon: 'sap-icon://unfavorite',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n\r\n                    ModelData.Update(AppCacheTilesFav, 'id', dataTile.id, dataTile);\r\n                    setCacheAppCacheTilesFav();\r\n\r\n                    butFavDel.setVisible(true);\r\n                    butFavAdd.setVisible(false);\r\n\r\n                    sap.n.Launchpad.handleFavRedraw();\r\n                }\r\n            });\r\n\r\n            butFavAdd.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n\r\n            let butIdDel = config.isFav ? '' : 'FavDel';\r\n            let butFavDel = new sap.m.Button(`${nepPrefix()}${butIdDel}${dataTile.id}`, {\r\n                tooltip: AppCache_tDelFav.getText(),\r\n                icon: 'sap-icon://favorite',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n                    sap.n.Utils.message({\r\n                        title: AppCache_tFavTitle.getText(),\r\n                        intro: AppCache_tFavConfirm.getText(),\r\n                        text1: AppCache_tDelFavConfirm.getText(),\r\n                        state: 'Warning',\r\n                        acceptText: AppCache_tDelFavRemove.getText(),\r\n                        onAccept: function (oAction) {\r\n\r\n                            ModelData.Delete(AppCacheTilesFav, 'id', dataTile.id);\r\n                            setCacheAppCacheTilesFav();\r\n\r\n                            let butFavAdd = sap.ui.getCore().byId(`${nepPrefix()}FavAdd${dataTile.id}`);\r\n                            if (butFavAdd) butFavAdd.setVisible(true);\r\n\r\n                            let butFavDel = sap.ui.getCore().byId(`${nepPrefix()}FavDel${dataTile.id}`);\r\n                            if (butFavDel) butFavDel.setVisible(false);\r\n\r\n                            sap.n.Launchpad.handleFavRedraw();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            butFavDel.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n\r\n            // Tile is by default in Fav Category\r\n            inFavCat = ModelData.FindFirst(config.dataCat.tiles, 'id', dataTile.id);\r\n\r\n            // Fav\r\n            let rec = ModelData.Find(AppCacheTilesFav, 'id', dataTile.id);\r\n            if (rec.length) {\r\n                butFavAdd.setVisible(false);\r\n                butFavDel.setVisible(true);\r\n            } else {\r\n                butFavAdd.setVisible(true);\r\n                butFavDel.setVisible(false);\r\n            }\r\n\r\n            if (!dataTile.openClickTile || dataTile.blackoutEnabled) cardActionContainer.addItem(butStart);\r\n\r\n            if (!AppCache.isPublic && sap.n.Launchpad.enableFav && !AppCache.isOffline) {\r\n                if (config.dataCat.inclFav && inFavCat) {\r\n                } else {\r\n                    cardActionContainer.addItem(butFavAdd);\r\n                    cardActionContainer.addItem(butFavDel);\r\n                }\r\n            }\r\n        }\r\n\r\n        this.addCardHelpAction(cardActionContainer, dataTile)\r\n        this.addCardResizeAction(cardActionContainer, config);\r\n\r\n        config.parent.addItem(cardActionContainer);\r\n    },\r\n\r\n    addCardHelpAction(container, dataTile) {\r\n        if (dataTile.helpEnabled) {\r\n            let butHelp = new sap.m.Button(nepId(), {\r\n                tooltip: AppCache_tHelp.getText(),\r\n                icon: 'sap-icon://sys-help',\r\n                press: function (oEvent) {\r\n                    descBlackout.editor.setData(dataTile.helpText);\r\n                    popBlackout.openBy(this);\r\n                }\r\n            });\r\n\r\n            container.addItem(butHelp);\r\n        }\r\n    },\r\n\r\n    addCardResizeAction(container, config) {\r\n        if (sap.n.Customization.isDisabled() || sap.n.Customization.areScreensLocked()) {\r\n            return;\r\n        }\r\n\r\n        let spacer = new sap.m.HBox(nepId(), { width: '100%' });\r\n        let btn = new sap.m.Button(nepId(), {\r\n            tooltip: AppCache_tResize.getText(),\r\n            icon: 'sap-icon://resize-corner',\r\n            type: 'Transparent',\r\n            press: function (oEvent) {\r\n                oEvent.cancelBubble();                \r\n                const tileId = config.dataTile.id;\r\n                const tileElm = sap.n.Customization.findTileElement(this.getDomRef())\r\n                modelpopResizeTile.setData({\r\n                    tileId,\r\n                    tileElm,\r\n                    isFav: config.isFav,\r\n                    context: sap.n.Customization.findTileDragContext(tileId, tileElm),\r\n                    tile: config.isFav ? ModelData.FindFirst(AppCacheTilesFav, 'id', tileId) : sap.n.Customization.getTile(tileId)\r\n                });\r\n                popResizeTile.openBy(this);\r\n            }\r\n        }).addStyleClass('nepActionConfig');\r\n\r\n        container.addItem(spacer);\r\n        container.addItem(btn);\r\n        config.cardContainer.addStyleClass('dragCursor');\r\n    },\r\n};\r\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"11606f12-e740-4cf0-b86c-45a9f756e956","fieldName":"sap.n.Dialog","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":563,"fieldType":"neptune.Script","script":"// Dialog Constructor\nsap.m.Dialog.extend('sap.n.Dialog', {\n    metadata: {\n        properties: {\n            'hideMinimize': { type: 'boolean', defaultValue: false },\n            'hideMosaic': { type: 'boolean', defaultValue: false },\n            'hideMaximize': { type: 'boolean', defaultValue: false },\n            'icon': { type: 'sap.ui.core.Icon', },\n            'contentIsURL': { type: 'boolean', defaultValue: false },\n            '_origWidth': { type: 'sap.ui.core.CSSSize' },\n            '_origHeight': { type: 'sap.ui.core.CSSSize' },\n            '_origTop': { type: 'sap.ui.core.CSSSize' },\n            '_origLeft': { type: 'sap.ui.core.CSSSize' },\n            '_headerIcon': { type: 'sap.ui.core.Icon' },\n            '_headerTitle': { type: 'sap.m.Title' },\n            '_butMaximize': { type: 'sap.m.Button' },\n            '_butMinimize': { type: 'sap.m.Button' },\n            '_butRestore': { type: 'sap.m.Button' },\n            '_butMosaic': { type: 'sap.m.Button' },\n            '_butClose': { type: 'sap.m.Button' },\n            '_viewContent': { type: 'string' }\n        },\n    },\n\n    init: function () {\n        sap.m.Dialog.prototype.init.call(this);\n\n        const dia = this;\n        dia._viewContent = AppCache.diaView;\n\n        // Dialog Header\n        const diaHeader = new sap.m.Bar();\n        dia.setCustomHeader(diaHeader);\n\n        this._headerIcon = new sap.ui.core.Icon({ width: '30px' });\n        diaHeader.addContentLeft(this._headerIcon);\n\n        // Dialog Icon\n        if (sap.n.Launchpad.contextType === 'Tile') {\n            this._headerIcon.setSrc(sap.n.Launchpad.contextTile.icon);\n        } else {\n            this._headerIcon.setSrc();\n        }\n\n        // Dialog Title\n        this._headerTitle = new sap.m.Title({ titleStyle: 'H6' });\n        diaHeader.addContentLeft(this._headerTitle);\n\n        // Minimize button\n        this._butMinimize = new sap.m.Button({\n            icon: 'sap-icon://minimize',\n            press: function (oEvent) {\n                dia.minimize(dia);\n            }\n        });\n        this._butMinimize.setTooltip(' ');\n        diaHeader.addContentRight(this._butMinimize);\n\n        // Mosaic button\n        this._butMosaic = new sap.m.Button({\n            icon: 'sap-icon://grid',\n            press: function (oEvent) {\n                dia.mosaic();\n            }\n        });\n        this._butMosaic.setTooltip(' ');\n        diaHeader.addContentRight(this._butMosaic);\n\n\n        // Maximize button\n        this._butMaximize = new sap.m.Button({\n            icon: 'sap-icon://full-screen',\n            press: function (oEvent) {\n                dia.maximize();\n            }\n        });\n        this._butMaximize.setTooltip(' ');\n        diaHeader.addContentRight(this._butMaximize);\n\n        this._butRestore = new sap.m.Button({ // Restore button\n            icon: 'sap-icon://exit-full-screen',\n            visible: false,\n            press: function (oEvent) {\n                dia.restore();\n            }\n        });\n        this._butRestore.setTooltip(' ');\n        diaHeader.addContentRight(this._butRestore);\n\n\n        // Close button\n        this._butClose = new sap.m.Button({\n            icon: 'sap-icon://decline',\n            press: function (oEvent) {\n                dia.close();\n            }\n        });\n        this._butClose.setTooltip(' ');\n        diaHeader.addContentRight(this._butClose);\n\n        setTimeout(function () {\n            dia._headerTitle.setText(dia.getTitle());\n            if (dia.getIcon()) dia._headerIcon.setSrc(dia.getIcon());\n        }, 50);\n\n        // Dialog Styling\n        dia.addStyleClass('sapUiNoContentPadding');\n\n        const modal = AppCache.LoadOptions.dialogModal ? true : false;\n        dia.oPopup.setModal(modal);\n    },\n\n    onBeforeRendering: function () {\n        this._butMinimize.setVisible(!this.getHideMinimize());\n        this._butMosaic.setVisible(!this.getHideMosaic());\n        this._butMaximize.setVisible(!this.getHideMaximize());\n    },\n\n\n    // trigger BeforeClose event before closing\n    close: function () {\n        if (this.getContent()[0].sViewName) {\n            const applid = this.getContent()[0].sViewName.replace(/\\//g, ''); // Format ID\n            if (applid) { // trigger custom beforeClose\n                if (sap.n.Apps[applid] && sap.n.Apps[applid].beforeClose) {\n                    sap.n.Apps[applid].beforeClose.forEach(function (data) {\n                        data();\n                    });\n                }\n            }\n        }\n\n        sap.m.Dialog.prototype.close.call(this);\n        return this;\n    },\n\n    ondblclick: function (oEvent) { },\n\n    targetElId: function () { return `#${this.sId}`; },\n    targetEl: function () { return querySelector(this.targetElId()); },\n\n    _getCSS: function (name) { return getStyle(this.targetEl(), name); },\n    _setCSS: function (name, value) { setStyle(this.targetEl(), name, value); },\n\n    setVisibility: function (value) { this._setCSS('visibility', value); },\n    setHeight: function (height) {\n        const dialog = this.getDomRef();\n        if (!dialog) return;\n\n        const section = dialog.querySelector('.sapMDialogSection');\n        if (!section) return;\n\n        section.style.height = height;\n    },\n\n    maximize: function (event) {\n        if (this.getContentIsURL()) {\n            const oDomRef = this.getDomRef();\n\n            // Store original values\n            this._origLeft = oDomRef.style.left;\n            this._origTop = oDomRef.style.top;\n            this._origWidth = oDomRef.style.width;\n            this._origHeight = oDomRef.style.height;\n\n            // Maximize\n            oDomRef.style.width = '100%';\n            oDomRef.style.height = '99%';\n            oDomRef.style.top = oDomRef.style.top.includes('%') ? '50%' : '1px';\n            oDomRef.style.left = oDomRef.style.left.includes('%') ? '50%' : '1px';\n            \n            oDomRef.style['max-height'] = '94%';\n            oDomRef.style['max-width'] = '100%';\n        } else {\n            this.setStretch(true);\n        }\n\n        this.setHeight('');\n        this._butMaximize.setVisible(false);\n        this.setHideMaximize(true);\n        this._butRestore.setVisible(true);\n    },\n\n    unminimize: function (oControl) {\n        AppCacheShellDialog.focus(); // IE11 looses focus\n        oControl.destroy(); // Destroy toolbar button\n\n        if (this.getContentIsURL()) {\n            this.setVisibility('visible');\n        } else {\n            this.setVisible(true);\n        }\n\n        if (AppCacheUserDialog.getButtons().length === 1) AppCacheShellDialog.setVisible(false);\n    },\n\n    onAfterRendering: function () {\n        sap.m.Dialog.prototype.onAfterRendering.call(this);\n\n        if (!this.getContentIsURL()) { // override CSS after rerender\n            applyCSSToElmId(this.targetElId(), {\n                'max-height': '95%',\n                'max-width': '98%',\n                'min-height': 'initial',\n                'min-width': 'initial',\n                'transform': '',\n            });\n        }\n    },\n\n    minimize: function () {\n        const dia = this;\n\n        AppCacheShellDialog.setVisible(true);\n        // Add button to Top Shell Bar\n        AppCacheUserDialog.addButton(new sap.m.Button({\n            icon: dia._headerIcon.getSrc(),\n            text: dia._headerTitle.getText(),\n            press: function () {\n                dia.unminimize(this);\n            }\n\n        }));\n\n        if (this.getContentIsURL()) {\n            this.setVisibility('hidden');\n        } else {\n            this.setVisible(false);\n        }\n    },\n\n    restore: function (event) {\n        if (this.getContentIsURL()) {\n            applyCSSToElmId(this.targetElId(), {\n                'left': this._origLeft,\n                'top': this._origTop,\n                'width': this._origWidth,\n                'height': this._origHeight,\n            });\n        } else {\n            this.setStretch(false);\n        }\n\n        this.setHeight('');\n        this._butMaximize.setVisible(true);\n        this.setHideMaximize(false);\n        this._butRestore.setVisible(false);\n    },\n\n    _isPrime: function (num) {\n        for (let i = 2; i < num; i++) {\n            if (num % i === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n\n    _buildPrimesArray: function (max) {\n        let arr = [2];\n        for (let i = 3; i <= max; i += 2) {\n            if (this._isPrime(i)) {\n                arr.push(i);\n            }\n        }\n        return arr;\n    },\n\n    mosaic: function () {\n        let diaArray = [];\n        AppCache.Dialogs.forEach(function (data) {\n            let dia = sap.ui.getCore().byId(data);\n            if (dia.getVisible() && dia._getCSS('visibility') !== 'hidden') {\n                diaArray.push(data);\n            }\n        });\n\n        if (diaArray.length <= 1) {\n            return;\n        }\n\n        // Calculate sections needed (prime numbers)\n        let primesArray = this._buildPrimesArray(diaArray.length);\n\n        let hsecs, vsecs;\n        for (i = 0; i < primesArray.length; i++) {\n            let r = diaArray.length % primesArray[i];\n            if (r === 0) {\n                let div = diaArray.length / primesArray[i];\n\n                if (div >= primesArray[i]) {\n                    hsecs = div;\n                    vsecs = primesArray[i];\n                } else {\n                    hsecs = primesArray[i];\n                    vsecs = div;\n                }\n                i = primesArray.length + 1;\n            }\n        }\n\n        let eachSecWidth = Math.floor((window.innerWidth - 10) / hsecs);\n        let eachSecHeight = Math.floor((window.innerHeight - 10) / vsecs) - 48;\n        let eachSecWidthCSS = eachSecWidth + 'px';\n        let eachSecHeightCSS = eachSecHeight + 'px';\n\n        let currHsec = 1;\n        let currVsec = 1;\n        for (i = 0; i < diaArray.length; i++) {\n            let newTop = ((currVsec - 1) * eachSecHeight) + 4;\n            let newLeft = ((currHsec - 1) * eachSecWidth) + 5;\n\n            if (currVsec > 1)\n                newTop = newTop + 48;\n\n            let d = sap.ui.getCore().byId(diaArray[i]);\n            //remove the transform translate\n            d._bDisableRepositioning = true;\n            d._$dialog.addClass('sapDialogDisableTransition sapMDialogTouched');\n\n            d._oManuallySetPosition = {\n                x: newLeft,\n                y: newTop\n            };\n\n            d._oManuallySetSize = {\n                height: eachSecHeightCSS,\n                width: eachSecWidthCSS\n            };\n\n            applyCSSToElmId(d.sId, {\n                'top': `${newTop}px`,\n                'left': `${newLeft}px`,\n                'width': eachSecWidthCSS,\n                'height': eachSecHeightCSS,\n                'max-height': '95%',\n                'max-width': '98%',\n                'min-height': 'initial',\n                'min-width': 'initial',\n                'transform': '',\n            });\n\n            if (currHsec === hsecs) {\n                currVsec++;\n                currHsec = 1;\n            } else {\n                currHsec++;\n            }\n        }\n    },\n\n    rerender: function () {\n        if (!this.getContentIsURL()) {\n            sap.m.Dialog.prototype.rerender.call(this);\n        }\n    },\n\n    renderer: {}\n});\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"32332f2b-bb4f-4dca-e175-965c17576b82","fieldName":"sap.n.Enhancement","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":564,"fieldType":"neptune.Script","script":"sap.n.Enhancement = {\r\n    spots: [\r\n        {\r\n            title: 'Global Functions',\r\n            name: 'global',\r\n            description: 'Reuse global functions declared in this enhancement spot. Use the object sap.n.Enhancement.global for methods/data',\r\n            param: '',\r\n            sort: 10,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Startup',\r\n            name: 'BeforeStartup',\r\n            description: 'Triggers after UI5 is loaded but before Startup of desktop/mobile',\r\n            param: '',\r\n            sort: 20,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Get Tiles',\r\n            name: 'SuccessGetMenu',\r\n            description: 'Triggers after GetTiles request and before tiles/tile groups is re-rendered if changes are detected in tiles/tile groups',\r\n            param: '',\r\n            sort: 40,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Tile Group Renderer',\r\n            name: 'AfterTileGroupRenderer',\r\n            description: 'Triggers after Tile Group is rendered',\r\n            param: 'Container, dataCat',\r\n            sort: 50,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Logout',\r\n            name: 'BeforeLogout',\r\n            description: 'Triggers right after user starts the logout process.',\r\n            param: '',\r\n            sort: 51,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Logout',\r\n            name: 'AfterLogout',\r\n            description: 'Triggers when a logout process finishes successfully.',\r\n            param: '',\r\n            sort: 52,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Set User Info',\r\n            name: 'setUserInfo',\r\n            description: 'Triggers when we set username in the launchpad',\r\n            param: '',\r\n            sort: 32,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'After Update',\r\n            name: 'AfterUpdate',\r\n            description: 'Triggers after AppCache.Update is done',\r\n            param: '',\r\n            sort: 31,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Before Update',\r\n            name: 'BeforeUpdate',\r\n            description: 'Triggers before AppCache.Update is started and tiles/tile groups is rendered for the first time. Supports Promise',\r\n            param: '',\r\n            sort: 30,\r\n            group: 'Common'\r\n        },\r\n        {\r\n            title: 'Restricted Enable',\r\n            name: 'RestrictedEnable',\r\n            description: 'Triggers after user lock/logout',\r\n            param: '',\r\n            sort: 220,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Restricted Disable',\r\n            name: 'RestrictedDisable',\r\n            description: 'Triggers after unlock/login before AppCache.Update',\r\n            param: '',\r\n            sort: 210,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Before Lock',\r\n            name: 'BeforeLock',\r\n            description: 'Triggers before user is logged out when locking the user. Can be used to logoff user in other systems',\r\n            param: '',\r\n            sort: 201,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Before Set Settings',\r\n            name: 'BeforeSetSettingsMobile',\r\n            description: 'Triggers before applying settings from server or cache',\r\n            param: 'settings',\r\n            sort: 200,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Clear Cookies',\r\n            name: 'ClearCookies',\r\n            description: 'Add your own logic when clearing cookies',\r\n            param: '',\r\n            sort: 290,\r\n            group: 'Mobile/PWA'\r\n        },\r\n        {\r\n            title: 'Push Notification',\r\n            name: 'PushNotification',\r\n            description: 'Triggers when receiving push notification when the launchpad is started and in foreground',\r\n            param: 'notification',\r\n            sort: 110,\r\n            group: 'Push Notifications'\r\n        },\r\n        {\r\n            title: 'Push Registration',\r\n            name: 'PushRegistration',\r\n            description: 'Triggers when browser/device register for push notification',\r\n            param: 'dataDevice',\r\n            sort: 100,\r\n            group: 'Push Notifications'\r\n        },\r\n        {\r\n            title: 'Hash Navigation',\r\n            name: 'HashNavigation',\r\n            description: 'Intercept and add you logic when the Launchpad detects hash navigation',\r\n            param: 'hash',\r\n            sort: 900,\r\n            group: 'Events'\r\n        },\r\n        {\r\n            title: 'Tile Click',\r\n            name: 'TileClick',\r\n            description: 'Event when tile is clicked, use for custom analytics or other',\r\n            param: 'dataTile',\r\n            sort: 910,\r\n            group: 'Events'\r\n        },\r\n        {\r\n            title: 'Remote System Authentication',\r\n            name: 'RemoteSystemAuth',\r\n            description: 'When using tile from remote system you can add custom header fields',\r\n            param: 'headers',\r\n            sort: 800,\r\n            group: 'Authentication'\r\n        },\r\n        {\r\n            title: 'Pin Code Validation',\r\n            name: 'PinCodeValidation',\r\n            description: 'Called when validating the pin code that the user is attempting to set',\r\n            param: 'pincode, validity',\r\n            sort: 1000,\r\n            group: 'Mobile/PWA'\r\n        }\r\n    ],\r\n\r\n    getSpots: function () {\r\n        window.parent.postMessage({ spots: sap.n.Enhancement.spots }, location.href);\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"09951d87-4238-45a3-cfc7-7e64e42d19e2","fieldName":"sap.n.Fingerprint","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":565,"fieldType":"neptune.Script","script":"function isBasicAuthSetupInvalid() {\n    return (\n        typeof cordova === 'undefined' ||\n        typeof cordova.plugins === 'undefined' ||\n        typeof cordova.plugins.SecureKeyStore === 'undefined' ||\n        window.navigator.simulator ||\n        !AppCache.biometricAuthentication\n    )\n}\n\nfunction isFaceIDAvailableOnIPhone() {\n    return (\n        sap.ui.Device.os.ios &&\n        sap.ui.Device.os.version >= 11 &&\n        device && device.model && device.model.indexOf('iPhone10') > 0\n    );\n}\n\nfunction loginUserWithInfo(userInfo) {\n    AppCache_inUsername.setValue(userInfo.username);\n    AppCache_inPassword.setValue(userInfo.password);\n    AppCache_loginTypes.setSelectedKey(userInfo.loginid);\n    AppCache_butLogon.firePress();\n}\n\nfunction setBiometricAuthToFalse() {\n    AppCache.biometricAuthentication = false;\n}\n\nfunction setKeypadBtnIcon(name) {\n    butNumpadLogin.setIcon(`sap-icon://${name}`);\n}\n\nfunction setKeypadBtn(iconName, enabled) {\n    setKeypadBtnIcon(iconName);\n    butNumpadLogin.setEnabled(enabled);\n}\n\nfunction setKeypadValueAndAttemptLogin(value) {\n    NumPad.numValue = value;\n    NumPad.Logon();\n}\n\nfunction isErrorFingerprintCancelled(err) {\n    return err === FingerprintAuth.ERRORS.FINGERPRINT_CANCELLED;\n}\n\nsap.n.Fingerprint = {\n    android: {\n        onSupported: function (res) {\n            // Check hardware, enrollment and AppCacheUsers\n            if (res.isAvailable && res.hasEnrolledFingerprints) {\n                if (AppCache.userInfo.biometric) {\n                    setKeypadBtn('mri-scan', true);\n\n                    // Get user language\n                    const pluginLanguage = sap.n.Fingerprint.android.getLanguage(AppCache.userInfo.language);\n\n                    // Biometric authentication config\n                    const decryptConfig = {\n                        clientId: AppCache.AppID,\n                        username: AppCache.userInfo.username,\n                        token: AppCache.userInfo.token,\n                        disableBackup: true,\n                        maxAttempts: 5,\n                        locale: pluginLanguage,\n                        userAuthRequired: true,\n                        dialogMessage: AppCache_Fingerprint.getText()\n                    };\n                    FingerprintAuth.decrypt(decryptConfig, sap.n.Fingerprint.android.onSuccess, sap.n.Fingerprint.android.onError);\n                }\n            }\n        },\n\n        notSupported: function (_err) {\n            setKeypadBtnIcon('accept');\n            setBiometricAuthToFalse();\n        },\n\n        onSuccess: function (res) {\n            if ((res.withFingerprint || res.withPassword) && res.password) {\n                setKeypadValueAndAttemptLogin(res.password);\n            } else { }\n        },\n\n        onError: function (err) {\n            if (isErrorFingerprintCancelled(err)) { } else { }\n        },\n\n        getLanguage: function (lang) {\n            const m = {\n                'NO': 'no',\n                'FR': 'fr',\n                'ES': 'es',\n                'PT': 'pt',\n                'DE': 'de',\n                'IT': 'it',\n                'EN': 'en_US',\n                'ZH': 'zh',\n            };\n\n            if (m[lang] === undefined) {\n                return 'en_US';\n            }\n\n            return m[lang];\n        }\n    },\n\n    ios: {\n        checkSupport: function () {\n            if (AppCache.userInfo.biometric) {\n                setKeypadBtnIcon('mri-scan');\n                butNumpadLogin.setEnabled(true);\n\n                // Authenticate using iOS SAMKeychain library\n                let dialogText = AppCache_Fingerprint.getText();\n                if (isFaceIDAvailableOnIPhone()) {\n                    dialogText = AppCache_tEnableFaceId.getText();\n                }\n\n                CID.checkAuth(dialogText, function (res) {\n                    if (res == 'success') {\n                        cordova.plugins.SecureKeyStore.get(setKeypadValueAndAttemptLogin, function (err) {\n                            console.log(err);\n                        }, AppCache.userInfo.username);\n                    } else {\n                        console.log(res);\n                    }\n                }, function (err) {\n                    console.log(err);\n                });\n            } else {\n                setKeypadBtn('accept', false);\n            }\n        }\n    },\n\n    saveBasicAuth: function () {\n        if (isBasicAuthSetupInvalid()) {\n            return;\n        }\n\n        // Save userinfo\n        cordova.plugins.SecureKeyStore.set(function (_res) { }, function (_err) {\n            setBiometricAuthToFalse();\n        }, AppCache.deviceID, AppCache.Auth);\n    },\n\n    getBasicAuth: function () {\n        if (isBasicAuthSetupInvalid()) {\n            return;\n        }\n\n        let dialogText = AppCache_Fingerprint.getText();\n        if (isFaceIDAvailableOnIPhone()) {\n            dialogText = AppCache_tEnableFaceId.getText();\n        }\n\n        // Any stored userinfo ? \n        cordova.plugins.SecureKeyStore.get(function (res) {\n            let userInfo;\n            try {\n                userInfo = JSON.parse(Base64.decode(res));\n            } catch (e) { }\n\n            if (!userInfo) return;\n\n            if (sap.ui.Device.os.android && window.FingerprintAuth) {\n                try {\n                    FingerprintAuth.isAvailable(function (res) {\n                        if (res.isAvailable && res.hasEnrolledFingerprints) {\n                            // Biometric authentication config\n                            const encryptConfig = {\n                                clientId: AppCache.AppID,\n                                username: AppCache.deviceID,\n                                password: AppCache.deviceID,\n                                disableBackup: true,\n                                maxAttempts: 5,\n                                locale: 'en_US',\n                                userAuthRequired: true,\n                            };\n\n                            // Encrypt\n                            FingerprintAuth.encrypt(encryptConfig, function (result) {\n                                // Encryption success\n                                if (result.withFingerprint || result.withBackup) loginUserWithInfo(userInfo);\n                                else setBiometricAuthToFalse();\n                            }, function (err) {\n                                if (!isErrorFingerprintCancelled(err)) setBiometricAuthToFalse();\n                            });\n                        } else {\n                            setBiometricAuthToFalse();\n                        }\n                    }, function (_err) {\n                        setBiometricAuthToFalse();\n                    });\n                } catch (err) {\n                    setBiometricAuthToFalse();\n                }\n            } else if (sap.ui.Device.os.ios && typeof CID !== 'undefined') {\n                CID.checkAuth(dialogText, function (res) {\n                    if (res === 'success') loginUserWithInfo(userInfo);\n                    else console.log(res);\n                }, function (err) {\n                    console.log('CID.checkAuth', err);\n                    setBiometricAuthToFalse();\n                });\n            } else {\n                setBiometricAuthToFalse();\n            }\n\n        }, function (_err) { }, AppCache.deviceID);\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"973204c2-36cc-46ee-bb04-e729f30056af","fieldName":"sap.n.HashNavigation","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":566,"fieldType":"neptune.Script","script":"sap.n.HashNavigation = {\n    lateNav: null,\n\n    _handler: function () {\n        if (location.hash === '#') location.hash === '';\n\n        // Any content ?\n        if (location.hash === '') return;\n\n        // Sections \n        if (isSection(location.hash)) return;\n\n        // AppCache Home\n        if (location.hash === '#Home') {\n            AppCache._Home();\n            return;\n        }\n\n        // AppCache Back\n        if (location.hash === '#Back') {\n            AppCache._Back();\n            return;\n        }\n\n        // Parse Hash\n        let parts = location.hash.substring(1).split('&');\n\n        // Top Menu Navigation\n        if (parts[0].indexOf('neptopmenu') > -1) {\n            const category = sap.n.Customization.getCategory(parts[1]);\n            if (category) {\n                sap.n.Launchpad.BuildTiles(category);\n            } else {\n                const url = window.location.href;\n                window.location = url.substr(0, url.indexOf('#'));\n            }\n            return;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.HashNavigation) {\n            try {\n                let preventDefault = sap.n.Enhancement.HashNavigation(location.hash);\n                if (preventDefault) return;\n            } catch (e) {\n                appCacheError('Enhancement HashNavigation ' + e);\n            }\n        }\n\n        // Object\n        if (parts[0].indexOf('-') > -1) {\n            sap.n.HashNavigation.object = parts[0].split('-')[0];\n            sap.n.HashNavigation.action = parts[0].split('-')[1];\n        }\n\n        // Data\n        if (typeof parts[1] !== 'undefined') {\n            sap.n.HashNavigation.data = decodeURIComponent(parts[1]);\n        } else {\n            sap.n.HashNavigation.data = '';\n        }\n\n        // Tile\n        if (typeof sap.n.HashNavigation.object !== 'undefined' && typeof sap.n.HashNavigation.action !== 'undefined') {\n            if (typeof modelAppCacheTiles === 'undefined') {\n                sap.n.HashNavigation.initialLoad(sap.n.HashNavigation.guid);\n                return;\n            }\n\n            let tileData = sap.n.HashNavigation.findTile();\n            if (tileData.id) {\n                let dataCat = sap.n.HashNavigation.findCategory(tileData.id);\n                if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id === tileData.id) {\n                    if (!sap.n.Apps[tileData.id]) {\n                        sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                        return;\n                    }\n\n                    if (sap.n.Apps[tileData.id].onNavigation) {\n                        sap.n.Apps[tileData.id].onNavigation.forEach(function (data) {\n                            if (sap.n.HashNavigation.data) {\n                                sap.n.HashNavigation.data = JSON.parse(sap.n.HashNavigation.data);\n                            }\n                            data(sap.n.HashNavigation.data);\n                            sap.n.HashNavigation.data = '';\n                        });\n                    } else {\n                        sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                    }\n                } else {\n                    sap.n.Launchpad._HandleTilePress(tileData, dataCat);\n                }\n            } else {\n                sap.n.HashNavigation.lateNav = location.hash;\n                location.hash = '';\n            }\n\n        } else {\n            location.hash = '';\n            sap.n.Launchpad.SelectHomeMenu();\n        }\n    },\n\n    findTile: function () {\n        return ModelData.FindFirst(AppCacheTiles, ['navObject', 'navAction'], [sap.n.HashNavigation.object, sap.n.HashNavigation.action]) || {};\n    },\n\n    findCategory: function (tileId) {\n        let dataCat = {};\n\n        // TileGroups\n        modelAppCacheCategory.oData.forEach(function (category) {\n            let tileFound = ModelData.FindFirst(category.tiles, 'id', tileId)\n            if (tileFound) dataCat = category;\n        });\n\n        // TileGroupsChild\n        modelAppCacheCategoryChild.oData.forEach(function (category) {\n            let tileFound = ModelData.FindFirst(category.tiles, 'id', tileId)\n            if (tileFound) dataCat = category;\n        });\n\n        return dataCat;\n    },\n\n    toExternal: function (data) {\n        if (data.params) {\n            if (data.params === '{}') {\n                location.hash = data.target.semanticObject + '-' + data.target.action;\n            } else {\n                location.hash = data.target.semanticObject + '-' + data.target.action + '&' + encodeURIComponent(JSON.stringify(data.params));\n            }\n        } else {\n            location.hash = data.target.semanticObject + '-' + data.target.action\n        }\n    },\n}\n\n// Register Event\nwindow.onhashchange = function () {\n    sap.n.HashNavigation._handler();\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"12a6ce8a-4a08-44cf-9e02-3b810bc0c702","fieldName":"sap.n.Launchpad","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":567,"fieldType":"neptune.Script","script":"sap.n.Launchpad = {\r\n    initSideBar: false,\r\n    Timers: [],\r\n    menuArray: [],\r\n    menuIndex: 0,\r\n    useMenuList: false,\r\n    setShellBackground: true,\r\n    backgroundShade: null,\r\n    currLayout: '',\r\n    currLayoutContent: '',\r\n    searchBackgroundType: 'cards',\r\n    searchBackgroundColor: 'ColorSet6',\r\n    searchBackgroundShade: 'ShadeA',\r\n    searchEnableShadeCalc: true,\r\n    usedBackgroundType: 'cards',\r\n    usedBackgroundColor: 'ColorSet5',\r\n    usedBackgroundShade: 'ShadeA',\r\n    usedEnableShadeCalc: false,\r\n    favInProcess: false,\r\n    hideBackIcon: false,\r\n    enableFav: false,\r\n    openAppExpanded: false,\r\n    openAppsSideMenuSize: '68px',\r\n    verticalMenuLimit: 1024,\r\n    openAppPops: {},\r\n\r\n    sidepanelWidth: {\r\n        xsmall: '300px',\r\n        small: '400px',\r\n        medium: '500px',\r\n        large: '600px',\r\n        xlarge: '700px',\r\n        xxlarge: '800px',\r\n        xxxlarge: '900px',\r\n        widescreen: '1024px',\r\n        xwidescreen: '1280px',\r\n        xxwidescreen: '1980px',\r\n    },\r\n\r\n    cardsAvailable: false,\r\n    tileContent: {},\r\n    tileGroupsInPage: {},\r\n\r\n    device: {\r\n        DESKTOP: 'D',\r\n        TABLET: 'T',\r\n        PHONE: 'P'\r\n    },\r\n\r\n    UpdateTileInfo: function (data) {\r\n        // P8 Compability\r\n    },\r\n\r\n    sidepanelOpen: function (options) {\r\n        if (!options) options = {};\r\n        if (launchpadContentSideApp.getWidth() === '0px') {\r\n            let sidepanelWidth = sap.n.Launchpad.sidepanelWidth[modelAppCacheDiaSettings.oData.sidepanelWidth || 'large'];\r\n            if (options.width) sidepanelWidth = options.width;\r\n            applyCSSToElmId('launchpadContentSideApp', { display: 'flex' });\r\n            launchpadContentSideApp.setWidth(sidepanelWidth);\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n            AppCacheUserActionSidepanel.setIcon('sap-icon://navigation-right-arrow');\r\n        }\r\n    },\r\n\r\n    sidepanelClose: function () {\r\n        if (launchpadContentSideApp.getWidth() !== '0px') {\r\n            applyCSSToElmId('launchpadContentSideApp', { display: 'none' });\r\n            launchpadContentSideApp.setWidth('0px');\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n            AppCacheUserActionSidepanel.setIcon('sap-icon://navigation-left-arrow');\r\n        }\r\n    },\r\n\r\n    settingsMenuOpen: function () {\r\n        if (sap.n.Customization.isJiggling()) {\r\n            sap.n.Customization.stopJiggling();\r\n        }\r\n\r\n        if (sap.n.Customization.isDisabled()) {\r\n            AppCacheUserActionEditScreen.setVisible(false);\r\n        } else {\r\n            const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\r\n            AppCacheUserActionEditScreen.setVisible(!lockScreenChanges);\r\n        }\r\n\r\n        applyCSSToElmId('launchpadSettings', { display: 'flex' });\r\n        applyCSSToElmId('launchpadSettingsContainer', { width: '100%' });\r\n        applyCSSToElmId('launchpadSettingsClickArea', { display: 'block' });\r\n        setTimeout(function () {\r\n            addClass(launchpadSettings.getDomRef(), ['nepLaunchpadMenuSettingsOpen']);\r\n            launchpadSettingsBtn.focus();\r\n        }, 10);\r\n    },\r\n\r\n    settingsMenuClose: function () {\r\n        removeClass(launchpadSettings.getDomRef(), ['nepLaunchpadMenuSettingsOpen']);\r\n        applyCSSToElmId('launchpadSettingsContainer', { width: '0' });\r\n        applyCSSToElmId('launchpadSettingsClickArea', { display: 'none' });\r\n        applyCSSToElmId('launchpadSettings', { display: 'none' });\r\n    },\r\n\r\n    setOpenAppsExpanded: function () {\r\n        openApps.setVisible(sap.n.Launchpad.openAppExpanded);\r\n        openAppMaster.setIcon(`sap-icon://fa-solid/${sap.n.Launchpad.openAppExpanded ? 'caret-down' : 'caret-right'}`);\r\n    },\r\n\r\n    setMenuActiveState: function () {\r\n        ContentMenu.getItems().forEach(function (menu) {\r\n            if (menu.getIcon()) {\r\n                menu.addStyleClass('nepTreeItemAction');\r\n            } else {\r\n                menu.removeStyleClass('nepTreeItemAction');\r\n            }\r\n        });\r\n    },\r\n\r\n    handleTreeNavigation: function (selectedItem) {\r\n        const context = selectedItem.getBindingContext();\r\n        const data = context.getObject();\r\n\r\n        let dataTile, dataCat, pageCatId;\r\n\r\n        switch (data.type) {\r\n            case 'tile':\r\n                dataTile = ModelData.FindFirst(AppCacheTiles, 'id', data.id);\r\n                dataCat = ModelData.FindFirst(AppCacheCategory, 'id', data.parent);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.parent);\r\n                sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                break;\r\n\r\n            case 'cat':\r\n                dataCat = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\r\n                location.hash = 'neptopmenu&' + dataCat.id;\r\n                sap.n.currentView = '';\r\n                break;\r\n\r\n            case 'subcat':\r\n                sap.n.Launchpad.handleAppTitle();\r\n                dataCat = ModelData.FindFirst(AppCacheCategory, 'id', data.parent);\r\n                if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.parent);\r\n                sap.n.Launchpad.handleAppTitle(dataCat.title);\r\n\r\n                sap.n.currentView = '';\r\n\r\n                if (sap.n.Launchpad.currentTileGroupPage !== `page${dataCat.id}`) {\r\n                    sap.n.Launchpad.BuildTiles(dataCat, data.id);\r\n                } else {\r\n                    if (sap.n.Launchpad.currentTile) AppCache.Back();\r\n                    sap.n.Launchpad.scrollToTileGroup(data.id);\r\n                }\r\n                break;\r\n        }\r\n\r\n        sap.n.Launchpad.overflowMenuClose();\r\n    },\r\n\r\n    overflowMenuClose: function () {\r\n        launchpadOverflow.removeStyleClass('nepLaunchpadMenuOverflowOpen');\r\n        applyCSSToElmId('launchpadOverflowContainer', { width: '0' });\r\n        applyCSSToElmId('launchpadOverflowClickArea', { display: 'none' });\r\n        launchpadContentMenu.setVisible(false);\r\n    },\r\n\r\n    overflowMenuOpen: function () {\r\n        launchpadContentMenu.setVisible(true);\r\n        const size = (launchpadContentMenu.getWidth() === '0px') ? '300px' : '0px';\r\n        launchpadContentMenu.addItem(pageVerticalMenu);\r\n        launchpadContentMenu.setWidth(size);\r\n        openAppMaster.setVisible((openApps.getItems().length > 0));\r\n\r\n        setTimeout(function () {\r\n            sap.n.Launchpad.setLaunchpadContentWidth();\r\n            sap.n.Layout.setHeaderPadding();\r\n        }, 300);\r\n\r\n    },\r\n\r\n    setLaunchpadContentWidth: function () {\r\n        const menuWidth = getWidth(elById('launchpadContentMenu'));\r\n        const navWidth = getWidth(elById('launchpadContentNavigator'));\r\n\r\n        const left = (menuWidth + navWidth) + 'px';\r\n        const right = launchpadContentSideApp.getWidth();\r\n\r\n        if (isRTL()) {\r\n            let l = left;\r\n            left = right;\r\n            right = l;\r\n        }\r\n\r\n        applyCSSToElmId('launchpadContentMain', {\r\n            'left': left,\r\n            'right': right,\r\n            'width': 'auto'\r\n        });\r\n    },\r\n\r\n    setShellWidth: function () {\r\n        if (!sap.n.Launchpad.currLayout) return;\r\n\r\n        // Launchpad Width\r\n        ['nepShellFull', 'nepShellXXXLarge', 'nepShellXXLarge', 'nepShellXLarge', 'nepShellLarge', 'nepShellMedium', 'nepShellSmall', 'nepShellXSmall'].forEach(function (c) {\r\n            AppCacheShellUI.removeStyleClass(c);\r\n        });\r\n\r\n        let shellContentWidth = sap.n.Launchpad.currLayoutContent.shellContentWidth || 'Large';\r\n        AppCacheShellUI.addStyleClass('nepShell' + shellContentWidth);\r\n\r\n        if (shellContentWidth === 'Full') {\r\n            AppCacheShellUI.setAppWidthLimited(false);\r\n        } else {\r\n            AppCacheShellUI.setAppWidthLimited(true);\r\n        }\r\n\r\n        // Header Width\r\n        ['nepHeaderFull', 'nepHeaderXXXLarge', 'nepHeaderXXLarge', 'nepHeaderXLarge', 'nepHeaderLarge', 'nepHeaderMedium', 'nepHeaderSmall', 'nepHeaderXSmall'].forEach(function (c) {\r\n            toolTopMenu.removeStyleClass(c);\r\n        });\r\n\r\n        let headerContentWidth = sap.n.Launchpad.currLayoutContent.headerContentWidth || 'Full';\r\n        toolTopMenu.addStyleClass('nepHeader' + headerContentWidth);\r\n    },\r\n\r\n    BuildCardContent: function (config) {\r\n        let tiles = [];\r\n        let rowId = `${nepPrefix()}Cat${config.dataCat.id}`;\r\n\r\n        // Favorites \r\n        if (config.isFav) {\r\n            tiles = modelAppCacheTilesFav.oData;\r\n            rowId = `${nepPrefix()}CatFav${config.dataCat.id}`;\r\n        } else {\r\n            tiles = sap.n.Customization.getTiles(config.dataCat.id);\r\n        }\r\n\r\n        // Card Group\r\n        if (config.parentCat && config.parentCat.cardPerRow && !config.dataCat.cardPerRow) config.dataCat.cardPerRow = config.parentCat.cardPerRow;\r\n        let cardPerRow = config.dataCat.cardPerRow || sap.n.Layout.row.MORE;\r\n        config.cardParent.addStyleClass('nepBlockLayoutTileRow ' + rowId + ' nepGrid' + cardPerRow);\r\n\r\n        sap.n.Launchpad.backgroundShade = '';\r\n\r\n        tiles.forEach(function (tile) {\r\n            if (!tile || !tile.id) return;\r\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', tile.id);\r\n            if (!dataTile) return;\r\n            if (dataTile.disabled) return;\r\n\r\n            // Fav settings override\r\n            if (config.isFav) {\r\n                dataTile = JSON.parse(JSON.stringify(dataTile));\r\n                if (tile.frameType) dataTile.frameType = tile.frameType;\r\n                if (tile.forceRow) dataTile.forceRow = tile.forceRow;\r\n            }\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n            if (dataTile.type === 'storeitem' && isCordova()) return;\r\n\r\n            // Tile Content\r\n            config.cardParent.addItem(sap.n.Card.buildCardDefault({\r\n                pageID: config.pageID,\r\n                dataTile: dataTile,\r\n                dataCat: config.dataCat,\r\n                isFav: config.isFav,\r\n                path: config.path,\r\n            }));\r\n        });\r\n\r\n        // add add new Card Button\r\n        if (!config.isFav && !sap.n.Customization.isDisabled() && sap.n.Customization.isInitialized()) {\r\n            const cardContainer = new sap.m.FlexBox(nepId(), {\r\n                width: '100%',\r\n                fitContainer: true,\r\n            }).addStyleClass('nepFCardContainer nepNewCard nepTile100 ui-state-disabled');\r\n            \r\n            const btnAddCard = new sap.m.Button();\r\n            btnAddCard.tooltip = new sap.ui.core.TooltipBase().setText('');\r\n            btnAddCard.setIcon('sap-icon://add');\r\n            btnAddCard.setIcon\r\n            btnAddCard.setType(sap.m.ButtonType.Default);\r\n            btnAddCard.setWidth('100%');\r\n            btnAddCard.attachPress(() => {\r\n                sap.n.Customization.onAddTile(config.path);\r\n            });\r\n            cardContainer.addItem(btnAddCard);\r\n            config.cardParent.addItem(cardContainer);\r\n        }\r\n    },\r\n\r\n    setInitialGridWidth: function (grid) {\r\n        let navWidth = getWidth('#AppCacheNav');\r\n\r\n        let c = '';\r\n        if (navWidth < 380) c = 'nepGridXSmall';\r\n        else if (navWidth < 680) c = 'nepGridSmall';\r\n        else if (navWidth < 980) c = 'nepGridMedium';\r\n        else if (navWidth < 1280) c = 'nepGridLarge';\r\n        else if (navWidth < 1580) c = 'nepGridXLarge';\r\n        else if (navWidth < 1880) c = 'nepGridXXLarge';\r\n        else if (navWidth < 2360) c = 'nepGridXXXLarge';\r\n\r\n        grid.addStyleClass(c);\r\n    },\r\n\r\n    applyLanguages: function (languages) {\r\n        inAppCacheFormSettingsLang.setVisible(true);\r\n        inAppCacheFormSettingsLang.destroyItems();\r\n\r\n        inAppCacheFormSettingsLang.addItem(new sap.ui.core.ListItem({ key: '', text: '' }));\r\n        masterLanguages.forEach(function ({ ISOCODE: key, NAME: text }) {\r\n            if (languages.includes(key)) {\r\n                inAppCacheFormSettingsLang.addItem(new sap.ui.core.ListItem({ key, text }));\r\n            }\r\n        });\r\n    },\r\n\r\n    applyLayout: function (layout) {\r\n        if (!layout) return;\r\n        if (sap.n.Launchpad.currLayout === layout.id) return;\r\n\r\n        ModelData.Delete(AppCache.layout, 'active', false);\r\n\r\n        if (AppCache.layout.length > 1) {\r\n            inAppCacheFormSettingsTHEME.setVisible(true);\r\n            inAppCacheFormSettingsTHEME.destroyItems();\r\n            AppCache.layout.forEach(function (data) {\r\n                inAppCacheFormSettingsTHEME.addItem(new sap.ui.core.Item(nepId(), {\r\n                    key: data.id,\r\n                    text: data.name\r\n                }));\r\n            });\r\n        }\r\n\r\n        if (layout.style) {\r\n            const cssText = layout.style.replace('<style>', '').replace('</style>', '');\r\n            const s = createStyle(cssText);\r\n            appendStyle(\r\n                elById('NeptuneStyleDiv'),\r\n                s\r\n            );\r\n        }\r\n\r\n        [\r\n            'searchBackgroundType', 'searchBackgroundColor', 'searchBackgroundShade', 'searchEnableShadeCalc',\r\n            'usedBackgroundType', 'usedBackgroundColor', 'usedBackgroundShade', 'usedEnableShadeCalc',\r\n        ].forEach(function (k) {\r\n            if (layout[k]) sap.n.Launchpad[k] = layout[k];\r\n        });\r\n\r\n        sap.n.Launchpad.hideBackIcon = !!layout.topBackIconHide;\r\n\r\n        if (typeof StatusBar !== 'undefined') {\r\n            switch (layout.mobileStatusbarText) {\r\n                case 'styleLightContent':\r\n                    StatusBar.styleLightContent();\r\n                    break;\r\n\r\n                case 'styleBlackTranslucent':\r\n                    StatusBar.styleBlackTranslucent();\r\n                    break;\r\n\r\n                case 'styleBlackOpaque':\r\n                    StatusBar.styleBlackOpaque();\r\n                    break;\r\n\r\n                default:\r\n                    StatusBar.styleDefault();\r\n                    break;\r\n            }\r\n\r\n            const c = layout.mobileStatusbarColor;\r\n            if (c) {\r\n                if (c.includes('#')) StatusBar.backgroundColorByHexString(c);\r\n                else StatusBar.backgroundColorByName(c);\r\n            } else {\r\n                StatusBar.backgroundColorByHexString('#000000');\r\n                StatusBar.styleDefault();\r\n            }\r\n        }\r\n\r\n        sap.n.Launchpad.currLayout = layout.id;\r\n        sap.n.Launchpad.currLayoutContent = layout;\r\n        sap.n.Launchpad.setShellWidth();\r\n        sap.n.Layout.setHeaderPadding();\r\n    },\r\n\r\n    applyThemeMode: function () {\r\n        let theme = sap.ui.getCore().getConfiguration().getTheme();\r\n        const el = document.querySelector('html');\r\n        removeClass(el, ['nepLayout', 'nepThemeLight', 'nepThemeDark']);\r\n\r\n        if (theme === 'sap_fiori_3_dark' || theme === 'sap_horizon_dark' || theme === 'neptune_horizon_dark') addClass(el, ['nepLayout', 'nepThemeDark']);\r\n        else addClass(el, ['nepLayout', 'nepThemeLight']);\r\n    },\r\n\r\n    applyUserTheme: function () {\r\n        if (modelAppCacheDiaSettings.oData.userTheme) {\r\n            AppCache.layout.forEach(function (data) {\r\n                if (data.id === modelAppCacheDiaSettings.oData.userTheme) {\r\n                    let layout = JSON.parse(JSON.stringify(data));\r\n\r\n                    // UI5 Theme \r\n                    if (layout.ui5Theme) {\r\n                        if (layout.ui5Theme.indexOf('sap_') === -1) sap.ui.getCore().setThemeRoot(layout.ui5Theme, '/public/ui5theme/' + layout.ui5Theme);\r\n                        sap.ui.getCore().applyTheme(layout.ui5Theme);\r\n                    } else {\r\n                        sap.ui.getCore().applyTheme(AppCache.defaultTheme);\r\n                    }\r\n\r\n                    if (modelAppCacheDiaSettings.oData.userBackImage) {\r\n                        layout.style = layout.style.replace('</style>', `.nepShell {\r\n                                background-image: url('${modelAppCacheDiaSettings.oData.userBackImage}') !important;\r\n                                background-repeat:no-repeat;\r\n                                background-size:cover;\r\n                            }\r\n                            .nepPage {\r\n                                background:transparent;\r\n                            }\r\n                            </style>\r\n                        `);\r\n                    }\r\n                    sap.n.Launchpad.currLayout = '';\r\n                    sap.n.Launchpad.applyLayout(layout);\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    BuildMenu: function () {\r\n        // Enable Fav Buttons\r\n        let cat = ModelData.FindFirst(AppCacheCategory, 'inclFav', true);\r\n        if (cat && cat.inclFav) {\r\n            sap.n.Launchpad.enableFav = cat.inclFav;\r\n        } else {\r\n            cat = ModelData.FindFirst(AppCacheCategoryChild, 'inclFav', true);\r\n            if (cat && cat.inclFav) sap.n.Launchpad.enableFav = cat.inclFav;\r\n        }\r\n\r\n        // Add Tile Group/Tile CSS\r\n        appendStyle(\r\n            elById('NeptuneStyleDivDynamic'),\r\n            createStyle(sap.n.Launchpad.buildContentCss())\r\n        );\r\n\r\n        if (AppCache.config.enableTopMenu) sap.n.Launchpad.BuildMenuTop();\r\n        sap.n.Launchpad.BuildTreeMenu();\r\n        sap.n.Launchpad.BuildTags();\r\n        sap.n.Launchpad.SelectHomeMenu();\r\n\r\n        // Fallback, no startApp or Tiles -> Build empty page \r\n        if (!AppCache.StartApp && !AppCache.StartWebApp && !modelAppCacheCategory.oData.length) {\r\n\r\n            let pageCat = new sap.m.Page(nepId(), {\r\n                showHeader: false,\r\n                showFooter: false,\r\n                backgroundDesign: 'Transparent',\r\n            });\r\n\r\n            pageCat.addStyleClass('nepPage');\r\n            AppCacheNav.addPage(pageCat);\r\n            AppCacheNav.to(pageCat);\r\n\r\n        }\r\n\r\n    },\r\n\r\n    BuildMenuTop: function () {\r\n        AppCacheAppButton.removeAllItems();\r\n\r\n        // BuildMenuTop will be called via BuildMenu when sap.n.Customization.init is complete\r\n        if (!sap.n.Customization.isInitialized()) {\r\n            return;\r\n        }\r\n        \r\n        sap.n.Customization.getCategories().forEach(function (dataCat) {\r\n            if (dataCat.hideFromMenu) return;\r\n            \r\n            let menuText = sap.n.Launchpad.translateTile('title', dataCat);\r\n            if (dataCat.isCustom) {\r\n                menuText = dataCat.props.menuText;\r\n            }\r\n            \r\n            let popSubMenu;\r\n            let menuItem = new sap.m.Button(`${nepPrefix()}${dataCat.id}`, {\r\n                text: menuText,\r\n                type: 'Transparent',\r\n                press: function (oEvent) {\r\n                    location.hash = `neptopmenu&${dataCat.id}`;\r\n                    if (popSubMenu) popSubMenu.close();\r\n                }\r\n            }).addStyleClass('nepTopMenuBtn');\r\n\r\n            // Navigation Panel\r\n            const tileGroups = sap.n.Customization.getTileGroups(dataCat.id);\r\n            if (tileGroups.length > 0) {\r\n                let listSubMenu = new sap.m.List(nepId(), {\r\n                    showSeparators: 'None'\r\n                });\r\n\r\n                let menuFn = {\r\n                    popOverEntered: false,\r\n                    btnEntered: false\r\n                };\r\n\r\n                let buildSubMenu = false;\r\n                tileGroups.forEach(function (data) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                    if (!dataCatChild) return;\r\n                    if (dataCatChild.hideFromMenu) return;\r\n\r\n                    const navBtn = new sap.m.StandardListItem(nepId(), {\r\n                        title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                        type: 'Active',\r\n                        press: function (e) {\r\n                            const pageCatID = `page${dataCat.id}`;\r\n\r\n                            if (sap.n.Launchpad.currentTileGroupPage === pageCatID) {\r\n                                sap.n.Launchpad.scrollToTileGroup(dataCatChild.id);\r\n                            } else if (sap.n.Launchpad.currentTileGroupPage !== pageCatID) {\r\n                                menuItem.fireEvent('press');\r\n                                sap.n.Launchpad.BuildTiles(dataCat, dataCatChild.id);\r\n                            } else {\r\n                                if (sap.n.Launchpad.currentTile) AppCache.Back();\r\n                                sap.n.Launchpad.scrollToTileGroup(dataCatChild.id);\r\n                            }\r\n\r\n                            menuFn.popOverEntered = false;\r\n                            menuFn.btnEntered = false;\r\n                            if (popSubMenu) popSubMenu.close();\r\n\r\n                            AppCacheAppButton.getItems().forEach(function (item) {\r\n                                if (item.removeStyleClass) item.removeStyleClass('nepTopMenuActive');\r\n                            });\r\n                            menuItem.addStyleClass('nepTopMenuActive');\r\n                        }\r\n                    });\r\n\r\n                    listSubMenu.addItem(navBtn);\r\n                    buildSubMenu = true;\r\n                });\r\n\r\n                if (buildSubMenu) {\r\n                    popSubMenu = new sap.m.Popover(`${nepPrefix()}SubMenu${ModelData.genID()}`, {\r\n                        placement: 'Bottom',\r\n                        resizable: false,\r\n                        showArrow: false,\r\n                        showHeader: false,\r\n                        contentWidth: '300px',\r\n                        offsetY: 5\r\n                    }).addStyleClass('nepSubMenu nepOverflowMenu');\r\n\r\n                    popSubMenu.attachBrowserEvent('mouseenter', function (e) {\r\n                        menuFn.popOverEntered = true;\r\n                        menuItem.addStyleClass('nepTopMenuActiveHover');\r\n                    });\r\n\r\n                    popSubMenu.attachBrowserEvent('mouseleave', function (e) {\r\n                        menuFn.popOverEntered = false;\r\n                        menuItem.removeStyleClass('nepTopMenuActiveHover');\r\n\r\n                        setTimeout(function () {\r\n                            if (!menuFn.btnEntered) popSubMenu.close();\r\n                        }, 100);\r\n                    });\r\n\r\n                    // Open SubMenu\r\n                    menuItem.attachBrowserEvent('mouseenter', function (e) {\r\n                        popSubMenu.openBy(menuItem);\r\n                        menuFn.btnEntered = true;\r\n                    });\r\n\r\n                    menuItem.attachBrowserEvent('mouseleave', function (e) {\r\n                        menuFn.btnEntered = false;\r\n                        setTimeout(function () {\r\n                            if (!menuFn.popOverEntered) popSubMenu.close();\r\n                        }, 100);\r\n                    });\r\n\r\n                    popSubMenu.addContent(listSubMenu);\r\n                }\r\n            }\r\n\r\n            AppCacheAppButton.addItem(menuItem);\r\n        });\r\n    },\r\n\r\n    BuildTags: function () {\r\n        AppCacheShellSearchTags.destroyItems();\r\n\r\n        let tags = {};\r\n        Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\r\n            if (!tile.tags) return;\r\n            let tileTags = tile.tags.split(',');\r\n            tileTags.forEach(function (tag) {\r\n                tag = tag.toUpperCase();\r\n                if (tags[tag]) return;\r\n                tags[tag] = tag\r\n            });\r\n        });\r\n\r\n        let tagsArr = [];\r\n        Object.entries(tags).forEach(function ([_, elem]) {\r\n            tagsArr.push({ tag: elem });\r\n        });\r\n\r\n        toolVerticalMenuTags.setVisible(tagsArr.length > 0);\r\n        tagsArr.sort(sort_by('tag'));\r\n\r\n        tagsArr.forEach(function (tag) {\r\n            AppCacheShellSearchTags.addItem(new sap.ui.core.ListItem({\r\n                key: tag.tag,\r\n                text: tag.tag\r\n            }));\r\n        });\r\n    },\r\n\r\n    BuildTreeMenu: function () {\r\n        let treeData = [];\r\n        let _buildMenuTile = function (dataTileID, dataCat, treeData, parent) {\r\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', dataTileID.id);\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n\r\n            let title = sap.n.Launchpad.translateTile('title', dataTile);\r\n\r\n            if (title && (dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.actionType === 'F' || dataTile.type === 'storeitem')) {\r\n                let icon = dataTile.icon || 'sap-icon://less';\r\n                let type = 'tile';\r\n\r\n                if (dataTile.actiongroup) {\r\n                    icon = ''; //'sap-icon://fa-solid/layer-group';\r\n                    type = 'subcat';\r\n                }\r\n\r\n                treeData.push({\r\n                    id: dataTile.id,\r\n                    parent: parent || dataCat.id,\r\n                    title: title,\r\n                    type: type,\r\n                    filter: sap.n.Launchpad.translateTile('title', dataCat),\r\n                    tags: dataTile.tags,\r\n                    icon: icon\r\n                });\r\n            }\r\n\r\n            // Tile with Tile Group\r\n            if (dataTile.actiongroup) {\r\n                let dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataTile.actiongroup);\r\n                if (!dataCat) return;\r\n\r\n                // Tiles\r\n                Array.isArray(dataCat.tiles) && dataCat.tiles.forEach(function (dataSubTile) {\r\n                    _buildMenuTile(dataSubTile, dataCat, treeData, dataTile.id);\r\n                });\r\n\r\n                // Tile Groups\r\n                Array.isArray(dataCat.tilegroups) && dataCat.tilegroups.forEach(function (dataCatID) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', dataCatID.id);\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataCatID.id);\r\n                    if (!dataCatChild) return;\r\n                    if (dataCatChild.hideFromMenu) return;\r\n\r\n                    treeData.push({\r\n                        id: dataCatChild.id,\r\n                        parent: dataTile.id,\r\n                        title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                        type: 'childcat',\r\n                        icon: '',\r\n                        filter: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                    });\r\n\r\n                    // Favorites \r\n                    if (dataCatChild.inclFav) {\r\n                        modelAppCacheTilesFav.oData.forEach(function (dataTile) {\r\n                            _buildMenuTile(dataTile, dataCatChild, treeData, dataCatID.id);\r\n                        });\r\n                    }\r\n\r\n                    // Tiles\r\n                    dataCatChild.tiles.forEach(function (dataTile) {\r\n                        _buildMenuTile(dataTile, dataCatChild, treeData, dataCatID.id);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n\r\n        modelAppCacheCategory.oData.forEach(function (dataCat) {\r\n            if (dataCat.hideFromMenu) return;\r\n\r\n            treeData.push({\r\n                id: dataCat.id,\r\n                parent: '',\r\n                title: sap.n.Launchpad.translateTile('title', dataCat),\r\n                type: 'cat',\r\n            });\r\n\r\n            // Favorites \r\n            if (dataCat.inclFav) {\r\n                modelAppCacheTilesFav.oData.forEach(function (dataTileID) {\r\n                    _buildMenuTile(dataTileID, dataCat, treeData);\r\n                });\r\n            }\r\n\r\n            // Tiles\r\n            dataCat.tiles.forEach(function (dataTile) {\r\n                _buildMenuTile(dataTile, dataCat, treeData);\r\n            });\r\n\r\n            dataCat.tilegroups.forEach(function (dataCatID) {\r\n                let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', dataCatID.id);\r\n                if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataCatID.id);\r\n                if (!dataCatChild) return;\r\n                if (dataCatChild.hideFromMenu) return;\r\n\r\n                treeData.push({\r\n                    id: dataCatChild.id,\r\n                    parent: dataCat.id,\r\n                    title: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                    type: 'subcat',\r\n                    icon: '', //'sap-icon://fa-solid/layer-group',\r\n                    filter: sap.n.Launchpad.translateTile('title', dataCatChild),\r\n                });\r\n\r\n                // Favorites \r\n                if (dataCatChild.inclFav) {\r\n                    modelAppCacheTilesFav.oData.forEach(function (dataTile) {\r\n                        _buildMenuTile(dataTile, dataCatChild, treeData);\r\n                    });\r\n                }\r\n\r\n                // Tiles\r\n                dataCatChild.tiles.forEach(function (dataTile) {\r\n                    _buildMenuTile(dataTile, dataCatChild, treeData);\r\n                });\r\n            });\r\n        });\r\n\r\n        modelContentMenu.setData({\r\n            'children': _convertFlatToNested(treeData, 'id', 'parent')\r\n        });\r\n    },\r\n\r\n    scrollToTileGroup: function (tileGroupId) {\r\n        setTimeout(function () {\r\n            const elm = querySelector(`#${sectionPrefix()}${tileGroupId}`);\r\n            if (elm && elm.scrollIntoView) {\r\n                elm.scrollIntoView();\r\n            }\r\n        }, 500);\r\n    },\r\n\r\n    RebuildTiles: function () {\r\n        let currentPage = AppCacheNav.getCurrentPage();\r\n        AppCacheNav.getPages().forEach(function (page) {\r\n            // only for Tile Group + Childs \r\n            if (page.sId.indexOf('page') > -1) {\r\n                // destroy page content, rebuild later when user navigates there\r\n                page.destroyContent();\r\n\r\n                // rebuild current page \r\n                if (currentPage.sId === page.sId) {\r\n                    const id = currentPage.sId;\r\n                    const pageId = id.split('page')[1];\r\n\r\n                    // can be either a category, or a tilegroup\r\n                    let item = sap.n.Customization.getCategory(pageId);\r\n                    if (!item) item = sap.n.Customization.getTileGroup(pageId);\r\n\r\n                    if (!item) AppCache.Home();\r\n                    else sap.n.Launchpad.BuildTiles(item, item.id);\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    SelectHomeMenu: function () {\r\n        // Start with hash \r\n        if (location.hash) {\r\n            sap.n.HashNavigation._handler();\r\n        } else {\r\n            const category = sap.n.Customization.getCategories()[0];\r\n            if (category) location.hash = 'neptopmenu&' + category.id;\r\n        }\r\n    },\r\n\r\n    SetHeader: function () {\r\n        if (sap.n.Launchpad.currentTile) {\r\n            sap.n.Launchpad.setActiveIcon(sap.n.Launchpad.currentTile.id);\r\n        } else {\r\n            sap.n.Launchpad.setActiveIcon();\r\n        }\r\n    },\r\n\r\n    MarkTopMenu: function (menuID) {\r\n        AppCacheAppButton.getItems().forEach(function (item) {\r\n            if (item.removeStyleClass) item.removeStyleClass('nepTopMenuActive');\r\n            if (item.sId === `${nepPrefix()}${menuID}`) item.addStyleClass('nepTopMenuActive');\r\n        });\r\n    },\r\n\r\n    GetGroupHeader: function (data, cards) {\r\n        let header = new sap.m.FlexBox(nepId()).addStyleClass('nepGrid');        \r\n        sap.n.Launchpad.setInitialGridWidth(header);\r\n\r\n        // Content Width\r\n        if (data.cardContentWidth) {\r\n            header.addStyleClass('nepGroup' + data.cardContentWidth);\r\n        }\r\n\r\n        let cardContentAlign = sap.n.Launchpad.currLayoutContent.cardContentAlign || 'Center';\r\n        if (cardContentAlign) {\r\n            header.addStyleClass('nepGridAlign' + cardContentAlign);\r\n        }\r\n\r\n        if (!data.hideHeader || data.isCustom) {\r\n            // Group Header\r\n            const groupHeader = sap.n.Launchpad.buildGroupHeader(data);\r\n            const oHeaderCell = new sap.m.VBox(nepId(), {});\r\n            oHeaderCell.addStyleClass('nepTileMax');\r\n            oHeaderCell.addItem(groupHeader);\r\n            header.addItem(oHeaderCell);\r\n        }\r\n\r\n        // Number of tiles check, show header cells only if there are more than one tiles\r\n        const onlyOneCard = cards.getItems().length === 1;\r\n\r\n        if (data.enableMessage) {\r\n            // Message \r\n            const message = sap.n.Launchpad.buildGroupMessage(data);\r\n            if (!onlyOneCard) {\r\n                const oHeaderCell = new sap.m.VBox(nepId(), {});\r\n                oHeaderCell.addStyleClass('nepTileMax');\r\n                oHeaderCell.addItem(message);\r\n                header.addItem(oHeaderCell);\r\n            }\r\n        }\r\n\r\n        return header;\r\n    },\r\n\r\n    GetGroupCards: function (data, type, dragDropContext) {\r\n        const cards = new sap.m.FlexBox(nepId()).addStyleClass('nepGrid');\r\n        if (data.styleClass) cards.addStyleClass(data.styleClass);\r\n\r\n        if (!data.inclFav) {\r\n            cards.addStyleClass(sap.n.Customization.tilesDragDropClass);\r\n        }\r\n\r\n        // use Neptune Element Query to determine dynamic page width\r\n        neptune.ElementQuery.register(cards, {\r\n            prefix: 'nepGrid',\r\n            isolate: true,\r\n            width: AppCache.cssGridBreakpoints\r\n        });\r\n        \r\n        sap.n.Launchpad.setInitialGridWidth(cards);\r\n\r\n        // Content Width\r\n        if (data.cardContentWidth) {\r\n            cards.addStyleClass('nepGroup' + data.cardContentWidth);\r\n        }\r\n\r\n        // Content Alignment\r\n        let cardContentAlign = sap.n.Launchpad.currLayoutContent.cardContentAlign || 'Center';\r\n        if (data.cardContentAlign) cardContentAlign = data.cardContentAlign\r\n        if (cardContentAlign) {\r\n            cards.addStyleClass('nepGridAlign' + cardContentAlign);\r\n        }\r\n\r\n        function applyDragDrop() {\r\n            if (data.inclFav && !(sap.n.Customization.isDisabled() || sap.n.Customization.areScreensLocked())) {\r\n                sap.n.Card.applyDragDropToFavorites(cards);\r\n            }\r\n        }\r\n\r\n        function applyTileGroupEnhancement() {\r\n            if (sap.n.Enhancement.AfterTileGroupRenderer) {\r\n                try {\r\n                    sap.n.Enhancement.AfterTileGroupRenderer(cards, data);\r\n                } catch (e) {\r\n                    appCacheError('Enhancement AfterTileGroupRenderer ' + e);\r\n                }\r\n            }\r\n        }\r\n        \r\n        cards.onAfterRendering = function () {\r\n            applyDragDrop();\r\n            applyTileGroupEnhancement();\r\n        }\r\n\r\n        return cards;\r\n    },\r\n\r\n    BuildTiles: function (dataCat, subCat) {\r\n        if (!modelAppCacheTiles.oData.length) return;\r\n\r\n        let pageCatID = `page${dataCat.id}`;\r\n        let isFav = dataCat.inclFav;\r\n\r\n        sap.n.Launchpad.currentTileGroupPage = pageCatID;\r\n        sap.n.currentView = '';\r\n\r\n        // Mark Menu \r\n        sap.n.Launchpad.MarkTopMenu(dataCat.id);\r\n\r\n        // UI Handling\r\n        sap.n.Launchpad.setShellWidth();\r\n        sap.n.Launchpad.setHideHeader(false);\r\n\r\n        // Back Button         \r\n        if (!subCat && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\r\n\r\n        // Create Page Per Tile Group \r\n        let pageCat = sap.ui.getCore().byId(pageCatID);\r\n\r\n        // Pages with Fav, always create\r\n        const tileGroups = sap.n.Customization.getTileGroups(dataCat.id);\r\n        tileGroups.forEach(function (data) {\r\n            let dataCatChild = sap.n.Customization.getCategory(data.id);\r\n            if (!dataCatChild) dataCatChild = sap.n.Customization.getTileGroup(data.id);\r\n            if (dataCatChild && dataCatChild.inclFav) isFav = true;\r\n        });\r\n\r\n        if (pageCat && isFav) {\r\n            AppCacheNav.removePage(pageCat);\r\n            pageCat.destroy();\r\n            pageCat = null;\r\n        }\r\n\r\n        if (!pageCat) {\r\n            pageCat = new sap.m.Page(pageCatID, {\r\n                showHeader: false,\r\n                showFooter: false,\r\n                backgroundDesign: 'Transparent',\r\n            });\r\n\r\n            pageCat.onAfterRendering = function () {\r\n                if (!sap.n.Customization.isDisabled() && !sap.n.Customization.areScreensLocked()) {\r\n                    sap.n.Customization.applyDragDropToTiles(pageCat);\r\n                }\r\n            };\r\n\r\n            addCustomData(pageCat, {\r\n                type: 'page',\r\n                context: 'page',\r\n                'category-id': dataCat.id,\r\n            });\r\n\r\n            pageCat.addStyleClass('nepPage');\r\n            AppCacheNav.addPage(pageCat);\r\n        }\r\n\r\n        if (!pageCat.getContent().length) {\r\n\r\n            let versionParts = sap.ui.version.split(\".\");\r\n\r\n            // BlockLayout vs Cards\r\n            if (versionParts[0] >= 1 && versionParts[1] >= 64) {\r\n\r\n                sap.n.Launchpad.cardsAvailable = true;\r\n\r\n                //Grid containerOpenApp\r\n                let gridContainer = new sap.m.FlexBox(`${sectionPrefix()}${dataCat.id}`, {\r\n                    direction: 'Column',\r\n                    alignItems: 'Start'\r\n                }).addStyleClass('nepGridContainer nepGridCards');\r\n                \r\n                addCustomData(gridContainer, {\r\n                    type: 'category',\r\n                    context: 'category-tiles',\r\n                    'category-id': dataCat.id,\r\n                });\r\n\r\n                const cards = sap.n.Launchpad.GetGroupCards(dataCat, 'category', { category: dataCat });\r\n                sap.n.Launchpad.BuildCardContent({\r\n                    pageID: pageCatID,\r\n                    dataCat: dataCat,\r\n                    cardParent: cards,\r\n                    isFav: !!dataCat.inclFav,\r\n                    path: [dataCat.id],\r\n                });\r\n\r\n                gridContainer.addItem(sap.n.Launchpad.GetGroupHeader(dataCat, cards));\r\n                gridContainer.addItem(cards);\r\n\r\n                // Add Grid to Page\r\n                if (tileGroups.length > 0 || cards.getItems().length > 0) {\r\n                    pageCat.addContent(gridContainer);\r\n                }\r\n\r\n                // Child Tile Groups\r\n                tileGroups.forEach(function (data) {\r\n                    let dataCatChild = sap.n.Customization.getCategory(data.id);\r\n\r\n                    if (!dataCatChild) dataCatChild = sap.n.Customization.getTileGroup(data.id);\r\n                    if (!dataCatChild) return;\r\n\r\n                    //Grid containerOpenApp\r\n                    let tilegroupContainer = new sap.m.FlexBox(`${sectionPrefix()}${dataCat.id}${dataCatChild.id}`, {\r\n                        direction: 'Column',\r\n                        alignItems: 'Start'\r\n                    }).addStyleClass('nepGridContainer nepGridCards');\r\n                    \r\n                    addCustomData(tilegroupContainer, {\r\n                        type: 'tilegroup',\r\n                        context: 'tilegroup-tiles',\r\n                        'category-id': dataCat.id,\r\n                        'tilegroup-id': dataCatChild.id,\r\n                    });\r\n\r\n                    const cards = sap.n.Launchpad.GetGroupCards(\r\n                        dataCatChild,\r\n                        'tilegroup',\r\n                        {\r\n                            category: dataCat,\r\n                            tilegroup: dataCatChild,\r\n                        }\r\n                    );\r\n                    if (!!dataCatChild.inclFav) {\r\n                        cards.addStyleClass('favorite-cards');\r\n                    }\r\n                    sap.n.Launchpad.BuildCardContent({\r\n                        pageID: pageCatID,\r\n                        dataCat: dataCatChild,\r\n                        cardParent: cards,\r\n                        parentCat: dataCat,\r\n                        isFav: !!dataCatChild.inclFav,\r\n                        path: [dataCat.id, dataCatChild.id],\r\n                    });\r\n\r\n                    tilegroupContainer.addItem(sap.n.Launchpad.GetGroupHeader(dataCatChild, cards));\r\n                    tilegroupContainer.addItem(cards);\r\n\r\n                    pageCat.addContent(tilegroupContainer);\r\n                });\r\n\r\n                if (tileGroups.length > 0 || cards.getItems().length > 0) {\r\n                    // add an empty box\r\n                    pageCat.addContent(\r\n                        new sap.m.HBox(nepId(), {\r\n                            height: '50px'\r\n                        })\r\n                    );\r\n                }\r\n            } else {\r\n                // Build Group Header\r\n                if (!dataCat.hideHeader) pageCat.addContent(sap.n.Launchpad.buildGroupHeader(dataCat));\r\n\r\n                // Message \r\n                if (dataCat.enableMessage) pageCat.addContent(sap.n.Launchpad.buildGroupMessage(dataCat));\r\n\r\n                if (!dataCat.backgroundType) dataCat.backgroundType = 'cards';\r\n\r\n                // Cards Type\r\n                if (dataCat.backgroundType === 'cards') {\r\n                    dataCat.backgroundType = 'Default';\r\n                    dataCat.enableCards = true;\r\n                }\r\n\r\n                // Block Parent\r\n                let AppCacheObjectTiles = new sap.ui.layout.BlockLayout(nepId(), {\r\n                    background: dataCat.backgroundType,\r\n                    keepFontSize: true\r\n                });\r\n\r\n                if (dataCat.styleClass) AppCacheObjectTiles.addStyleClass(dataCat.styleClass);\r\n\r\n                // Fav \r\n                if (dataCat.inclFav) sap.n.Launchpad.BuildTilesContent(dataCat, AppCacheObjectTiles, true);\r\n\r\n                // Tiles \r\n                sap.n.Launchpad.BuildTilesContent(dataCat, AppCacheObjectTiles);\r\n\r\n                // Add Block to Page\r\n                pageCat.addContent(AppCacheObjectTiles);\r\n\r\n                // Child Tile Groups\r\n                dataCat.tilegroups.forEach(function (data) {\r\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n\r\n                    if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                    if (!dataCatChild) return;\r\n\r\n                    if (!dataCatChild.backgroundType) dataCatChild.backgroundType = 'cards';\r\n\r\n                    // Cards Type\r\n                    if (dataCatChild.backgroundType === 'cards') {\r\n                        dataCatChild.backgroundType = 'Default';\r\n                        dataCatChild.enableCards = true;\r\n                    }\r\n\r\n                    // Build Group Header\r\n                    if (!dataCatChild.hideHeader) pageCat.addContent(sap.n.Launchpad.buildGroupHeader(dataCatChild));\r\n\r\n                    // Block Parent\r\n                    let AppCacheObjectTiles = new sap.ui.layout.BlockLayout(nepId(), {\r\n                        background: dataCatChild.backgroundType,\r\n                        keepFontSize: true\r\n                    });\r\n\r\n                    if (dataCat.styleClass) AppCacheObjectTiles.addStyleClass(dataCat.styleClass);\r\n\r\n                    // Fav \r\n                    if (dataCatChild.inclFav) sap.n.Launchpad.BuildTilesContent(dataCatChild, AppCacheObjectTiles, true);\r\n\r\n                    // Tiles \r\n                    sap.n.Launchpad.BuildTilesContent(dataCatChild, AppCacheObjectTiles);\r\n\r\n                    // Add Block to Page\r\n                    pageCat.addContent(AppCacheObjectTiles);\r\n                });\r\n\r\n                if (dataCat.tilegroups.length > 0) {\r\n                    // add an empty box\r\n                    pageCat.addContent(\r\n                        new sap.m.HBox(nepId(), {\r\n                            height: (window.innerHeight - 270) + 'px'\r\n                        })\r\n                    );\r\n                }\r\n\r\n                if (subCat) {\r\n                    setTimeout(function () {\r\n                        pageCat.scrollTo(0);\r\n                    }, 100);\r\n                }\r\n            }\r\n        }\r\n\r\n        sap.n.Launchpad.backApp = pageCat;\r\n        sap.n.Launchpad.setMenuPage(dataCat);\r\n\r\n        // Navigate\r\n        setTimeout(function () {\r\n            AppCacheNav.to(pageCat, modelAppCacheDiaSettings.oData.TRANSITION || 'fade');\r\n        }, 100);\r\n\r\n        // Scrolling to SubMenu\r\n        if (subCat) {\r\n            setTimeout(function () {\r\n                sap.n.Launchpad.scrollToTileGroup(subCat);\r\n            }, 300);\r\n        }\r\n    },\r\n\r\n    BuildTilesContent: function (dataCat, AppCacheObjectTiles, isFav) {\r\n        let oBlockCell;\r\n\r\n        // Create First Row\r\n        let numSections = 0;\r\n        let maxTiles = dataCat.numTiles || 4;\r\n        let defaultSize = Math.ceil(100 / maxTiles);\r\n        let oBlockRowTiles = '';\r\n        let tiles = isFav ? modelAppCacheTilesFav.oData : dataCat.tiles;\r\n\r\n        sap.n.Launchpad.backgroundShade = '';\r\n\r\n        tiles.forEach(function (tile) {\r\n            let dataTile = sap.n.Customization.getTile(tile.id);\r\n            if (!dataTile) return;\r\n            if (dataTile.disabled) return;\r\n\r\n            // Fav settings override\r\n            if (isFav) {\r\n                dataTile = JSON.parse(JSON.stringify(dataTile));\r\n                if (tile.frameType) dataTile.frameType = tile.frameType;\r\n                if (tile.forceRow) dataTile.forceRow = tile.forceRow;\r\n            }\r\n\r\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideTileDesktop) return;\r\n            if (sap.n.Launchpad.isTablet() && dataTile.hideTileTablet) return;\r\n            if (sap.n.Launchpad.isPhone() && dataTile.hideTileMobile) return;\r\n            if (dataTile.type === 'storeitem' && isCordova()) return;\r\n\r\n            if (numSections === 0 || dataTile.forceRow) {\r\n\r\n                oBlockRowTiles = new sap.ui.layout.BlockLayoutRow(nepId(), {\r\n                    scrollable: dataCat.enableScroll\r\n                });\r\n\r\n                AppCacheObjectTiles.addContent(oBlockRowTiles);\r\n                numSections = 0;\r\n            }\r\n\r\n            // Tile Size\r\n            let tileWidth = parseInt(dataTile.frameType) || defaultSize;\r\n            numSections = numSections + (maxTiles / 100) * tileWidth;\r\n\r\n            // Tile Content\r\n            switch (dataTile.type) {\r\n\r\n                case 'intcard':\r\n                    oBlockCell = sap.n.Launchpad.buildTileIntegrationCard(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'application':\r\n                    oBlockCell = sap.n.Launchpad.buildTileApplication(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'highchart':\r\n                    oBlockCell = sap.n.Launchpad.buildTileHighchart(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'highstock':\r\n                    oBlockCell = sap.n.Launchpad.buildTileHighstock(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n\r\n                case 'sub':\r\n                    const oBlockRowSub = new sap.ui.layout.BlockLayoutRow(nepId(), {\r\n                        scrollable: false\r\n                    });\r\n                    AppCacheObjectTiles.addContent(oBlockRowSub);\r\n                    oBlockRowSub.addContent(sap.n.Launchpad.buildTileSubHeader(dataTile, tileWidth, dataCat));\r\n                    break;\r\n\r\n                default:\r\n                    oBlockCell = sap.n.Launchpad.buildTileDefault(dataTile, tileWidth, dataCat);\r\n                    oBlockRowTiles.addContent(oBlockCell);\r\n                    break;\r\n            }\r\n\r\n            if (!dataCat.enableScroll) {\r\n                if (numSections >= maxTiles) numSections = 0;\r\n            }\r\n\r\n            if (dataTile.frameType && !sap.n.Launchpad.isPhone()) oBlockCell.addStyleClass('nepTileCardsFixed' + dataTile.frameType);\r\n\r\n        });\r\n    },\r\n\r\n    HandleTilePress: function (dataTile, dataCat) {\r\n        if (dataTile.navObject && dataTile.navAction) {\r\n            location.hash = dataTile.navObject + '-' + dataTile.navAction;\r\n        } else {\r\n            location.hash = '';\r\n            sap.n.Launchpad._HandleTilePress(dataTile, dataCat);\r\n        }\r\n    },\r\n\r\n    _HandleTilePress: function (dataTile, dataCat) {\r\n        let appTitle;\r\n\r\n        // Any tile ?\r\n        if (!dataTile) return;\r\n\r\n        // Clear Hash if no semantic navigation\r\n        if (!dataTile.navObject && !dataTile.navAction) location.hash = '';\r\n\r\n        // Avoid double start\r\n        if (sap.n.Launchpad.currentTile && !sap.n.Launchpad.currentTile.actionURL) {\r\n            if (sap.n.Launchpad.currentTile.id === dataTile.id) return;\r\n        }\r\n\r\n        AppCacheShellHelp.setVisible(false);\r\n        sap.n.Launchpad.contextType = 'Menu';\r\n\r\n        // Start SidePanel\r\n        if (dataTile.sidepanelApp && !sap.n.Launchpad.isPhone()) {\r\n            sap.n.Shell.loadSidepanel(dataTile.sidepanelApp, dataTile.sidepanelTitle);\r\n        } else {\r\n            sap.n.Shell.closeSidepanel();\r\n        }\r\n\r\n        // Set App Title\r\n        if (sap.n.Launchpad.isPhone() || dataTile.subTitle === '' || dataTile.subTitle === null) {\r\n            appTitle = dataTile.title;\r\n        } else {\r\n            appTitle = dataTile.title + ' - ' + dataTile.subTitle;\r\n        }\r\n\r\n        // Header Handling \r\n        let hideHeader = false;\r\n        if (sap.n.Launchpad.isDesktop() && dataTile.hideHeaderL) hideHeader = true;\r\n        if (sap.n.Launchpad.isTablet() && dataTile.hideHeaderM) hideHeader = true;\r\n        if (sap.n.Launchpad.isPhone() && dataTile.hideHeaderS) hideHeader = true;\r\n\r\n        sap.n.Launchpad.setHideHeader(hideHeader);\r\n\r\n        if (dataTile.urlApplication === null) dataTile.urlApplication = \"\";\r\n\r\n        // Show back Button \r\n        if (!dataTile.openDialog && !dataTile.openWindow) {\r\n            if (dataTile.actionApplication || dataTile.actionURL || dataTile.actionWebApp || dataTile.actionType === 'F') {\r\n                sap.n.Launchpad.currentTile = dataTile;\r\n            }\r\n\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\r\n        }\r\n\r\n        // Trace\r\n        if (AppCache.enableTrace && !AppCache.isOffline) sap.n.Launchpad.traceTile(dataTile);\r\n\r\n        // Enhancement\r\n        if (sap.n.Enhancement.TileClick) {\r\n            try {\r\n                sap.n.Enhancement.TileClick(dataTile);\r\n            } catch (e) {\r\n                appCacheError('Enhancement TileClick ' + e);\r\n            }\r\n        }\r\n\r\n\r\n        // Adaptive Framework\r\n        if (dataTile.actionType === 'F') {\r\n\r\n            sap.n.Adaptive.getConfig(dataTile.settings.adaptive.id).then(function (config) {\r\n\r\n                // Exists ? \r\n                if (!config) {\r\n                    sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\r\n                    return;\r\n                }\r\n\r\n                if (dataTile.openDialog) {\r\n\r\n                    AppCache.Load(config.application, {\r\n                        appGUID: dataTile.id,\r\n                        dialogShow: true,\r\n                        dialogTitle: appTitle,\r\n                        dialogHeight: dataTile.dialogHeight || '90%',\r\n                        dialogWidth: dataTile.dialogWidth || '1200px',\r\n                        startParams: config\r\n                    });\r\n\r\n                    sap.n.Launchpad.contextType = 'Tile';\r\n                    sap.n.Launchpad.contextTile = dataTile;\r\n                    location.hash = '';\r\n\r\n                } else {\r\n\r\n                    // Start App\r\n                    sap.n.Launchpad.handleAppTitle(appTitle);\r\n                    sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n                    sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n                    AppCache.Load(config.application, {\r\n                        appGUID: dataTile.id,\r\n                        startParams: config,\r\n                        openFullscreen: dataTile.openFullscreen\r\n                    });\r\n\r\n                    // Sidepanel User Assistance\r\n                    if (dataTile.enableDocumentation && !AppCache.isPublic) AppCacheShellHelp.setVisible(true);\r\n\r\n                    // Mark Open From \r\n                    if (sap.n.Shell.openSidePanelApps[dataTile.actionApplication]) sap.n.Shell.openSidepanel();\r\n\r\n                }\r\n\r\n            });\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        // Store Item\r\n        if (dataTile.type === 'storeitem') {\r\n            // Get Mobile Client\r\n            request({\r\n                type: 'GET',\r\n                contentType: 'application/json; charset=utf-8',\r\n                url: AppCache.Url + '/mobileClients/' + dataTile.storeItem.mobileClient,\r\n                dataType: 'json',\r\n                success: function (data) {\r\n                    // Get Active Version \r\n                    data.activeBuild = {};\r\n                    data.builds.forEach(function (build) {\r\n                        if (data.activeVersion === build.version) data.activeBuild = build;\r\n                    });\r\n\r\n                    // Hide image on phone\r\n                    if (sap.n.Launchpad.isPhone()) {\r\n                        oTileImageCell.setVisible(false);\r\n                    } else {\r\n                        oTileImage.setSrc(AppCache.Url + '/media/' + data.iconId);\r\n                    }\r\n\r\n                    // Install button \r\n                    AppCachePageStoreInstall.setEnabled(false);\r\n                    switch (sap.ui.Device.os.name) {\r\n\r\n                        case 'win':\r\n                            if (data.buildWindows && data.activeBuild.dataWindows) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                        case 'Android':\r\n                            if (data.buildAndroid && data.activeBuild.dataAndroid) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                        case 'iOS':\r\n                            if (data.buildIOS && data.activeBuild.dataIos) AppCachePageStoreInstall.setEnabled(true);\r\n                            break;\r\n\r\n                    }\r\n\r\n                    modelAppCachePageStore.setData(data);\r\n                    AppCacheNav.to(AppCachePageStore);\r\n                },\r\n                error: function (data) {\r\n                    sap.m.MessageToast.show(data.status);\r\n                }\r\n            });\r\n\r\n            return;\r\n        }\r\n\r\n        // Tile Group \r\n        if (dataTile.actiongroup) {\r\n            let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', dataTile.actiongroup);\r\n            if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', dataTile.actiongroup);\r\n            if (dataCat) {\r\n                if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\r\n                sap.n.Launchpad.handleAppTitle(dataTile.title);\r\n                sap.n.Launchpad.BuildTiles(dataCat, true);\r\n            }\r\n            return;\r\n        }\r\n\r\n        // External URL\r\n        if (dataTile.actionURL) {\r\n            sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n            if (dataTile.openWindow) {\r\n                if (AppCache.isMobile) {\r\n                    window.open(dataTile.actionURL, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(dataTile.actionURL, dataTile.openWindow);\r\n                }\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else if (dataTile.openDialog) {\r\n                sap.n.Launchpad.contextType = 'Tile';\r\n                sap.n.Launchpad.contextTile = dataTile;\r\n\r\n                sap.n.Shell.openUrl(dataTile.actionURL, {\r\n                    dialogTitle: appTitle,\r\n                    dialogHeight: dataTile.dialogHeight || '90%',\r\n                    dialogWidth: dataTile.dialogWidth || '1200px',\r\n                });\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else {\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n                sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n\r\n                AppCacheNav.to(AppCache_boxURL, modelAppCacheDiaSettings.oData.TRANSITION || 'fade');\r\n\r\n                if (dataTile.openFullscreen) {\r\n                    AppCacheShellUI.setAppWidthLimited(false);\r\n                } else {\r\n                    AppCacheShellUI.setAppWidthLimited(true);\r\n                }\r\n\r\n                // Hide All\r\n                hideChildren('#AppCache_URLDiv');\r\n\r\n                // Check If element exist > Display or Create\r\n                let el = elById(`iFrame${dataTile.id}`);\r\n\r\n                if (el) {\r\n                    el.style.display = 'block';\r\n                } else {\r\n                    appendIFrame(\r\n                        querySelector('#AppCache_URLDiv'),\r\n                        {\r\n                            'id': `iFrame${dataTile.id}`,\r\n                            'frameborder': '0',\r\n                            'style': 'border: 0;',\r\n                            'width': '100%',\r\n                            'height': '100%',\r\n                            'src': dataTile.actionURL\r\n                        }\r\n                    )\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Web App\r\n        if (dataTile.actionWebApp) {\r\n            if (dataTile.openWindow) {\r\n                let url = '/webapp/' + dataTile.actionWebApp;\r\n                if (dataTile.urlApplication) {\r\n                    url = dataTile.urlApplication + url;\r\n                } else {\r\n                    url = AppCache.Url + url;\r\n                }\r\n\r\n                if (AppCache.isMobile) {\r\n                    window.open(url, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(url, dataTile.openWindow);\r\n                }\r\n\r\n                location.hash = '';\r\n                AppCacheShellBack.setVisible(false);\r\n            } else {\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n\r\n                let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n                let webApp = ModelData.FindFirst(AppCacheData, ['application', 'appPath'], [dataTile.actionWebApp, dataTile.urlApplication]);\r\n\r\n                if (webApp) {\r\n\r\n                    // Get App from Memory\r\n                    if (AppCache.View[viewName]) {\r\n                        AppCache.buildWebApp(dataTile, null, dataCat);\r\n                        return;\r\n                    }\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName).then(function (viewData) {\r\n                            if (viewData.length > 10 && !webApp.invalid) {\r\n                                AppCache.buildWebApp(dataTile, viewData, dataCat);\r\n                            } else {\r\n                                AppCache.getWebApp(dataTile, dataCat);\r\n                            }\r\n                        });\r\n                    } else {\r\n                        let data = sapStorageGet(viewName);\r\n                        if (data && !webApp.invalid) {\r\n                            AppCache.buildWebApp(dataTile, data, dataCat);\r\n                        } else {\r\n                            AppCache.getWebApp(dataTile, dataCat);\r\n                        }\r\n                    }\r\n                } else {\r\n                    AppCache.getWebApp(dataTile, dataCat);\r\n                }\r\n            }\r\n\r\n            return;\r\n        }\r\n\r\n        // Application\r\n        if (dataTile.actionApplication) {\r\n\r\n            if (dataTile.openDialog) {\r\n\r\n                AppCache.Load(dataTile.actionApplication, {\r\n                    appGUID: dataTile.id,\r\n                    appPath: dataTile.urlApplication,\r\n                    appAuth: dataTile.urlAuth,\r\n                    appType: dataTile.urlType,\r\n                    dialogShow: true,\r\n                    dialogTitle: appTitle,\r\n                    sapICFNode: dataTile.sapICFNode || '',\r\n                    dialogHeight: dataTile.dialogHeight || '90%',\r\n                    dialogWidth: dataTile.dialogWidth || '1200px',\r\n                    startParams: dataTile.actionParameters\r\n                });\r\n\r\n                sap.n.Launchpad.contextType = 'Tile';\r\n                sap.n.Launchpad.contextTile = dataTile;\r\n                location.hash = '';\r\n\r\n            } else if (dataTile.openWindow) {\r\n                let url = `/app/${dataTile.actionApplication}`;\r\n                if (dataTile.isPublic) url = `/public/app/${dataTile.actionApplication}`;\r\n\r\n                if (dataTile.urlApplication) url = `${dataTile.urlApplication}${url}`;\r\n                else url = `${AppCache.Url}${url}`;\r\n\r\n                if (AppCache.isMobile) {\r\n                    window.open(url, '_blank', 'location=0,status=0');\r\n                } else {\r\n                    sap.m.URLHelper.redirect(url, dataTile.openWindow);\r\n                }\r\n            } else {\r\n                // Start App\r\n                sap.n.Launchpad.handleAppTitle(appTitle);\r\n                sap.n.Launchpad.handleNavButton(dataTile, dataCat);\r\n                sap.n.Launchpad.handleRunListApp(dataTile);\r\n\r\n                AppCache.Load(dataTile.actionApplication, {\r\n                    appGUID: dataTile.id,\r\n                    appPath: dataTile.urlApplication,\r\n                    appAuth: dataTile.urlAuth,\r\n                    appType: dataTile.urlType,\r\n                    sapICFNode: dataTile.sapICFNode,\r\n                    startParams: dataTile.actionParameters,\r\n                    openFullscreen: dataTile.openFullscreen\r\n                });\r\n\r\n                // Sidepanel User Assistance\r\n                if (dataTile.enableDocumentation && !AppCache.isPublic) AppCacheShellHelp.setVisible(true);\r\n\r\n                // Mark Open From \r\n                if (sap.n.Shell.openSidePanelApps[dataTile.actionApplication]) sap.n.Shell.openSidepanel();\r\n\r\n            }\r\n            return;\r\n        }\r\n\r\n    },\r\n\r\n    handleAppTitle: function (appTitle) {\r\n        if (AppCache.config.showAppTitle && !AppCache.config.enableTopMenu) AppCacheShellAppTitle.setText(appTitle || '');\r\n    },\r\n\r\n    handleRunListApp: function (dataTile) {\r\n        // Get Data from Fav List\r\n        let rec = ModelData.FindFirst(AppCacheTilesRun, 'id', dataTile.id);\r\n\r\n        // Update counter\r\n        if (rec) {\r\n            rec.sort = parseInt(rec.sort) + 1;\r\n        } else {\r\n            rec = dataTile;\r\n            rec.sort = 1;\r\n        }\r\n\r\n        // Update Fav List\r\n        ModelData.Update(AppCacheTilesRun, 'id', dataTile.id, rec);\r\n\r\n        // Fix\r\n        if (!modelAppCacheTilesRun.oData.length) modelAppCacheTilesRun.setData([]);\r\n\r\n        // Only Last 10\r\n        let sorted = modelAppCacheTilesRun.oData.sort(function (a, b) {\r\n            if (a.sort > b.sort)\r\n                return -1;\r\n            if (a.sort < b.sort)\r\n                return 1;\r\n            return 0;\r\n        });\r\n\r\n        modelAppCacheTilesRun.setData(sorted.splice(0, 10));\r\n        setCacheAppCacheTilesRun();\r\n    },\r\n\r\n    getIconUrl: function (dataTile) {\r\n        if (dataTile.icon) return dataTile.icon;\r\n\r\n        if (dataTile.actionType === 'F') return 'sap-icon://chart-table-view';\r\n        else if (dataTile.actionApplication) return 'sap-icon://sys-monitor';\r\n\r\n        return 'sap-icon://chain-link';\r\n    },\r\n\r\n    handleNavButton: function (dataTile, dataCat) {\r\n        // Tree Menu - Active Apps\r\n        const containerAppId = `${nepPrefix()}OpenAppContainer${dataTile.id}`;\r\n        containerOpenApp = sap.ui.getCore().byId(containerAppId);\r\n\r\n        if (!containerOpenApp) {\r\n            containerOpenApp = new sap.m.HBox(containerAppId, {\r\n                width: '100%',\r\n                justifyContent: 'SpaceBetween',\r\n                alignItems: 'Center'\r\n            }).addStyleClass('nepOpenAppsContainer');\r\n\r\n            let butOpenApp = new sap.m.Button(`${nepPrefix()}OpenApp${dataTile.id}`, {\r\n                text: sap.n.Launchpad.translateTile('title', dataTile),\r\n                icon: sap.n.Launchpad.getIconUrl(dataTile),\r\n                iconFirst: true,\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                    if (!AppCache.config.verticalMenu) sap.n.Launchpad.overflowMenuClose();\r\n                }\r\n            }).addStyleClass('nepOpenAppsBtn nepOpenAppsBtnItem');\r\n\r\n            let butOpenAppClose = new sap.ui.core.Icon(nepId(), {\r\n                size: '1.375rem',\r\n                src: 'sap-icon://sys-cancel',\r\n                press: function (oEvent) {\r\n                    sap.n.Shell.closeTile(dataTile);\r\n                }\r\n            }).addStyleClass('nepOpenAppsClose');\r\n\r\n            openApps.addItem(containerOpenApp);\r\n            containerOpenApp.addItem(butOpenApp);\r\n            containerOpenApp.addItem(butOpenAppClose);\r\n            openAppMaster.setVisible(true);\r\n        }\r\n\r\n        // Do not have action buttons for phones\r\n        if (sap.n.Launchpad.isPhone() && !isWidthGTE(1000)) return;\r\n\r\n        // New Button - Side\r\n        if (AppCache.config.activeAppsSide) {\r\n            const blockCellId = `but${dataTile.id}`;\r\n            let oBlockCell = sap.ui.getCore().byId(blockCellId);\r\n            if (!oBlockCell) {\r\n                // Top\r\n                let oBlockCell = new sap.ui.layout.BlockLayoutCell(blockCellId).addStyleClass('tileEmpty');\r\n                sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell, true);\r\n                oBlockCell.addStyleClass('nepTileCardsRunning nepNavBarTile');\r\n\r\n                let boxTop = new sap.m.FlexBox(nepId(), {\r\n                    justifyContent: 'Start',\r\n                    alignContent: 'Center',\r\n                    height: '35px'\r\n                });\r\n\r\n                let boxIcon = new sap.m.VBox(nepId(), {\r\n                    width: '38px'\r\n                }).addStyleClass('nepNavBarBoxIcon');\r\n\r\n                if (dataTile.cardImage) {\r\n                    boxIcon.addItem(\r\n                        new sap.m.Image(nepId(), {\r\n                            src: dataTile.cardImage,\r\n                            height: '37px',\r\n                            densityAware: false,\r\n                        })\r\n                    );\r\n                } else {\r\n                    boxIcon.addItem(\r\n                        new sap.ui.core.Icon(nepId(), {\r\n                            src: sap.n.Launchpad.getIconUrl(dataTile),\r\n                            size: '2rem',\r\n                            useIconTooltip: false\r\n                        })\r\n                    );\r\n                }\r\n\r\n                let boxTitle = new sap.m.VBox(nepId(), {\r\n                    width: '190px'\r\n                }).addStyleClass('nepNavBarBoxTitle');\r\n\r\n                let textTitle = new sap.m.Text(nepId(), {\r\n                    wrapping: false,\r\n                    text: sap.n.Launchpad.translateTile('title', dataTile),\r\n                }).addStyleClass('nepNavBarTitle');\r\n\r\n                let textSubTitle = new sap.m.Text(nepId(), {\r\n                    wrapping: false,\r\n                    text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n                }).addStyleClass('nepNavBarSubTitle');\r\n\r\n                let boxActions = new sap.m.VBox(nepId(), {\r\n                    justifyContent: 'Start',\r\n                    width: '40px'\r\n                });\r\n\r\n                let butClose = new sap.m.Button(nepId(), {\r\n                    type: 'Transparent',\r\n                    icon: 'sap-icon://sys-cancel',\r\n                    press: function (oEvent) {\r\n                        sap.n.Shell.closeTile(dataTile);\r\n                    }\r\n                });\r\n\r\n                let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n                butClose.addStyleClass('nepTileAction nepNavBarAction ' + buttonStyle);\r\n\r\n                // Event - Click\r\n                boxIcon.attachBrowserEvent('click', function (oEvent) {\r\n                    sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n                    sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                    popNavBar.close();\r\n                });\r\n\r\n                // Placement\r\n                oBlockCell.addContent(boxTop);\r\n                boxTop.addItem(boxIcon);\r\n                boxTop.addItem(boxTitle);\r\n                boxTop.addItem(boxActions);\r\n                boxTitle.addItem(textTitle);\r\n                boxTitle.addItem(textSubTitle);\r\n                boxActions.addItem(butClose);\r\n\r\n                blockRunningRow.addContent(oBlockCell);\r\n\r\n                if (!isTouchScreen() || isWidthGTE(1000)) {\r\n                    oBlockCell.attachBrowserEvent('mouseenter', function (oEvent) {\r\n                        blockPopoverRow.removeAllContent();\r\n                        blockPopoverRow.addContent(sap.n.Launchpad.handlePopButton(dataTile, dataCat));\r\n\r\n                        popNavBar.setPlacement('Right');\r\n                        popNavBar.setOffsetX(-63);\r\n                        popNavBar.setOffsetY(0);\r\n\r\n                        setTimeout(function () {\r\n                            popNavBar.openBy(oBlockCell);\r\n                        }, 100);\r\n                    });\r\n                }\r\n\r\n                if (launchpadContentNavigator.getWidth() === '0px') {\r\n                    launchpadContentNavigator.setWidth('70px');\r\n                    sap.n.Layout.setHeaderPadding();\r\n                }\r\n            }\r\n        }\r\n\r\n        // Nav Button - Top\r\n        if (AppCache.config.activeAppsTop) {\r\n            // New Button\r\n            let tileButton = sap.ui.getCore().byId(`butTop${dataTile.id}`);\r\n            if (!tileButton) {\r\n                tileButton = new sap.m.Button(`butTop${dataTile.id}`, {\r\n                    type: 'Transparent',\r\n                    icon: sap.n.Launchpad.getIconUrl(dataTile),\r\n                    press: function (oEvent) { sap.n.Launchpad.HandleTilePress(dataTile); }\r\n                }).addStyleClass('nepTopMenuBtn nepTopMenuActive');\r\n\r\n                AppCacheShellOpenApps.addItem(tileButton);\r\n\r\n                if (!isTouchScreen() || isWidthGTE(1000)) {\r\n                    tileButton.attachBrowserEvent('mouseenter', function (e) {\r\n                        blockPopoverRow.removeAllContent();\r\n                        blockPopoverRow.addContent(sap.n.Launchpad.handlePopButton(dataTile, dataCat));\r\n                        popNavBar.setPlacement('Bottom');\r\n                        popNavBar.setOffsetX(-150);\r\n                        popNavBar.setOffsetY(4);\r\n\r\n                        setTimeout(function () {\r\n                            popNavBar.openBy(tileButton);\r\n                        }, 100);\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // Set Active \r\n        sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n    },\r\n\r\n    handlePopButton: function (dataTile, dataCat) {\r\n        // Top \r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId()).addStyleClass('nepIconActive nepTileCardsPop nepNavBarTile');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell, true);\r\n\r\n        // oBlockCell.addStyleClass('nepTileCardsPop nepNavBarTile');\r\n\r\n        let boxTop = new sap.m.FlexBox(nepId(), {\r\n            justifyContent: 'Start',\r\n            alignContent: 'Center',\r\n            height: '35px'\r\n        });\r\n\r\n        let boxIcon = new sap.m.VBox(nepId(), {\r\n            width: '38px'\r\n        }).addStyleClass('nepNavBarBoxIcon');\r\n\r\n        if (dataTile.cardImage) {\r\n            let oBlockImage = new sap.m.Image(nepId(), {\r\n                src: dataTile.cardImage,\r\n                height: '37px',\r\n                densityAware: false,\r\n            });\r\n            boxIcon.addItem(oBlockImage);\r\n        } else {\r\n            let oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                src: sap.n.Launchpad.getIconUrl(dataTile),\r\n                size: '2rem',\r\n                useIconTooltip: false\r\n            });\r\n            boxIcon.addItem(oBlockIcon);\r\n        }\r\n\r\n        let boxTitle = new sap.m.VBox(nepId(), {\r\n            width: '190px'\r\n        }).addStyleClass('nepNavBarBoxTitle');\r\n\r\n        let textTitle = new sap.m.Text(nepId(), {\r\n            wrapping: false,\r\n            text: sap.n.Launchpad.translateTile('title', dataTile),\r\n        }).addStyleClass('nepNavBarTitle');\r\n\r\n        let textSubTitle = new sap.m.Text(nepId(), {\r\n            wrapping: false,\r\n            text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n        }).addStyleClass('nepNavBarSubTitle');\r\n\r\n        let boxActions = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'Start',\r\n            width: '40px'\r\n        });\r\n\r\n        let butClose = new sap.m.Button(nepId(), {\r\n            type: 'Transparent',\r\n            icon: 'sap-icon://sys-cancel',\r\n            press: function (oEvent) {\r\n                sap.n.Shell.closeTile(dataTile);\r\n                popNavBar.close();\r\n            }\r\n        });\r\n\r\n        let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n        butClose.addStyleClass('nepTileAction nepNavBarAction ' + buttonStyle);\r\n\r\n        // Event - Click\r\n        oBlockCell.attachBrowserEvent('click', function (oEvent) {\r\n            sap.n.Launchpad.setActiveIcon(dataTile.id);\r\n            sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n            popNavBar.close();\r\n        });\r\n\r\n        // Placement\r\n        oBlockCell.addContent(boxTop);\r\n        boxTop.addItem(boxIcon);\r\n        boxTop.addItem(boxTitle);\r\n        boxTitle.addItem(textTitle);\r\n        boxTitle.addItem(textSubTitle);\r\n        boxTop.addItem(boxActions);\r\n        boxActions.addItem(butClose);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    isMenuPage: function () {\r\n        let id = AppCacheNav.getCurrentPage().sId;\r\n        id = id.split('page')[1];\r\n\r\n        if (id) {\r\n            const dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', id);\r\n            return dataCatChild ? false : true;\r\n        }\r\n\r\n        return false;\r\n    },\r\n\r\n    setMenuPage: function (dataCat) {\r\n        // AppCacheShellUI.setAppWidthLimited(!dataCat.enableFullScreen);\r\n\r\n        // Close Help\r\n        AppCacheShellHelp.setVisible(false);\r\n        sap.n.Shell.closeSidepanel();\r\n\r\n        // Clear currentTile\r\n        sap.n.Launchpad.currentTile = {};\r\n\r\n        // Title\r\n        sap.n.Launchpad.SetHeader();\r\n    },\r\n\r\n    handleFavRedraw: function () {\r\n        // Rebuild Page if on Fav Tile Group\r\n        let cat = AppCacheNav.getCurrentPage().sId;\r\n        cat = cat.split('page')[1];\r\n\r\n        let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', cat);\r\n        if (!dataCat) dataCat = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\r\n\r\n        // Check tilegroups on page \r\n        let favFound = false;\r\n\r\n        dataCat.tilegroups.forEach(function (tilegroup) {\r\n            let dataCatSub = ModelData.FindFirst(AppCacheCategory, 'id', tilegroup.id);\r\n            if (!dataCatSub) dataCatSub = ModelData.FindFirst(AppCacheCategoryChild, 'id', tilegroup.id);\r\n            if (dataCatSub && dataCatSub.inclFav) favFound = true;\r\n        });\r\n\r\n        if (dataCat && dataCat.inclFav) favFound = true;\r\n\r\n        if (favFound) {\r\n            this.reCreateCurrentPage();\r\n        }\r\n\r\n        sap.n.Launchpad.saveFav();\r\n    },\r\n\r\n    reCreateCurrentPage: function () {\r\n        const current = AppCacheNav.getCurrentPage();\r\n        const categoryId = current.sId.split('page')[1];\r\n\r\n        const category = sap.n.Customization.getCategory(categoryId);\r\n        \r\n        this.destroyPage(current);\r\n        if (category) sap.n.Launchpad.BuildTiles(category);\r\n    },\r\n\r\n    destroyPage: function (page) {\r\n        if (!page) return;\r\n\r\n        AppCacheNav.removePage(page);\r\n        page.destroy();\r\n    },\r\n\r\n    saveFav: function () {\r\n        if (!modelAppCacheTilesFav.oData.length) modelAppCacheTilesFav.oData = [];\r\n\r\n        let favList = modelAppCacheTilesFav.oData.map(function (fav) {\r\n            return {\r\n                id: fav.id,\r\n                cardWidth: fav.cardWidth,\r\n                cardHeight: fav.cardHeight\r\n            };\r\n        });\r\n\r\n        // Update P9 DB with data \r\n        sap.n.Planet9.function({\r\n            id: dataSet,\r\n            method: 'SaveFav',\r\n            data: {\r\n                tiles: favList,\r\n                launchpad: AppCache.launchpadID,\r\n            }\r\n        });\r\n    },\r\n\r\n    setHideHeader: function (hideHeader) {\r\n        if (AppCache.config && AppCache.config.hideTopHeader) return;\r\n        topMenu.setHeight(hideHeader ? '0px' : '48px');\r\n    },\r\n\r\n    setHideTopButtons: function (hide) {\r\n        if (hide) {\r\n            if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(!hide);\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(!hide);\r\n        } else {\r\n            if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(hide);\r\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(hide);\r\n        }\r\n    },\r\n\r\n    setActiveIcon: function (id) {\r\n        // Sidebar\r\n        blockRunningRow.getContent().forEach(function (data) {\r\n            if (data.sId === `but${id}`) {\r\n                data.addStyleClass('nepIconActive');\r\n            } else {\r\n                data.removeStyleClass('nepIconActive');\r\n            }\r\n        });\r\n\r\n        // Header Icons\r\n        AppCacheShellOpenApps.getItems().forEach(function (data) {\r\n            if (data.sId === `butTop${id}`) {\r\n                data.addStyleClass('nepTopMenuActive');\r\n            } else {\r\n                data.removeStyleClass('nepTopMenuActive');\r\n            }\r\n        });\r\n    },\r\n\r\n    getPageTitle: function (dataCat) {\r\n        if (dataCat.isCustom) {\r\n            return [dataCat.props.title, dataCat.props.subTitle];\r\n        }\r\n\r\n        return [\r\n            sap.n.Launchpad.translateTile('title', dataCat),\r\n            dataCat.subTitle ? sap.n.Launchpad.translateTile('subTitle', dataCat) : '',\r\n        ];\r\n    },\r\n\r\n    buildGroupHeader: function (dataCat) {\r\n        // unique CSS class for this header\r\n        let id = `${nepPrefix()}CatHeader${dataCat.id}`;\r\n\r\n        let panel = new sap.m.Panel(`${sectionPrefix()}${dataCat.id}`, {\r\n            backgroundDesign: 'Transparent',\r\n            width: '100%'\r\n        }).addStyleClass('nepCatPanel ' + id + ' sapUiNoContentPadding');\r\n\r\n        if (dataCat.styleClass) panel.addStyleClass(dataCat.styleClass);\r\n\r\n        // fixes aria-labelledby\r\n        let headerToolbar = new sap.m.Toolbar('navBarToolbar' + dataCat.id, {\r\n            visible: false\r\n        });\r\n        panel.setHeaderToolbar(headerToolbar);\r\n\r\n        let vbox = new sap.m.VBox(nepId(), {\r\n            alignItems: 'Start', //dataCat.titleAlignment || 'Start',\r\n        }).addStyleClass('nepCatTitleLayout');\r\n        panel.addContent(vbox);\r\n\r\n        const [title, subTitle] = this.getPageTitle(dataCat);\r\n        vbox.addItem(new sap.m.Title(nepId(), {\r\n            level: 'H1',\r\n            text: title\r\n        }).addStyleClass('nepCatTitle'));\r\n        panel.addStyleClass('nepCatTitleLayoutTitle');\r\n\r\n        if (subTitle) {\r\n            vbox.addItem(new sap.m.Title(nepId(), {\r\n                level: 'H3',\r\n                text: subTitle,\r\n            }).addStyleClass('nepCatSubTitle'));\r\n            panel.addStyleClass('nepCatTitleLayoutSubTitle');\r\n        }\r\n\r\n        return panel;\r\n    },\r\n\r\n    buildGroupMessage: function (dataCat) {\r\n        let message = new sap.m.MessageStrip(nepId(), {\r\n            type: dataCat.configMessage.type || 'None',\r\n            text: dataCat.configMessage.text || '',\r\n            showIcon: dataCat.configMessage.showIcon || false,\r\n            customIcon: dataCat.configMessage.icon || '',\r\n            showCloseButton: dataCat.configMessage.showCloseButton || false,\r\n            enableFormattedText: true,\r\n        });\r\n\r\n        message.addStyleClass('nepTileCards');\r\n        return message;\r\n    },\r\n\r\n    // TILES\r\n    buildTileApplication: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockIcon;\r\n\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n        }).addStyleClass('nepTileApplication');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.5rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '38px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n\r\n            if (dataTile.titleAlignment === 'End') {\r\n                oBlockIcon.addStyleClass('nepTileIconLeft');\r\n            } else {\r\n                oBlockIcon.addStyleClass('nepTileIconRight');\r\n            }\r\n\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        let oBlockContentApp = new sap.m.Panel(nepId(), {\r\n            backgroundDesign: 'Transparent'\r\n        });\r\n        oBlockContentApp.addStyleClass('sapUiNoContentPadding');\r\n\r\n        oBlockContentTop.addItem(oBlockContentApp);\r\n\r\n        // Load Application\r\n        if (dataTile.tileApplication) {\r\n            AppCache.Load(dataTile.tileApplication, {\r\n                parentObject: oBlockContentApp,\r\n                startParams: dataTile.actionParameters,\r\n                sapICFNode: dataTile.sapICFNode\r\n            });\r\n        }\r\n\r\n        // Actions \r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileSubHeader: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n        });\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        if (dataTile.image) {\r\n            let imageUrl;\r\n            let inlineStyle = new sap.ui.core.HTML(nepId());\r\n\r\n            if (AppCache.isMobile) {\r\n                imageUrl = dataTile.imageData;\r\n            } else {\r\n                imageUrl = AppCache.Url + dataTile.image;\r\n            }\r\n\r\n            inlineStyle.setDOMContent(`\r\n                <style>\r\n                .tileImage${dataTile.id} {\r\n                    background-image: url('${imageUrl}');\r\n                    background-size: 100% auto;\r\n                    background-position: 0 80%;\r\n                }\r\n                </style>\r\n            `);\r\n\r\n            oBlockCell.addStyleClass('tileImage' + dataTile.id);\r\n            oBlockCell.addContent(inlineStyle);\r\n        }\r\n\r\n        let oHeaderInfoText = new sap.m.Text(nepId(), {\r\n            textAlign: 'Begin',\r\n            width: '100%',\r\n            text: sap.n.Launchpad.translateTile('subTitle', dataTile),\r\n        });\r\n        oBlockCell.addContent(oHeaderInfoText);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildHeaderCss: function (dataCat) {\r\n        let css = '';\r\n        let imageUrl;\r\n        let id = `${nepPrefix()}CatHeader${dataCat.id}`;\r\n        let borderWidth = dataCat.headBorderWidth || '3px';\r\n        let backroundPosition, backroundSize, backgroundHeight;\r\n\r\n        const idClass = `.${id}`;\r\n        if (dataCat.headColor) css += `${idClass} { background-color: ${dataCat.headColor}; }`;\r\n        if (dataCat.headTxtClr) css += `${idClass} .nepCatTitle.sapMTitle { color: ${dataCat.headTxtClr} !important; }`;\r\n        if (dataCat.subheadTxtClr) css += `${idClass} .nepCatSubTitle.sapMTitle { color: ${dataCat.subheadTxtClr} !important; }`;\r\n        if (dataCat.headBorderClr) css += `${idClass} { border-bottom: ${borderWidth} solid ${dataCat.headBorderClr}; }`;\r\n\r\n        if (dataCat.imageMobile) {\r\n            imageUrl = AppCache.Url + dataCat.imageMobile;\r\n\r\n            backroundPosition = dataCat.imageMobilePlacement || 'center center';\r\n            backroundSize = dataCat.imageMobileSize || 'cover';\r\n            backgroundRepeat = dataCat.imageMobileRepeat || 'no-repeat';\r\n            backgroundHeight = dataCat.imageMobileHeight || '82px';\r\n\r\n            css += `\r\n                .nepGridSmall .${id} .sapMPanelContent,\r\n                .nepGridXSmall .${id} .sapMPanelContent {\r\n                    background: url('${imageUrl}');\r\n                    background-repeat: no-repeat;';\r\n                    background-position: ${backroundPosition};\r\n                    background-size: ${backroundSize};\r\n                    height: ${backgroundHeight};\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dataCat.imageTablet) {\r\n            imageUrl = AppCache.Url + dataCat.imageTablet;\r\n\r\n            backroundPosition = dataCat.imageTabletPlacement || 'center center';\r\n            backroundSize = dataCat.imageTabletSize || 'cover';\r\n            backgroundRepeat = dataCat.imageTabletRepeat || 'no-repeat';\r\n            backgroundHeight = dataCat.imageTabletHeight || '82px';\r\n\r\n            css += `\r\n                .nepGridMedium .${id} .sapMPanelContent {\r\n                    background: url('${imageUrl}');\r\n                    background-position: ${backroundPosition};\r\n                    background-size: ${backroundSize};\r\n                    height: ${backgroundHeight};\r\n                }\r\n            `;\r\n        }\r\n\r\n        if (dataCat.image) {\r\n            // TODO - Offline images\r\n            imageUrl = AppCache.Url + dataCat.image;\r\n\r\n            backroundPosition = dataCat.imagePlacement || 'center center';\r\n            backroundSize = dataCat.imageSize || 'cover';\r\n            backgroundRepeat = dataCat.imageRepeat || 'no-repeat';\r\n            backgroundHeight = dataCat.imageHeight || '82px';\r\n\r\n            css += `\r\n                .${id} .sapMPanelContent {\r\n                    background: url('${imageUrl}');\r\n                    background-position: ${backroundPosition};\r\n                    background-size: ${backroundSize};\r\n                    height: ${backgroundHeight} !important;\r\n                }\r\n            `;\r\n        }\r\n\r\n        return css;\r\n    },\r\n\r\n    buildContentCss: function () {\r\n        let css = '';\r\n\r\n        // CSS - Tile Groups\r\n        modelAppCacheCategory.oData.forEach(function (dataCat) {\r\n            css += sap.n.Launchpad.buildHeaderCss(dataCat);\r\n            dataCat.tilegroups.forEach(function (data) {\r\n                let dataCatChild = ModelData.FindFirst(AppCacheCategory, 'id', data.id);\r\n                if (!dataCatChild) dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', data.id);\r\n                if (dataCatChild) css += sap.n.Launchpad.buildHeaderCss(dataCatChild);\r\n            });\r\n        });\r\n\r\n        // CSS - Tiles\r\n        css += sap.n.Launchpad.buildTileCss();\r\n        return css;\r\n    },\r\n\r\n    buildTileCss: function () {\r\n        let css = '';\r\n        Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (dataTile) {\r\n            // Background Image\r\n            if (dataTile.image) {\r\n                let imageUrl = AppCache.Url + dataTile.image;\r\n                if (AppCache.isMobile) imageUrl = dataTile.imageData || imageUrl;\r\n\r\n                let repeat = (!!dataTile.imageRepeat) ? dataTile.imageRepeat : 'no-repeat';\r\n                let size = (!!dataTile.imageSize) ? dataTile.imageSize : 'cover';\r\n                let position = (!!dataTile.imagePlacement) ? dataTile.imagePlacement : 'center';\r\n\r\n                if (dataTile.imagePosition === 'cover') {\r\n                    css += `\r\n                        .tile${dataTile.id} {\r\n                            background-image: url('${imageUrl}');\r\n                            background-repeat: ${repeat};\r\n                            background-size: ${size};\r\n                            background-position: ${position};\r\n                        }\r\n                    `;\r\n                } else {\r\n                    const sel = (dataTile.imagePosition === 'top') ? 'Top' : 'Inline';\r\n                    css += `\r\n                        .tile${sel}Image${dataTile.id} {\r\n                            max-height: 100%;\r\n                            object-fit: ${size};\r\n                            object-position: ${position};\r\n                        }\r\n                    `;\r\n                }\r\n            }\r\n        });\r\n\r\n        return css;\r\n    },\r\n\r\n    setBackgroundShade: function (dataTile, dataCat, oBlockCell, isIcon) {\r\n        // Cards Handling\r\n        if (sap.n.Launchpad.cardsAvailable) {\r\n            sap.n.Card.setBackgroundShade(dataTile, dataCat, oBlockCell, isIcon);\r\n            return;\r\n        }\r\n\r\n        let backgroundColor, backgroundShade;\r\n\r\n        if (typeof dataCat === 'undefined') dataCat = {};\r\n\r\n        // Styleclasses \r\n        if (!isIcon) oBlockCell.addStyleClass('nepTile');\r\n        if (dataCat.styleClass) oBlockCell.addStyleClass(dataCat.styleClass);\r\n        if (dataTile.styleClass) oBlockCell.addStyleClass(dataTile.styleClass);\r\n        if (dataCat.enableCards && !isIcon) oBlockCell.addStyleClass('nepTileCards');\r\n\r\n        if (dataCat.backgroundType === 'Default' || dataCat.backgroundType === 'cards') {\r\n            if (dataCat.enableShadeCalc) {\r\n                switch (sap.n.Launchpad.backgroundShade) {\r\n                    case 'ShadeA':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeB';\r\n                        break;\r\n\r\n                    case 'ShadeB':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeC';\r\n                        break;\r\n\r\n                    case 'ShadeC':\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeD';\r\n                        break;\r\n\r\n                    default:\r\n                        sap.n.Launchpad.backgroundShade = 'ShadeA';\r\n                        break;\r\n                }\r\n            } else {\r\n                sap.n.Launchpad.backgroundShade = dataCat.backgroundShade;\r\n            }\r\n\r\n            backgroundColor = dataTile.backgroundColor || dataCat.backgroundColor || '';\r\n            backgroundShade = dataTile.backgroundShade || sap.n.Launchpad.backgroundShade || 'ShadeA';\r\n\r\n        } else if (dataCat.backgroundType === 'Dashboard' && isIcon) {\r\n            backgroundColor = '';\r\n            backgroundShade = sap.n.Launchpad.backgroundShade;\r\n        }\r\n\r\n        if (backgroundColor) oBlockCell.setBackgroundColorSet(backgroundColor);\r\n        if (backgroundShade) oBlockCell.setBackgroundColorShade(backgroundShade);\r\n\r\n    },\r\n\r\n    buildTileDefault: function (dataTile, tileWidth, dataCat, isMosedUsed) {\r\n        // Top \r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTile');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.5rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '38px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n\r\n            if (dataTile.titleAlignment === 'End') {\r\n                oBlockIcon.addStyleClass('nepTileIconLeft');\r\n            } else {\r\n                oBlockIcon.addStyleClass('nepTileIconRight');\r\n            }\r\n\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        // With Description\r\n        if (dataTile.type === 'carddesc') {\r\n            let textDescription = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('description', dataTile)\r\n            });\r\n            textDescription.addStyleClass('nepTileDescription');\r\n            oBlockContentTop.addItem(textDescription);\r\n        }\r\n\r\n        if (!isMosedUsed) {\r\n            // Image - background or image card\r\n            if (dataTile.image) {\r\n                let imageUrl;\r\n                let inlineStyle = new sap.ui.core.HTML(nepId());\r\n\r\n                if (AppCache.isMobile) {\r\n                    imageUrl = dataTile.imageData;\r\n                } else {\r\n                    imageUrl = AppCache.Url + dataTile.image;\r\n                }\r\n\r\n                inlineStyle.setDOMContent(`\r\n                    <style>\r\n                    .tileImage${dataTile.id} {\r\n                        background-image: url('${imageUrl}');\r\n                        background-size: cover;\r\n                        background-position: 0 80%;\r\n                    }\r\n                    </style>\r\n                `);\r\n\r\n                oBlockCell.addStyleClass('tileImage' + dataTile.id);\r\n                oBlockCell.addContent(inlineStyle);\r\n            }\r\n        }\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n        return oBlockCell\r\n    },\r\n\r\n    translateTile: function (field, dataTile) {\r\n        if (!dataTile) return;\r\n        if (dataTile[field] === null || dataTile[field] === 'null' || typeof dataTile[field] === 'undefined') return '';\r\n\r\n        let text = dataTile[field];\r\n\r\n        if (!dataTile.translation || dataTile.translation === '[]' || dataTile.translation.length === 0) return text;\r\n\r\n        dataTile.translation.forEach(function (data) {\r\n            if (data.language === AppCache.userInfo.language) text = data[field];\r\n        });\r\n\r\n        return text;\r\n    },\r\n\r\n    buildTileAction: function (dataTile, parent, oBlockCell, dataCat) {\r\n        let buttonStyle = sap.n.Launchpad.buildTileActionStyle(oBlockCell);\r\n        let supportedBrowser = true;\r\n        let openEnabled = true;\r\n\r\n        let oBlockContent = new sap.m.HBox(nepId());\r\n        oBlockContent.addStyleClass('nepTileAction sapUiSizeCompact');\r\n\r\n        // Check Offline Mode -> Disable Open button \r\n        if (AppCache.isOffline) {\r\n            if (dataTile.actionURL) openEnabled = false;\r\n            if (dataTile.type === 'storeitem') openEnabled = false;\r\n\r\n            if (dataTile.actionApplication) {\r\n                let app = ModelData.FindFirst(AppCacheData,\r\n                    ['application', 'language', 'appPath'],\r\n                    [dataTile.actionApplication.toUpperCase(),\r\n                    AppCache.userInfo.language,\r\n                    dataTile.urlApplication || '']);\r\n                if (!app) openEnabled = false;\r\n            }\r\n\r\n            if (dataTile.actionWebApp) {\r\n                if (dataTile.openWindow) {\r\n                    openEnabled = false;\r\n                } else {\r\n                    let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\r\n\r\n                    // Get App from Cache\r\n                    if (typeof p9Database !== 'undefined' && p9Database !== null) {\r\n                        p9GetView(viewName.toUpperCase()).then(function (viewData) {\r\n                            if (viewData.length < 10) openEnabled = false;\r\n                        });\r\n                    } else {\r\n                        if (!sapStorageGet(viewName.toUpperCase())) openEnabled = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Check usage of Remote Systems \r\n        if (dataTile.urlApplication && !AppCache.userInfo.azureToken) openEnabled = false;\r\n\r\n        // Supported Browsers\r\n        if (sap.ui.Device.os.name === 'win' && dataTile.browserBlockWin && dataTile.browserBlockWin !== '[]' && dataTile.browserBlockWin.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        if (sap.ui.Device.os.name === 'mac' && dataTile.browserBlockMac && dataTile.browserBlockWin !== '[]' && dataTile.browserBlockMac.indexOf(sap.ui.Device.browser.name) === -1) {\r\n            supportedBrowser = false;\r\n        }\r\n\r\n        if (dataTile.actionApplication || dataTile.actionWebApp || dataTile.actionURL || dataTile.actiongroup || dataTile.type === 'storeitem') {\r\n            if (supportedBrowser) {\r\n                if (dataTile.blackoutEnabled) {\r\n                    let butStart = new sap.m.Button(nepId(), {\r\n                        text: dataTile.blackoutText,\r\n                        type: 'Emphasized',\r\n                        press: function (oEvent) {\r\n                            descBlackout.editor.setData(dataTile.blackoutDescription);\r\n                            popBlackout.openBy(this);\r\n                        }\r\n                    });\r\n\r\n                    butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd nepTileBlackout ' + buttonStyle);\r\n                } else {\r\n                    if (dataTile.openClickTile) {\r\n                        if (openEnabled) {\r\n                            oBlockCell.attachBrowserEvent('click', function (oEvent) {\r\n                                setTimeout(function () {\r\n                                    if (sap.n.Launchpad.favInProcess) {\r\n                                        sap.n.Launchpad.favInProcess = false;\r\n                                    } else {\r\n                                        sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                                    }\r\n                                }, 50);\r\n                            });\r\n\r\n                            oBlockCell.addStyleClass('nepNavBarTile');\r\n                        }\r\n\r\n                    } else {\r\n                        let butStart = new sap.m.Button(nepId(), {\r\n                            text: AppCache_tOpen.getText(),\r\n                            type: 'Emphasized',\r\n                            enabled: openEnabled,\r\n                            press: function (oEvent) {\r\n                                sap.n.Launchpad.HandleTilePress(dataTile, dataCat);\r\n                            }\r\n                        });\r\n\r\n                        butStart.addStyleClass('nepTileAction sapUiTinyMarginEnd ' + buttonStyle);\r\n                    }\r\n                }\r\n            } else {\r\n                let butStart = new sap.m.Button(nepId(), {\r\n                    text: AppCache_tIncompatible.getText(),\r\n                    iconFirst: false,\r\n                    enabled: openEnabled,\r\n                    type: 'Emphasized',\r\n                    icon: 'sap-icon://sys-help',\r\n                    press: function (oEvent) {\r\n                        let browsers;\r\n\r\n                        if (sap.ui.Device.os.name === 'win') browsers = JSON.parse(dataTile.browserBlockWin);\r\n                        if (sap.ui.Device.os.name === 'mac') browsers = JSON.parse(dataTile.browserBlockMac);\r\n\r\n                        const m = {\r\n                            'cr': 'Chrome',\r\n                            'ed': 'Edge',\r\n                            'ff': 'Firefox',\r\n                            'ie': 'Internet Explorer',\r\n                            'op': 'Opera',\r\n                            'sf': 'Safari',\r\n                        };\r\n\r\n                        let array = browsers.map(function (k) {\r\n                            return { name: m[k] };\r\n                        });\r\n                        array.sort(sort_by('name'));\r\n                        modellistSupportedBrowsers.setData(array);\r\n                        popSupportedBrowsers.openBy(this);\r\n                    }\r\n                });\r\n\r\n                butStart.addStyleClass('nepTileAction nepTileBlocked sapUiTinyMarginEnd ' + buttonStyle);\r\n                oBlockContent.addItem(butStart);\r\n            }\r\n\r\n            let butFavAdd = new sap.m.Button(`${nepPrefix()}FavAdd${dataTile.id}`, {\r\n                tooltip: AppCache_tAddFav.getText(),\r\n                icon: 'sap-icon://unfavorite',\r\n                type: 'Emphasized',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n\r\n                    ModelData.Update(AppCacheTilesFav, 'id', dataTile.id, dataTile);\r\n                    setCacheAppCacheTilesFav();\r\n\r\n                    butFavDel.setVisible(true);\r\n                    butFavAdd.setVisible(false);\r\n\r\n                    sap.n.Launchpad.handleFavRedraw();\r\n                }\r\n            });\r\n\r\n            butFavAdd.addStyleClass('nepTileAction ' + buttonStyle);\r\n\r\n            let butFavDel = new sap.m.Button(`${nepPrefix()}FavDel${dataTile.id}`, {\r\n                tooltip: AppCache_tDelFav.getText(),\r\n                icon: 'sap-icon://favorite',\r\n                type: 'Emphasized',\r\n                press: function (oEvent) {\r\n                    sap.n.Launchpad.favInProcess = true;\r\n                    sap.n.Utils.message({\r\n                        title: AppCache_tFavTitle.getText(),\r\n                        intro: AppCache_tFavConfirm.getText(),\r\n                        text1: AppCache_tDelFavConfirm.getText(),\r\n                        state: 'Warning',\r\n                        acceptText: AppCache_tDelFavRemove.getText(),\r\n                        onAccept: function (oAction) {\r\n                            ModelData.Delete(AppCacheTilesFav, 'id', dataTile.id);\r\n                            setCacheAppCacheTilesFav();\r\n\r\n                            let butFavAdd = sap.ui.getCore().byId(`${nepPrefix()}FavAdd${dataTile.id}`);\r\n                            if (butFavAdd) butFavAdd.setVisible(true);\r\n\r\n                            sap.n.Launchpad.handleFavRedraw();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n\r\n            butFavDel.addStyleClass('nepTileAction ' + buttonStyle);\r\n\r\n            // Fav\r\n            let rec = ModelData.Find(AppCacheTilesFav, 'id', dataTile.id);\r\n\r\n            if (rec.length) {\r\n                butFavAdd.setVisible(false);\r\n                butFavDel.setVisible(true);\r\n            } else {\r\n                butFavAdd.setVisible(true);\r\n                butFavDel.setVisible(false);\r\n            }\r\n\r\n            if (!dataTile.openClickTile || dataTile.blackoutEnabled) oBlockContent.addItem(butStart);\r\n\r\n            if (!AppCache.isPublic && sap.n.Launchpad.enableFav && !AppCache.isOffline) {\r\n                oBlockContent.addItem(butFavAdd);\r\n                oBlockContent.addItem(butFavDel);\r\n            }\r\n\r\n        }\r\n\r\n        // Help \r\n        if (dataTile.helpEnabled) {\r\n            let butHelp = new sap.m.Button(nepId(), {\r\n                tooltip: AppCache_tHelp.getText(),\r\n                icon: 'sap-icon://sys-help',\r\n                type: 'Transparent',\r\n                press: function (oEvent) {\r\n                    descBlackout.editor.setData(dataTile.helpText);\r\n                    popBlackout.openBy(this);\r\n                }\r\n            });\r\n\r\n            oBlockContent.addItem(butHelp);\r\n        }\r\n\r\n\r\n        // Footer\r\n        if (dataTile.footer) {\r\n            let boxFooter = new sap.m.HBox(nepId(), {\r\n                width: '100%',\r\n                justifyContent: 'End',\r\n                alignContent: 'Center'\r\n            });\r\n            let footer = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('footer', dataTile)\r\n            });\r\n            footer.addStyleClass('nepTileFooter');\r\n            boxFooter.addItem(footer);\r\n            oBlockContent.addItem(boxFooter);\r\n\r\n        }\r\n\r\n        parent.addItem(oBlockContent);\r\n    },\r\n\r\n    buildTileActionStyle: function (oBlockCell) {\r\n        let color = oBlockCell.getBackgroundColorSet();\r\n\r\n        if (color) {\r\n            color = color.split('ColorSet')[1];\r\n        } else {\r\n            color = 5;\r\n        }\r\n        return 'nepTileAction' + color;\r\n    },\r\n\r\n    buildTileIntegrationCard: function (dataTile, tileWidth, dataCat) {\r\n\r\n        if (!sap.ui.integration) sap.ui.getCore().loadLibrary(\"sap.ui.integration\")\r\n\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileIntegartionCard');\r\n\r\n        oBlockCell.addStyleClass('sapUiNoContentPadding');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n        let oBlockContentAction = new sap.m.VBox(nepId());\r\n\r\n        oBlockContentAction.addStyleClass('sapUiContentPadding');\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n        oBlockContentParent.addItem(oBlockContentAction);\r\n\r\n        let objectId = 'intcard' + ModelData.genID();\r\n        let pageId = 'page' + dataCat.id;\r\n\r\n        let intCard = new sap.ui.integration.widgets.Card(objectId, {\r\n            manifest: dataTile.dataUrl,\r\n        });\r\n\r\n        oBlockContentTop.addItem(intCard);\r\n\r\n        // Pull Interval\r\n        if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[objectId]) {\r\n\r\n            sap.n.Launchpad.Timers[objectId] = {\r\n                timer: setInterval(function () {\r\n                    if (sap.n.Launchpad.Timers[objectId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n\r\n                    let card = sap.ui.getCore().byId(objectId);\r\n                    if (card) card.refresh();\r\n\r\n                }, dataTile.dataInterval * 1000),\r\n                pageId: pageId\r\n            };\r\n        }\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentAction, oBlockCell, dataCat);\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileHighchart: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileHighchart');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.4rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '32px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        let chartId = `chart${ModelData.genID()}`;\r\n        let pageId = `page${dataCat.id}`;\r\n\r\n        let oHighchart;\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id='${chartId}' style='height: 100%; width: 100%'></div>`,\r\n            afterRendering: function (oEvent) {\r\n                let chartData = localStorage.getItem('p9TileChart' + dataTile.id);\r\n                if (chartData) {\r\n                    let chartData = JSON.parse(chartData);\r\n                    if (!chartData.chart) chartData.chart = {};\r\n                    chartData.chart.renderTo = chartId;\r\n                    oHighchart = Highcharts.chart(chartData);\r\n                } else {\r\n                    oHighchart = Highcharts.chart({\r\n                        chart: {\r\n                            height: 100,\r\n                            renderTo: chartId,\r\n                            style: { fontFamily: '72' }\r\n                        },\r\n                        credits: { enabled: false },\r\n                        title: { text: '' },\r\n                        subTitle: { text: '' },\r\n                        series: []\r\n                    });\r\n                }\r\n\r\n                // Fetch Data \r\n                if (dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () {\r\n                        sap.n.Launchpad.getHighchartData(dataTile, oHighchart, pageId, chartId, 'start');\r\n                    }, 100);\r\n\r\n                    // Pull Interval\r\n                    if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighchartData(dataTile, oHighchart, pageId, chartId, 'continue');\r\n                            }, dataTile.dataInterval * 1000),\r\n                            pageId: pageId\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        oBlockContentTop.addItem(oHighchartHTML);\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n    buildTileHighstock: function (dataTile, tileWidth, dataCat) {\r\n        let oBlockCell = new sap.ui.layout.BlockLayoutCell(nepId(), {\r\n            title: sap.n.Launchpad.translateTile('title', dataTile),\r\n            titleAlignment: dataTile.titleAlignment || 'Begin',\r\n            titleLevel: dataTile.titleLevel || 'Auto',\r\n            width: tileWidth,\r\n        }).addStyleClass('nepTileHighstock');\r\n\r\n        sap.n.Launchpad.setBackgroundShade(dataTile, dataCat, oBlockCell);\r\n\r\n        let oBlockContentParent = new sap.m.VBox(nepId(), {\r\n            justifyContent: 'SpaceBetween',\r\n            height: 'calc(100% - 25px)'\r\n        });\r\n\r\n        let oBlockContentTop = new sap.m.VBox(nepId());\r\n\r\n        oBlockCell.addContent(oBlockContentParent);\r\n        oBlockContentParent.addItem(oBlockContentTop);\r\n\r\n        // SubTitle - Box\r\n        let oBlockContent = new sap.m.HBox(nepId(), {\r\n            width: '100%',\r\n            justifyContent: 'SpaceBetween'\r\n        });\r\n\r\n        // Reverse if title at End\r\n        if (dataTile.titleAlignment === 'End') oBlockContent.setDirection('RowReverse');\r\n\r\n        oBlockContent.addStyleClass('sapUiSmallMarginBottom');\r\n        oBlockContentTop.addItem(oBlockContent);\r\n\r\n        // SubTitle\r\n        if (dataTile.subTitle) {\r\n            let oBlockInfo = new sap.m.Text(nepId(), {\r\n                text: sap.n.Launchpad.translateTile('subTitle', dataTile)\r\n            });\r\n\r\n            oBlockContent.addItem(oBlockInfo);\r\n            oBlockInfo.addStyleClass('nepTileSubTitle');\r\n        }\r\n\r\n        if (dataTile.icon) {\r\n            let oBlockIcon;\r\n            if (dataTile.icon.indexOf('sap-icon') > -1) {\r\n                oBlockIcon = new sap.ui.core.Icon(nepId(), {\r\n                    src: dataTile.icon,\r\n                    size: '1.4rem',\r\n                    useIconTooltip: false\r\n                });\r\n            } else {\r\n                oBlockIcon = new sap.m.Image(nepId(), {\r\n                    src: dataTile.icon,\r\n                    width: '32px',\r\n                    densityAware: false,\r\n                });\r\n            }\r\n            oBlockContent.addItem(oBlockIcon);\r\n        }\r\n\r\n        const chartId = 'chart' + ModelData.genID();\r\n        const pageId = 'page' + dataCat.id;\r\n\r\n        let oHighchart;\r\n        let oHighchartHTML = new sap.ui.core.HTML(nepId(), {\r\n            content: `<div id=\"${chartId}\" style=\"height: 100%px; width: 100%\"></div>`,\r\n            afterRendering: function (oEvent) {\r\n                oHighchart = Highcharts.stockChart({\r\n                    chart: {\r\n                        height: 100,\r\n                        renderTo: chartId,\r\n                        style: { fontFamily: '72' }\r\n                    },\r\n                    credits: { enabled: false },\r\n                    title: { text: '' },\r\n                    subTitle: { text: '' },\r\n                    series: []\r\n                });\r\n\r\n                // Fetch Data \r\n                if (dataTile.dataUrl) {\r\n                    // Trigger Pull 1. Time\r\n                    setTimeout(function () {\r\n                        sap.n.Launchpad.getHighstockData(dataTile, oHighchart, pageId, chartId, 'start');\r\n                    }, 100);\r\n\r\n                    // Pull Interval\r\n                    if (dataTile.dataInterval && dataTile.dataInterval !== '0' && !sap.n.Launchpad.Timers[chartId]) {\r\n                        sap.n.Launchpad.Timers[chartId] = {\r\n                            timer: setInterval(function () {\r\n                                if (sap.n.Launchpad.Timers[chartId].pageId !== AppCacheNav.getCurrentPage().sId) return;\r\n                                sap.n.Launchpad.getHighstockData(dataTile, oHighchart, pageId, chartId, 'continue');\r\n                            }, dataTile.dataInterval * 1000),\r\n                            pageId: pageId\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        oBlockContentTop.addItem(oHighchartHTML);\r\n\r\n        // Actions\r\n        sap.n.Launchpad.buildTileAction(dataTile, oBlockContentParent, oBlockCell, dataCat);\r\n\r\n        return oBlockCell;\r\n    },\r\n\r\n\r\n    getHighchartData: function (dataTile, chart, pageId, chartId, init) {\r\n        let url = dataTile.dataUrl;\r\n        let querySep = '?';\r\n\r\n        if (url.indexOf('http') === -1) url = AppCache.Url + url;\r\n\r\n        // Add URL Query\r\n        if (url.indexOf('?') > -1) querySep = '&';\r\n        url = url + querySep + 'init=' + init;\r\n\r\n        request({\r\n            type: 'GET',\r\n            contentType: 'application/json',\r\n            url: url,\r\n            success: function (data) {\r\n                if (!chart) return;\r\n                if (!chart.series) return;\r\n\r\n                // Save to cache \r\n                localStorage.setItem('p9TileChart' + dataTile.id, JSON.stringify(data));\r\n\r\n                // Only redraw chart when number of series changes.\r\n                if (Array.isArray(data.series) && Array.isArray(chart.series) && chart.series.length !== data.series.length) {\r\n                    Array.isArray(data.series) && data.series.forEach(function (serie) {\r\n                        chart.addSeries(serie, false);\r\n                    });\r\n                    chart.update(data);\r\n                    chart.redraw();\r\n                } else {\r\n                    // Only update series values to get animation\r\n                    let seriesData = [];\r\n                    Array.isArray(data.series) && data.series.forEach(function (serie, i) {\r\n                        chart.series[i].setData(serie.data);\r\n                    });\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (sap.n.Launchpad.Timers[chartId]) clearInterval(sap.n.Launchpad.Timers[chartId].timer);\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    getHighstockData: function (dataTile, chart, pageId, chartId, init) {\r\n        let url = dataTile.dataUrl;\r\n        let querySep = '?';\r\n\r\n        if (url.indexOf('http') === -1) url = AppCache.Url + url;\r\n\r\n        // Add URL Query\r\n        if (url.indexOf('?') > -1) querySep = '&';\r\n        url = url + querySep + 'init=' + init;\r\n\r\n        request({\r\n            type: 'GET',\r\n            contentType: 'application/json',\r\n            url: url,\r\n            success: function (data) {\r\n                if (!chart) return;\r\n                if (!chart.series) return;\r\n\r\n                // Only redraw chart when number of series changes.\r\n                if (chart.series.length === 0) {\r\n                    data.series.forEach(function (serie) {\r\n                        chart.addSeries(serie, false);\r\n                    });\r\n                    chart.update(data);\r\n                    chart.redraw();\r\n                } else {\r\n                    // Only update series values to get animation\r\n                    let seriesData = [];\r\n                    data.series.forEach(function (serie, i) {\r\n                        chart.series[i].addPoint(serie.data, true, true);\r\n                    });\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (sap.n.Launchpad.Timers[chartId]) clearInterval(sap.n.Launchpad.Timers[chartId].timer);\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    traceTile: function (dataTile) {\r\n        if (!dataTile) return;\r\n        let system = sap.n.Launchpad.deviceType();\r\n\r\n        sap.n.Planet9.function({\r\n            id: dataSet,\r\n            method: 'TraceTile',\r\n            data: {\r\n                tile: dataTile.id,\r\n                launchpad: AppCache.launchpadID,\r\n                browserName: sap.ui.Device.browser.name,\r\n                browserVersion: sap.ui.Device.browser.version,\r\n                osName: sap.ui.Device.os.name,\r\n                osVersion: sap.ui.Device.os.version,\r\n                system: system\r\n            }\r\n        });\r\n\r\n    },\r\n\r\n    deviceType: function () {\r\n        const desktop = sap.ui.Device.system.desktop;\r\n        const tablet = sap.ui.Device.system.tablet;\r\n        const phone = sap.ui.Device.system.phone;\r\n\r\n        const deviceDesktop = sap.n.Launchpad.device.DESKTOP;\r\n        const deviceTablet = sap.n.Launchpad.device.TABLET;\r\n        const devicePhone = sap.n.Launchpad.device.PHONE;\r\n\r\n        if (desktop && tablet) {\r\n            if (isCordova()) return deviceTablet;\r\n            return deviceDesktop;\r\n        }\r\n\r\n        if (tablet && !isCordova()) return deviceDesktop;\r\n        if (desktop) return deviceDesktop;\r\n        if (tablet) return deviceTablet;\r\n        if (phone) return devicePhone;\r\n\r\n        return deviceDesktop;\r\n    },\r\n\r\n    isDesktop: function () { return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.DESKTOP; },\r\n    isTablet: function () { return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.TABLET; },\r\n    isPhone: function () { return sap.n.Launchpad.deviceType() === sap.n.Launchpad.device.PHONE; },\r\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"54f9e91c-ef25-4bbf-c923-ce5e7e7aeaae","fieldName":"sap.n.Customization","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":568,"fieldType":"neptune.Script","script":"const CustomizationStorage = {\n    formatTile(tile) {\n        return {\n            id: tile.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n        };\n    },\n\n    formatTiles(tiles) {\n        return tiles.map(this.formatTile);\n    },\n\n    formatTileGroup(tilegroup) {\n        return {\n            id: tilegroup.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n            tiles: this.formatTiles(tilegroup.tiles),\n            tilegroups: tilegroup.tilegroups.map((tg) => ({\n                id: tg.id,\n                status: \"active\",\n                props: {},\n                isCustom: false,\n            })),\n        };\n    },\n\n    formatCategory(selected, data) {\n        return {\n            id: selected.id,\n            status: \"active\",\n            props: {},\n            isCustom: false,\n            tiles: this.formatTiles(selected.tiles),\n            tilegroups: selected.tilegroups\n                .map((tilegroup) => {\n                    const tg = data.categoryChilds.find((child) => child.id === tilegroup.id);\n                    if (!tg) return null;\n\n                    return this.formatTileGroup(tg);\n                })\n                .filter((tilegroup) => tilegroup !== null),\n        };\n    },\n\n    formatCategories(data) {\n        return data.category.map((c) => this.formatCategory(c, data));\n    },\n\n    // convert list of objects to [{ id }]\n    arrToIds(arr) {\n        return arr.map((item) => item.id);\n    },\n\n    // get new category/tilegroup/tile from what are available\n    // current = current list of category/tilegroup/tile in customization\n    // available = available list of category/tilegroup/tile from p9 backend\n    newFromAvailable(current, available, src) {\n        const currentIds = this.arrToIds(current);\n        const availableIds = this.arrToIds(available);\n        const newIds = availableIds.filter((id) => !currentIds.includes(id));\n        return newIds\n            .map((newId) => src.find(({ id }) => id === newId))\n            .filter((item) => item !== undefined);\n    },\n\n    // check if user has access category/tilegroup/tile\n    // current = current list of category/tilegroup/tile in customization\n    // available = available list of category/tilegroup/tile from p9 backend\n    filterByAccess(current, available) {\n        const availableIds = this.arrToIds(available);\n        return current.filter((item) => {\n            if (item.isCustom) return true;\n            return availableIds.includes(item.id);\n        });\n    },\n\n    // group can be a category or a tilegroup\n    mergeTiles(type, group, data) {\n        group.tiles = this.filterByAccess(group.tiles, data.tiles);\n\n        // add new tiles\n        let groupData = null;\n        if (type === \"category\")\n            groupData = data.category.find((category) => category.id === group.id);\n        else if (type === \"tilegroup\")\n            groupData = data.categoryChilds.find((tilegroup) => tilegroup.id === group.id);\n\n        if (groupData) {\n            const newTiles = this.newFromAvailable(group.tiles, groupData.tiles, data.tiles);\n            if (newTiles.length === 0) return;\n\n            newTiles.forEach((tile) => {\n                // find tile position relative to original position inside the tiles list\n                // try to place tile on that particular position\n                const placeAt = groupData.tiles.findIndex((groupTile) => groupTile.id === tile.id)\n                const formatted = this.formatTile(tile);\n\n                // if we are able to find a position to place the tile, then place the tile\n                // otherwise just push it the end\n                if (placeAt > -1) {\n                    group.tiles.splice(placeAt, 0, formatted);\n                } else {\n                    group.tiles.push(formatted);\n                }\n            });\n        }\n    },\n\n    mergeTileGroups(category, data) {\n        category.tilegroups = this.filterByAccess(category.tilegroups, data.categoryChilds);\n\n        // add new tilegroups\n        const categoryData = data.category.find((cat) => cat.id === category.id);\n        if (categoryData) {\n            const newTileGroups = this.newFromAvailable(\n                category.tilegroups,\n                categoryData.tilegroups,\n                data.categoryChilds\n            );\n            newTileGroups.forEach((tilegroup) => {\n                category.tilegroups.push(this.formatTileGroup(tilegroup));\n            });\n        }\n\n        // merge tiles in tilegroup\n        for (const tilegroup of category.tilegroups) {\n            this.mergeTiles(\"tilegroup\", tilegroup, data);\n        }\n    },\n\n    mergeCategories(existing, data) {\n        existing.categories = this.filterByAccess(existing.categories, data.category);\n\n        for (const category of existing.categories) {\n            this.mergeTileGroups(category, data);\n            this.mergeTiles(\"category\", category, data);\n        }\n\n        // add newly added categories\n        const newCategories = this.newFromAvailable(\n            existing.categories,\n            data.category,\n            data.category\n        );\n        newCategories.forEach((category) => {\n            existing.categories.push(this.formatCategory(category, data));\n        });\n    },\n\n    merge(existing, data) {\n        this.mergeCategories(existing, data);\n    },\n};\n\nsap.n.Customization = {\n    // if customization are not enabled per device\n    // by default we will use 'default' as the device name\n    getDeviceType() {\n        return this.isDeviceBased() ? sap.n.Launchpad.deviceType() : 'default';\n    },\n\n    isEmpty(obj) {\n        return Object.keys(obj).length === 0;\n    },\n\n    isInitialized() {\n        return !this.isEmpty(this.getCustomizationsFor(this.getDeviceType()));\n    },\n\n    // buttons to customize screens is active / inactive\n    isActive: false,\n\n    setActivation(visible) {\n        this.isActive = visible;\n\n        btnAddNewPage.setVisible(visible);\n        btnManagePages.setVisible(visible);\n        btnEditPagesDone.setVisible(visible);\n\n        if (visible) {\n            this.jiggle();\n        }\n    },\n\n    isDeviceBased() {\n        return AppCache.config && AppCache.config.enableDeviceBasedCustomizations === true;\n    },\n\n    areScreensLocked() {\n        const { lockScreenChanges } = modelAppCacheDiaSettings.getData();\n        return !!lockScreenChanges;\n    },\n\n    isUserAnonymous() {\n        return AppCache && AppCache.userInfo && AppCache.userInfo.username && AppCache.userInfo.username === 'anonymous';\n    },\n\n    areExplicitlyDisabled() {\n        return AppCache.config && AppCache.config.disableCustomizations === true;\n    },\n\n    // force disabled, otherwise existing launchpads would break\n    isDisabled() {\n        if (this.areExplicitlyDisabled()) return true;\n        \n        if (!this.isSupported()) return true;\n\n        // anonymous user is not logged in, and has random public access to the launchpad\n        // so saving customizations for such user is not useful\n        if (this.isUserAnonymous()) return true;\n\n        // public launchpads are used by everyone in the same standard way\n        // so customizations are disabled\n        if (AppCache.isPublic) return true;\n\n        // view standard screens\n        const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n        if (disableScreenChanges) return true;\n\n        return false;\n    },\n\n    addCustomizableClass() {\n        querySelector(\"html\").classList.add(\"lp-is-customizable\");\n    },\n\n    removeCustomizableClass() {\n        querySelector(\"html\").classList.remove(\"lp-is-customizable\");\n    },\n\n    init(data) {\n        if (this.isDisabled()) {\n            this.setCustomizationsInContext(this.formatForStorage(data));\n            return Promise.resolve();\n        }\n\n        this.addCustomizableClass();\n\n        if (this.isInitialized()) {\n            CustomizationStorage.merge(this.getCustomizationsInContext(), data);\n            this.save();\n            return Promise.resolve();\n        }\n\n        return new Promise((resolve, _reject) => {\n            this.fetchFromP9()\n                .then((customizations) => {\n                    if (customizations && !this.isEmpty(customizations)) {\n                        // update from server\n                        this.setCustomizationsInContext(customizations);\n                    } else {\n                        // initiate based on current launchpad settings\n                        this.setCustomizationsInContext(this.formatForStorage(data));\n                    }\n\n                    this.save();\n                })\n                .finally(() => {\n                    resolve();\n                });\n        });\n    },\n\n    getCustomizations() {\n        return modelAppCacheCustomization.getData();\n    },\n\n    getCustomizationsFor(deviceType) {\n        const data = this.getCustomizations()[deviceType];\n        if (!data || this.isEmpty(data)) return {};\n        return data;\n    },\n\n    getCustomizationsInContext() {\n        return this.getCustomizationsFor(this.getDeviceType());\n    },\n\n    setCustomizationsFor(deviceType, customizations) {\n        const data = this.getCustomizations();\n        data[deviceType] = customizations;\n        modelAppCacheCustomization.setData(data);\n    },\n\n    setCustomizationsInContext(customizations) {\n        this.setCustomizationsFor(this.getDeviceType(), customizations);\n    },\n\n    saveToLocal() {\n        setCacheAppCacheCustomization();\n    },\n\n    // customizations are only supported for 21-lts onwards, with 22-lts offering backend storage\n    isSupported() {\n        return parseInt(AppCache.p9Version.split(\".\")[0]) >= 21;\n    },\n\n    // we only support storing customization from 22-LTS onwards\n    isP9Supported() {\n        if (!AppCache.p9Version) return false;\n        return parseInt(AppCache.p9Version.split(\".\")[0]) >= 22;\n    },\n\n    getP9URL(deviceType) {\n        return `${AppCache.Url}/api/launchpad_customizations/${AppCache.launchpadID}/${deviceType}`;\n    },\n\n    fetchFromP9() {\n        if (!this.isP9Supported()) return Promise.resolve({});\n\n        // make a call to p9 to fetch customizations for device\n        return new Promise((resolve, _reject) => {\n            jsonRequest({\n                type: \"GET\",\n                url: this.getP9URL(this.getDeviceType()),\n            }).then((res) => {\n                if (this.isEmpty(res)) {\n                    return resolve({});\n                }\n\n                return resolve(res[\"config\"]);\n            });\n        });\n    },\n\n    saveToP9() {\n        if (!this.isP9Supported()) return;\n\n        const deviceType = this.getDeviceType();\n        return jsonRequest({\n            type: \"POST\",\n            url: this.getP9URL(deviceType),\n            data: JSON.stringify({\n                config: this.getCustomizationsFor(deviceType),\n            }),\n        });\n    },\n\n    removeFromP9() {\n        if (!this.isP9Supported()) return;\n\n        const deviceType = this.getDeviceType();\n        return jsonRequest({\n            type: \"DELETE\",\n            url: this.getP9URL(deviceType),\n        });\n    },\n\n    clearCustomizations() {\n        this.setCustomizationsInContext(null);\n        this.saveToLocal();\n        return this.removeFromP9();\n    },\n\n    formatForStorage(data) {\n        return {\n            categories: CustomizationStorage.formatCategories(data),\n        };\n    },\n\n    save() {\n        this.saveToLocal();\n        this.saveToP9();\n    },\n\n    // give the id (uuid) of a Category/TileGroup/Tile find it's path\n    // only search within category if provided\n    // status = active/inactive/'', empty = don't filter on status\n    findPath(id, status = \"\") {\n        const customizations = this.getCustomizationsInContext();\n        if (this.isEmpty(customizations)) return;\n\n        const categories = customizations.categories.filter((category) => {\n            if (status === \"\") return true;\n            return category.status === status;\n        });\n\n        for (const { id: categoryId, tiles, tilegroups } of categories) {\n            if (id === categoryId) return { type: \"category\", path: [categoryId] };\n\n            for (const { id: tileId } of tiles) {\n                if (id === tileId) return { type: \"tile\", path: [categoryId, tileId] };\n            }\n\n            for (const { id: tileGroupId, tiles } of tilegroups) {\n                if (id === tileGroupId)\n                    return { type: \"tilegroup\", path: [categoryId, tileGroupId] };\n\n                for (const { id: tileId } of tiles) {\n                    if (id === tileId)\n                        return { type: \"tile\", path: [categoryId, tileGroupId, tileId] };\n                }\n            }\n        }\n    },\n\n    // find item the list [{ id }]\n    findInList(id, list) {\n        const item = list.find((item) => item.id === id);\n        if (item) return [item, list, list.findIndex((item) => item.id === id)];\n        return [null, list, -1];\n    },\n\n    // returns item for the last uuid in uuids array, and the array inside which the item exists\n    // returning\n    //      [null, message, -1] not found, message will clarify the reason\n    //      [null, list, -1]    not found, in the list\n    //      [item, list, index] item was found, in the list\n    // status can be active/inactive, on removal status becomes inactive\n    find(uuids, status = \"active\") {\n        const customizations = this.getCustomizationsInContext();\n        if (this.isEmpty(customizations)) return [null, \"customization is not initialized\", -1];\n\n        function itemStatusCheck(item) {\n            // if item exists and status to find is '' then it exists\n            if (item && status === \"\") return true;\n            return item && item.status === status;\n        }\n\n        let found;\n        const level = uuids.length;\n        if (level === 1) {\n            found = this.findInList(uuids[0], customizations.categories);\n            if (itemStatusCheck(found[0])) return found;\n            return [null, \"category does not exist\", -1];\n        } else if (level === 2) {\n            const [category, categories] = this.find([uuids[0]]);\n            if (!category) return [null, categories, -1];\n\n            // at the level 2, item exists in either a tile or  tilegroup\n\n            found = this.findInList(uuids[1], category.tiles);\n            if (itemStatusCheck(found[0])) return found;\n\n            found = this.findInList(uuids[1], category.tilegroups);\n            if (itemStatusCheck(found[0])) return found;\n\n            return [null, \"does not exist in tile or tile group\", -1];\n        } else if (level === 3) {\n            found = this.find([uuids[0], uuids[1]]);\n\n            // if tilegroup does not exist, or\n            if (!found[0]) return [null, found[1], -1];\n\n            // if tilegroup does not have tiles (which means uuids[1] probably refers to a tile)\n            //  so we won't be able to use uuid[2] further to find the actual match\n            if (found[0] && !found[0].tiles)\n                return [null, \"unable to use the 3rd uuid to find further\", -1];\n\n            // TileGroup > TileGroup > Tile\n            // at this last-level we are only looking for a tile\n            found = this.findInList(uuids[2], found[0].tiles);\n            if (itemStatusCheck(found[0])) return found;\n\n            return [null, \"tile does not exist in TileGroup > TileGroup\", -1];\n        }\n\n        // should never get here, if it does we return not found\n        return [null, \"we do not know where to look\", -1];\n    },\n\n    // type can be T=TILE or TG=TILE_GROUP\n    // add item to index, uuids is destination path\n    add(type, item, index, uuids = []) {\n        // on move the item status might be removed\n        item.status = \"active\";\n\n        // if no uuid then add it to categories\n        if (uuids.length === 0) {\n            if (type === \"TG\") {\n                const customizations = this.getCustomizationsInContext();\n                const [category, _, categoryIndex] = this.findInList(\n                    item.id,\n                    customizations.categories\n                );\n\n                if (category) customizations.categories.splice(categoryIndex, 1);\n                customizations.categories.splice(index, 0, item);\n                this.save();\n            }\n            return;\n        }\n\n        // get the item on the uuids path, add to that item to category or tilegroups at the specified index\n        let [found] = this.find(uuids, \"active\");\n        if (!found) return;\n\n        if (type === \"TG\") {\n            const [tilegroup, _, tilegroupIndex] = this.findInList(item.id, found.tilegroups);\n\n            if (tilegroup) found.tilegroups.splice(tilegroupIndex, 1);\n            found.tilegroups.splice(index, 0, item);\n        } else if (type === \"T\") {\n            const [tile, _, tileIndex] = this.findInList(item.id, found.tiles);\n            if (tile) found.tiles.splice(tileIndex, 1);\n            found.tiles.splice(index, 0, item);\n        }\n\n        this.save();\n    },\n\n    remove(uuids) {\n        let [found, list, index] = this.find(uuids);\n        if (!found) return;\n\n        found.status = \"inactive\";\n\n        // custom items can be removed\n        if (found.isCustom) {\n            list.splice(index, 1);\n        }\n\n        this.save();\n    },\n\n    // only useful for calculating then next index when moving\n    // a Category/Tile/TileGroup within it's own list\n    moveToIndex(current, next) {\n        return current === 0 || next === 0 || next + 1 >= current ? next : next - 1;\n    },\n\n    // is moving inside categories, tilegroups or within it's parent group\n    isSrcEqualToDst(src, dst) {\n        const srcLen = src.length;\n        const dstLen = dst.length;\n\n        if (srcLen === 1 && dstLen === 0) {\n            // moving category inside categories\n            return true;\n        } else if (srcLen === 2 && dstLen === 1 && src[0] === dst[0]) {\n            // moving tile group inside category or tile inside category\n            return true;\n        } else if (srcLen === 3 && dstLen === 2 && src[0] === dst[0] && src[1] === dst[1]) {\n            // moving tile inside tilegroup\n            return true;\n        }\n\n        return false;\n    },\n\n    // an array of from/to consisting of UUID's defining the location to move from/to\n    // e.g. src: [tile_group_id, tile_id], dst: [tile_group_id, tile_group_id, tile_id]\n    //      src: Tile Group > Tile\n    //      dst: Tile Group > Tile Group > Tile at (position 2)\n    move(type, src, dst, index) {\n        let [item, _list, currentIndex] = this.find(src);\n        if (!item) return;\n\n        if (this.isSrcEqualToDst(src, dst)) {\n            if (index === currentIndex) return;\n            index = this.moveToIndex(currentIndex, index);\n        }\n\n        this.remove(src);\n        this.add(type, JSON.parse(JSON.stringify(item)), index, dst);\n    },\n\n    // categories, tilegroups, tiles in an array, based on status\n    filterByStatus(item, status) {\n        return item !== undefined && item.status === status;\n    },\n\n    filterByActiveStatus(item) {\n        if (typeof item.status === 'undefined') return true;\n        return this.filterByStatus(item, \"active\");\n    },\n\n    getCategory(categoryId) {\n        const category = ModelData.FindFirst(AppCacheCategory, \"id\", categoryId);\n        if (category) return category;\n\n        return this.getCategories().find((category) => category.id === categoryId);\n    },\n\n    getAllCategories() {\n        const { categories } = this.getCustomizationsInContext();\n        return categories\n            .map((category) => {\n                if (category.isCustom) return category;\n                return Object.assign({}, this.getCategory(category.id), {\n                    status: category.status,\n                });\n            })\n            .filter((category) => typeof category !== \"undefined\");\n    },\n\n    getCategories() {\n        const { categories } = this.getCustomizationsInContext();\n        if (typeof categories === \"undefined\") {\n            return modelAppCacheCategory\n                .getData()\n                .map((c) => Object.assign({}, JSON.parse(JSON.stringify(c))), {\n                    status: \"active\",\n                });\n        }\n\n        return categories\n            .filter((category) => this.filterByActiveStatus(category))\n            .map((category) => {\n                if (category.isCustom) return category;\n                return Object.assign({}, this.getCategory(category.id), {\n                    status: \"active\",\n                });\n            })\n            .filter((category) => typeof category !== \"undefined\");\n    },\n\n    getTileGroup(tileGroupId) {\n        return ModelData.FindFirst(AppCacheCategoryChild, \"id\", tileGroupId);\n    },\n\n    getTileGroups(id) {\n        const result = this.findPath(id);\n        if (result === undefined) return [];\n\n        const { path } = this.findPath(id);\n        if (path.length === 0) return [];\n\n        const [item] = this.find(path);\n        if (!item) return [];\n\n        const { tilegroups } = item;\n        return tilegroups\n            .filter((tileGroup) => this.filterByActiveStatus(tileGroup))\n            .map((tileGroup) => this.getTileGroup(tileGroup.id))\n            .filter((tileGroup) => typeof tileGroup !== \"undefined\");\n    },\n\n    getTile(tileId) {\n        return ModelData.FindFirst(AppCacheTiles, \"id\", tileId);\n    },\n\n    getTiles(id) {\n        const result = this.findPath(id);\n        if (result === undefined || result.path.length === 0) {\n            // if we are fetching tiles for tile group, but get nothing\n            // it \"might\" be a referenced from a Tile itself as action. But,\n            // the tiles inside it are not included directly as part of the launchpad\n            const tileGroup = sap.n.Customization.getTileGroup(id);\n            if (Array.isArray(tileGroup.tiles) && tileGroup.tiles.length > 0) {\n                // TODO can this be customized, because it would get a little bit weird to customize tiles that are not directly references\n                return tileGroup.tiles;\n            }\n\n            return [];\n        }\n\n        const [item] = this.find(result.path);\n        if (!item) return [];\n\n        const { tiles } = item;\n        return tiles\n            .filter((tile) => this.filterByActiveStatus(tile))\n            .map((tile) => this.getTile(tile.id))\n            .filter((tile) => typeof tile !== \"undefined\");\n    },\n\n    jiggleElement() {\n        return querySelector(\"html\");\n    },\n\n    jiggle() {\n        this.jiggleElement().classList.add(\"jiggle\");\n    },\n\n    isJiggling() {\n        return this.jiggleElement().classList.contains(\"jiggle\");\n    },\n\n    stopJiggling() {\n        this.setActivation(false);\n        this.jiggleElement().classList.remove(\"jiggle\");\n    },\n\n    checkToStopJigglingOnMouseDown(e) {\n        if (!sap.n.Customization.isJiggling()) return;\n\n        let el = e.target;\n\n        // check if mousedown has occurred inside the AppCacheNav\n        let inContext = false;\n        while (el) {\n            if (el.id === \"AppCacheNav\") {\n                inContext = true;\n                break;\n            }\n\n            el = el.parentNode;\n        }\n\n        if (!inContext) return;\n\n        // check if event was recieved by nepFCardContainer or one of it's children\n        const clsCardContainer = \"nepFCardContainer\";\n        const clsNewCard = \"nepNewCard\";\n        el = e.target;\n        while (\n            el &&\n            el.classList &&\n            !el.classList.contains(clsCardContainer) &&\n            !el.classList.contains(clsNewCard)\n        ) {\n            el = el.parentNode;\n        }\n\n        // event was not recieved on the Edit Screen interactive element\n        if (\n            !el ||\n            !el.classList ||\n            (!el.classList.contains(clsCardContainer) && !el.classList.contains(clsNewCard))\n        ) {\n            sap.n.Customization.stopJiggling();\n        }\n    },\n\n    findTileIndex(tileId, parentElm) {\n        return Array.from(parentElm.querySelectorAll(\".nepFCardContainer\")).findIndex((tileElm) => {\n            return tileElm.dataset.tileId === tileId;\n        });\n    },\n\n    findTileElement(elm) {\n        for (let parent = elm; parent; parent = parent.parentNode) {\n            const ds = parent.dataset;\n            if (ds.context && ds.context === \"tile\") {\n                return parent;\n            }\n        }\n\n        return null;\n    },\n\n    findTileDragContext(tileId, tileElm) {\n        const index = this.findTileIndex(tileId, tileElm.parentNode);\n\n        for (let parent = tileElm.parentNode; parent; parent = parent.parentNode) {\n            const ds = parent.dataset;\n            if (ds.context) {\n                const context = ds.context;\n\n                if (context === \"page\" || context === \"category-tiles\") {\n                    return {\n                        index,\n                        tileId,\n                        context,\n                        parent: [ds.categoryId],\n                    };\n                } else if (context === \"tilegroup-tiles\") {\n                    return {\n                        index,\n                        tileId,\n                        context,\n                        parent: [ds.categoryId, ds.tilegroupId],\n                    };\n                }\n            }\n        }\n\n        return null;\n    },\n\n    tilesDragDropClass: \"tiles-drag-drop\",\n    applyDragDropToTiles(sapElm) {\n        if (this.isDisabled()) return;\n\n        let src, dst;\n\n        function onStart(evt, ui) {\n            const elm = ui.item.get(0);\n            if (!elm) return;\n\n            const tileId = elm.dataset.tileId;\n            if (!tileId) return;\n\n            src = this.findTileDragContext(tileId, elm);\n        }\n\n        function onStop(evt, ui) {\n            const elm = ui.item.get(0);\n            if (!elm) return;\n\n            const tileId = elm.dataset.tileId;\n            if (!tileId) return;\n\n            dst = this.findTileDragContext(tileId, elm);\n\n            // moving tiles within category / tilegroup\n            if (src.parent.join(\"\") === dst.parent.join(\"\")) {\n                dst.index = sap.n.Customization.moveToIndex(src.index, dst.index);\n            }\n\n            sap.n.Customization.move(\"T\", [...src.parent, src.tileId], dst.parent, dst.index);\n        }\n\n        const selector = `#${sapElm.getId()} .${this.tilesDragDropClass}`;\n        sap.n.DragDrop.connectWith(selector, onStart.bind(this), onStop.bind(this));\n    },\n\n    setCardSize(elm, width, height) {\n        if (!elm) return;\n\n        elm.classList.remove(\n            ...[\"Small\", \"Medium\", \"Wide\", \"Wider\", \"Max\", \"Tall\", \"Tower\", \"Skyscraper\"].map(\n                (v) => `nepTile${v}`\n            )\n        );\n\n        elm.classList.add(`nepTile${width ?? \"Small\"}`);\n        if (height) elm.classList.add(`nepTile${height}`);\n    },\n\n    onCardResize() {\n        const width = selResizeTileWidth.getSelectedKey();\n        const height = selResizeTileHeight.getSelectedKey();\n        const { isFav, context, tileElm } = modelpopResizeTile.getData();\n        const tileId = context.tileId;\n\n        this.setCardSize(tileElm, width, height);\n        popResizeTile.close();\n\n        if (isFav) {\n            const fav = ModelData.FindFirst(AppCacheTilesFav, \"id\", tileId);\n            fav.cardWidth = width;\n            fav.cardHeight = height;\n\n            ModelData.Update(AppCacheTilesFav, \"id\", tileId, fav);\n            setCacheAppCacheTilesFav();\n            sap.n.Launchpad.saveFav();\n        } else {\n            const path = [...context.parent, tileId];\n            this.saveProperties(path, { width, height });\n        }\n    },\n\n    showManagePagesDialog() {\n        modelManagePages.setData(\n            sap.n.Customization.getAllCategories().map((c) => ({\n                id: c.id,\n                status: c.status,\n                isCustom: !!c.isCustom,\n                title: c.isCustom ? c.props.menuText : c.title,\n            }))\n        );\n\n        diaManagePages.open();\n    },\n\n    showAddPageDialog() {\n        modelPageForm.setData({\n            menuText: \"New Screen\",\n            title: \"New Screen Title\",\n            subTitle: \"\",\n        });\n        diaPage.open();\n    },\n\n    addPage(props) {\n        const id = ModelData.genID();\n        const customizations = this.getCustomizationsInContext();\n        this.add(\n            \"TG\",\n            {\n                props,\n                id,\n                isCustom: true,\n                tilegroups: [],\n                tiles: [],\n            },\n            customizations.categories.length\n        );\n        sap.n.Launchpad.BuildMenuTop();\n        location.hash = `neptopmenu&${id}`;\n\n        // activate edit screen, on creating a new screen\n        this.setActivation(true);\n        this.jiggle();\n\n        // open add new app dialog\n        this.onAddTile([id]);\n    },\n\n    setPage(props) {\n        const categoryId = props.id;\n        const { menuText, title, subTitle } = props;\n        this.saveProperties([categoryId], { menuText, title, subTitle });\n\n        const pageCat = sap.ui.getCore().byId(`page${categoryId}`);\n        if (pageCat) pageCat.destroy();\n\n        const category = this.getCategory(categoryId);\n        if (category) sap.n.Launchpad.BuildTiles(category);\n\n        sap.n.Launchpad.BuildMenuTop();\n    },\n\n    onAddTile(parent) {\n        const [obj, _list, index] = sap.n.Customization.find(parent);\n        if (index === -1) return;\n\n        const activeTileIds = obj.tiles\n            .filter((tile) => sap.n.Customization.filterByActiveStatus(tile))\n            .map((tile) => tile.id);\n        const missingTiles = modelAppCacheTiles\n            .getData()\n            .filter((tile) => !activeTileIds.includes(tile.id));\n\n        modelAddTiles.setData(\n            missingTiles.map((tile) => ({\n                parent,\n                id: tile.id,\n                title: tile.title,\n                subTitle: tile.subTitle,\n                visible: true,\n            }))\n        );\n        diaAddTile.open();\n    },\n\n    // path to where page/tilegroup/tile exists\n    // props can be anything from { width, height } to complete information about the page/tilegroup/tile\n    saveProperties(path, props) {\n        let [found] = this.find(path);\n        if (!found) return;\n\n        found.props = props;\n        this.save();\n    },\n\n    getProperties(path) {\n        let [found] = this.find(path);\n        if (!found) return false;\n        return found.props;\n    },\n};\n\nsap.n.Customization.Popover = {\n    // context in which popover was called\n    context: null,\n\n    createEventDelegate(config) {\n        let longPressTimer = null;\n        return {\n            oncontextmenu(e) {\n                if (sap.n.Customization.isJiggling()) return;\n                if (e.button < 2) return;\n\n                const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n                if (disableScreenChanges) return true;\n\n                const elm = elById(config.elmId);\n                if (!elm) return;\n\n                sap.n.Customization.Popover.open(elm, config);\n                e.preventDefault();\n            },\n            onmousedown(e) {\n                if (sap.n.Customization.isJiggling()) return;\n\n                const { disableScreenChanges } = modelAppCacheDiaSettings.getData();\n                if (disableScreenChanges) return true;\n\n                // long press to show user menu is not applicable for the desktop\n                if (navigator.maxTouchPoints === 0) return;\n\n                longPressTimer = setTimeout(() => {\n                    const elm = elById(config.elmId);\n                    if (!elm) return;\n\n                    sap.n.Customization.Popover.open(elm, config);\n                }, 1000);\n            },\n            onmouseup(e) {\n                clearTimeout(longPressTimer);\n            },\n        };\n    },\n\n    onEditCustomPage(id) {\n        const category = sap.n.Customization.getCategory(id);\n        if (!category) return;\n\n        const { menuText, title, subTitle } = category.props;\n        modelPageForm.setData({ id, menuText, title, subTitle });\n        diaPage.open();\n        diaManagePages.close();\n    },\n\n    onAddCustomPage() {\n        sap.n.Customization.showAddPageDialog();\n        this.close();\n    },\n\n    onEditPage() {\n        sap.n.Customization.setActivation(true);\n        sap.n.Customization.jiggle();\n        this.close();\n    },\n\n    onDeletePage(id) {\n        diaManagePages.close();\n\n        const category = sap.n.Customization.getCategory(id);\n        if (!category) return;\n\n        let title = category.title;\n        if (category.isCustom) title = category.props.menuText;\n\n        sap.m.MessageBox.confirm(`Are you sure, you want to remove ${title}? `, {\n            onClose: function (action) {\n                if (action === \"OK\") {\n                    sap.n.Customization.remove([id]);\n                    sap.n.Launchpad.BuildMenuTop();\n\n                    if (id === getActivePageCategoryId()) {\n                        AppCache._Home();\n                    }\n\n                    sap.n.Customization.showManagePagesDialog();\n                }\n            },\n        });\n    },\n\n    onActivatePage(id) {\n        const [category] = sap.n.Customization.find([id], \"inactive\");\n        if (!category) return;\n\n        category.status = \"active\";\n        sap.n.Customization.save();\n        sap.n.Launchpad.BuildMenuTop();\n    },\n\n    onManagePages() {\n        this.close();\n        sap.n.Customization.showManagePagesDialog();\n    },\n\n    addTileFromDialog(tileId, parent) {\n        const item = CustomizationStorage.formatTile(sap.n.Customization.getTile(tileId));\n        const [parentItem] = sap.n.Customization.find(parent);\n        sap.n.Customization.add(\"T\", item, parentItem.tiles.length, parent);\n        sap.n.Launchpad.RebuildTiles();\n    },\n\n    onTileResize() {\n        console.log(\"onTileResize\");\n        this.close();\n    },\n\n    onMoveTileToAnotherPage() {\n        modeldiaMoveTile.setData(this.context);\n        \n        const cats = sap.n.Customization.getCategories().filter((c) => c.id !== getActivePageCategoryId());\n        modelMoveTile.setData(\n            cats.map((c) => ({\n                id: c.id,\n                title: c.isCustom ? c.props.menuText : c.title,\n            }))\n        );\n\n        this.close();\n        diaMoveTile.open();\n    },\n\n    onTileRemove() {\n        const { elmId, tileId } = this.context;\n        const elm = sap.ui.getCore().byId(elmId);\n        if (elm) {\n            const ctx = sap.n.Customization.findTileDragContext(tileId, elm.getDomRef());\n            if (!ctx) return;\n\n            sap.n.Customization.remove([...ctx.parent, ctx.tileId]);\n            elm.destroy();\n        }\n\n        this.close();\n    },\n\n    init() {\n        if (sap.n.Customization.isDisabled()) return;\n    },\n\n    isOpen() {\n        return popCustomizationTiles.isOpen();\n    },\n\n    open(elm, config) {\n        if (!elm || this.isOpen()) return;\n        \n        this.context = config;\n        popCustomizationTiles.openBy(elm);\n    },\n\n    close() {\n        popCustomizationTiles.close();\n    },\n};\n\n// mousedown event to check and stop jiggling\ndocument.body.addEventListener(\"mousedown\", sap.n.Customization.checkToStopJigglingOnMouseDown);\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"fc679d4b-a3da-49d7-e760-c7de380e8570","fieldName":"sap.n.DragDrop","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":569,"fieldType":"neptune.Script","script":"let dragDropProps = {\n    forceHelperSize: true,\n    tolerance: 'pointer',\n    revert: 25,\n    opacity: 0.5,\n    scroll: true,\n    placeholder: 'dragPlaceholder',\n};\n\nsap.n.DragDrop = {\n    restrictedTo(elm, onDragStart, onDragStop) {\n        return jQuery(elm).sortable({\n            ...dragDropProps,\n            start: onDragStart,\n            stop: onDragStop,\n            containment: 'parent',\n        });\n    },\n\n    connectWith(selector, onDragStart, onDragStop) {\n        return jQuery(selector).sortable({\n            ...dragDropProps,\n            start: onDragStart,\n            stop: onDragStop,\n            connectWith: selector,\n        });\n    },\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2d041e7e-d3b4-43ea-b015-d58ee0cd22fa","fieldName":"sap.n.Layout","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":570,"fieldType":"neptune.Script","script":"sap.n.Layout = {\r\n    row: {\r\n        ONE: 'One',\r\n        FEW: 'Few',\r\n        MORE: 'More',\r\n        MANY: 'Many'\r\n    },\r\n    tileWidth: {\r\n        SMALL: 'Small',\r\n        MEDIUM: 'Medium',\r\n        WIDE: 'Wide',\r\n        WIDER: 'Wider',\r\n        MAX: 'Max'\r\n    },\r\n\r\n    tileHeight: {\r\n        DEFAULT: '',\r\n        TALL: 'Tall',\r\n        TOWER: 'Tower',\r\n        SKYSCRAPER: 'Skyscraper'\r\n    },\r\n\r\n    waitForLayout: 0,\r\n\r\n    setHeaderPadding: function (noRebuild) {\r\n        ['nepSideCollapsed', 'nepSideExpanded', 'nepSideMenu', 'nepSideMenuCollapsed', 'nepSideMenuExpanded'].forEach(function (c) {\r\n            topMenu.removeStyleClass(c);\r\n        });\r\n\r\n        sap.n.Launchpad.setLaunchpadContentWidth();\r\n\r\n        if (!noRebuild && sap.n.Launchpad.currLayoutContent.shellContentWidth !== 'Full' && sap.n.Launchpad.currLayoutContent.headerContentWidth) {\r\n            let menu = launchpadContentMenu.getWidth();\r\n            let navBar = launchpadContentNavigator.getWidth();\r\n\r\n            if (menu === '300px' && navBar === '68px') topMenu.addStyleClass('nepSideMenuCollapsed');\r\n            else if (menu === '300px' && navBar === '300px') topMenu.addStyleClass('nepSideMenuExpanded');\r\n            else if (menu === '300px') topMenu.addStyleClass('nepSideMenu');\r\n            else if (navBar === '68px') topMenu.addStyleClass('nepSideCollapsed');\r\n            else if (navBar === '300px') topMenu.addStyleClass('nepSideExpanded');\r\n        }\r\n    },\r\n};\r\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"702d07ac-8188-45b1-e273-0658e52a7212","fieldName":"sap.n.Planet9","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":571,"fieldType":"neptune.Script","script":"sap.n.Planet9 = {\n    function: function (opts) {\n        let { id, query, method } = opts;\n        let server = opts.url || AppCache.Url;\n\n        let q = '';\n        if (query) {\n            let params = AppCache.isMobile ? `${query}&isMobile=true` : query;\n            q = `?${encodeURIComponent(params)}`;\n        } else {\n            q = AppCache.isMobile ? '?isMobile=true' : '';\n        }\n\n        // Public\n        let basePath = '/api/functions/';\n        if (AppCache.isPublic) {\n            basePath = '/public/functions/launchpad';\n            id = '';\n        }\n\n        let url = `${server}${basePath}${id}${q}`;\n        if (method) {\n            url = `${server}${basePath}${id}/${method}${q}`;\n        }\n\n        jsonRequest({\n            url,\n            data: opts.data ? JSON.stringify(opts.data) : {},\n            headers: opts.headers || {},\n            xhrFields: {\n                withCredentials: true\n            },\n            success: function (data) {\n                if (opts.success) opts.success(data);\n            },\n            error: function (result, _status) {\n                if (opts.error) opts.error(result);\n            }\n        });\n    },\n\n    arrayMove: function (arr, fromPos, toPos) {\n        while (fromPos < 0) {\n            fromPos += arr.length;\n        }\n        while (toPos < 0) {\n            toPos += arr.length;\n        }\n        if (toPos >= arr.length) {\n            let k = toPos - arr.length + 1;\n            while (k--) {\n                arr.push(undefined);\n            }\n        }\n        arr.splice(toPos, 0, arr.splice(fromPos, 1)[0]);\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"b1e33421-6ddf-4c51-d0a7-cc597d04a1e0","fieldName":"sap.n.Push","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":572,"fieldType":"neptune.Script","script":"sap.n.Push = {\n    messsaging: null,\n    firebaseSetup: function () {\n        cordova.plugins.firebase.messaging.requestPermission().then(function () {\n            appCacheLog('FireBase Messaging: Push messaging is allowed');\n\n            cordova.plugins.firebase.messaging.getToken().then(function (token) {\n                appCacheLog(`FireBase Messaging: Got token ${token}`);\n\n                let system = sap.n.Launchpad.deviceType();\n                let deviceData = {\n                    token: token,\n                    launchpadId: AppCache.launchpadID,\n                    browserName: sap.ui.Device.browser.name,\n                    browserVersion: sap.ui.Device.browser.version,\n                    osName: sap.ui.Device.os.name,\n                    osVersion: sap.ui.Device.os.version,\n                    system: system\n                };\n\n                // Enhancement\n                if (sap.n.Enhancement.PushRegistration) {\n                    try {\n                        sap.n.Enhancement.PushRegistration(deviceData);\n                    } catch (e) {\n                        appCacheError('Enhancement PushRegistration ' + e);\n                    }\n                }\n\n                jsonRequest({\n                    url: AppCache.Url + '/messaging/register',\n                    data: JSON.stringify(deviceData),\n                    success: function (data) {\n                        localStorage.setItem('pushRegistered', true);\n                    },\n                    error: function (result, status) {\n                        localStorage.setItem('pushRegistered', false);\n                        if (result.responseJSON && result.responseJSON.status) {\n                            sap.m.MessageToast.show(result.responseJSON.status);\n                        }\n                    }\n                });\n            });\n        });\n\n        cordova.plugins.firebase.messaging.onMessage(function (payload) {\n            // Enhancement\n            if (sap.n.Enhancement.PushNotification) {\n                try {\n                    sap.n.Enhancement.PushNotification(payload);\n                } catch (e) {\n                    appCacheError('Enhancement PushNotification ' + e);\n                }\n            }\n        });\n\n    },\n\n    setupPush: function () {\n        if (cordova.plugins.firebase && cordova.plugins.firebase.messaging) {\n            sap.n.Push.firebaseSetup();\n            return;\n        }\n\n        if (typeof PushNotification === 'undefined') {\n            console.log('PushNotification plugin not installed');\n            return;\n        }\n\n        let push = PushNotification.init({\n            'android': {\n                'senderID': AppCache.pushSenderId\n            },\n            'browser': {},\n            'ios': {\n                'sound': true,\n                'vibration': true,\n                'badge': true\n            },\n            'windows': {}\n        });\n\n        push.on('registration', function (data) {\n            let system = sap.n.Launchpad.deviceType();\n            let deviceData = {\n                token: data.registrationId,\n                launchpadId: AppCache.launchpadID,\n                browserName: sap.ui.Device.browser.name,\n                browserVersion: sap.ui.Device.browser.version,\n                osName: sap.ui.Device.os.name,\n                osVersion: sap.ui.Device.os.version,\n                system: system\n            };\n\n            // Enhancement\n            if (sap.n.Enhancement.PushRegistration) {\n                try {\n                    sap.n.Enhancement.PushRegistration(deviceData);\n                } catch (e) {\n                    appCacheError('Enhancement PushRegistration ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/messaging/register',\n                data: JSON.stringify(deviceData),\n                success: function (data) {\n                    localStorage.setItem('pushRegistered', true);\n                },\n                error: function (result, status) {\n                    localStorage.setItem('pushRegistered', false);\n                    if (result.responseJSON && result.responseJSON.status) {\n                        sap.m.MessageToast.show(result.responseJSON.status);\n                    }\n                }\n            });\n        });\n\n        push.on('error', function (e) {\n            console.error('push error = ' + e.message);\n        });\n\n        push.on('notification', function (data) {\n            // Enhancement\n            if (sap.n.Enhancement.PushNotification) {\n                try {\n                    sap.n.Enhancement.PushNotification(data);\n                } catch (e) {\n                    appCacheError('Enhancement PushNotification ' + e);\n                }\n            }\n\n            if (sap.ui.Device.os.name === 'iOS') {\n                push.setApplicationIconBadgeNumber(function () {\n                    console.log('Badge: success');\n                }, function () {\n                    console.log('Badge: error');\n                }, data.count);\n            }\n        });\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2b9e0f95-8f49-4575-9186-c16c3b16b476","fieldName":"sap.n.Shell","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":573,"fieldType":"neptune.Script","script":"sap.n.getObjectByID = function (id) {\n    let object;\n    object = sap.ui.getCore().byId(sap.n.currentView.createId(id));\n    return object;\n}\n\nsap.n.Shell = {\n    openSidePanelApps: {},\n    sidepanelCloseEvents: {},\n    sidepanelHelpFunction: null,\n\n    // Event - attachInit\n    attachInit: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].init) sap.n.Apps[applid].init = new Array();\n\n        sap.n.Apps[applid].init.push(func);\n    },\n\n    attachBeforeSuspend: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeSuspend) sap.n.Apps[applid].beforeSuspend = new Array();\n\n        sap.n.Apps[applid].beforeSuspend.push(func);\n    },\n\n    attachBeforeMenuNavigation: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeMenuNavigation) sap.n.Apps[applid].beforeMenuNavigation = new Array();\n\n        if (!sap.n.Apps[applid].beforeMenuNavigation.length) sap.n.Apps[applid].beforeMenuNavigation.push(func);\n    },\n\n    // Event - attachBeforeDisplay\n    attachBeforeDisplay: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeDisplay) sap.n.Apps[applid].beforeDisplay = new Array();\n\n        if (!sap.n.Apps[applid].beforeDisplay.length) sap.n.Apps[applid].beforeDisplay.push(func);\n    },\n\n    // Event - beforeClose\n    attachBeforeClose: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeClose) sap.n.Apps[applid].beforeClose = new Array();\n\n        if (!sap.n.Apps[applid].beforeClose.length) sap.n.Apps[applid].beforeClose.push(func);\n    },\n\n    // Event - attachOnNavigation\n    attachOnNavigation: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].onNavigation) sap.n.Apps[applid].onNavigation = new Array();\n\n        if (!sap.n.Apps[applid].onNavigation.length) sap.n.Apps[applid].onNavigation.push(func);\n    },\n\n    // Event - beforeBack\n    attachBeforeBack: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeBack) sap.n.Apps[applid].beforeBack = new Array();\n\n        if (!sap.n.Apps[applid].beforeBack.length) sap.n.Apps[applid].beforeBack.push(func);\n    },\n\n    // Event - beforeHome\n    attachBeforeHome: function (func) {\n        let applid = AppCache.CurrentApp.replace(/\\//g, '').toUpperCase();\n\n        if (AppCache.LoadOptions.appGUID) applid = AppCache.LoadOptions.appGUID;\n        if (!applid) return;\n        if (!sap.n.Apps[applid]) sap.n.Apps[applid] = {};\n        if (!sap.n.Apps[applid].beforeHome) sap.n.Apps[applid].beforeHome = new Array();\n\n        if (!sap.n.Apps[applid].beforeHome.length) sap.n.Apps[applid].beforeHome.push(func);\n    },\n\n    getTabKey: function (tabApplid, tabTitle, options) {\n        if (tabApplid === 'cockpit_doc_reader') return 'cockpit_doc_reader';\n\n        if (tabTitle) {\n            return tabApplid + '|' + tabTitle;\n        }\n\n        if (options && options.startParams && options.startParams.settings && options.startParams.settings.data && options.startParams.settings.data.id) {\n            return options.startParams.settings.data.id;\n        }\n\n        return tabApplid;\n\n    },\n\n    loadSidepanel: function (tabApplid, tabTitle, options) {\n        if (!options) options = {};\n\n        AppCacheUserActionSidepanel.setVisible(true);\n        AppCachePageSideTab.setVisible(true);\n\n        // Open Sidepanel\n        sap.n.Launchpad.sidepanelOpen(options);\n\n        // Check for existing\n        let tabCreated = false;\n        let tabKey = sap.n.Shell.getTabKey(tabApplid, tabTitle, options);\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.getKey() === tabKey) {\n                AppCachePageSideTab.setSelectedItem(tab);\n                tabCreated = true;\n\n                if (tabKey === 'cockpit_doc_reader') {\n                    tab.setName(tabTitle);\n                    if (sap.n.Shell.sidepanelHelpFunction) sap.n.Shell.sidepanelHelpFunction();\n                }\n            }\n        });\n\n        // Add onClose Event \n        if (options.onClose) sap.n.Shell.sidepanelCloseEvents[tabKey] = options.onClose;\n\n        // Stop if tab exits\n        if (tabCreated) return;\n\n        let oTabContainerItem = new sap.m.TabContainerItem({\n            key: tabKey,\n            modified: false,\n            name: tabTitle\n        });\n\n        if (options.icon && oTabContainerItem.setIcon) oTabContainerItem.setIcon(options.icon);\n        if (options.additionaltext && oTabContainerItem.setAdditionalText) oTabContainerItem.setAdditionalText(options.additionaltext);\n\n        AppCachePageSideTab.addItem(oTabContainerItem);\n        AppCachePageSideTab.setSelectedItem(oTabContainerItem);\n\n        // Mark Open From \n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.actionApplication) sap.n.Shell.openSidePanelApps[sap.n.Launchpad.currentTile.actionApplication] = true;\n\n        // Load Settings \n        options.parentObject = oTabContainerItem;\n\n        AppCache.Load(tabApplid, options);\n\n        // Trigger scrollTo\n        setTimeout(function () {\n            AppCachePageSideTab.setSelectedItem(oTabContainerItem);\n        }, 200);\n    },\n\n    closeSidepanelTab: function (tabKey) {\n        if (!tabKey) return;\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.getKey() === tabKey) tab.destroy();\n        });\n\n        if (AppCachePageSideTab.getItems().length === 0) {\n            sap.n.Launchpad.sidepanelClose();\n        }\n    },\n\n    closeAllSidepanelTabs: function () {\n        const tabs = AppCachePageSideTab.getItems();\n        if (tabs.length > 0) {\n            tabs.forEach(function (tab) {\n                tab.destroy();\n            });\n\n            sap.n.Launchpad.sidepanelClose();\n        }\n    },\n\n    setSidepanelText: function (name, additionalText) {\n        let tabId = AppCachePageSideTab.getSelectedItem();\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.sId === tabId) {\n                if (name) tab.setName(name);\n                if (additionalText) tab.setAdditionalText(additionalText);\n\n                let app = tab.getKey().split('|')[0];\n                tab.setKey(app + '|' + name);\n            }\n        });\n    },\n\n    getSidepanelText: function () {\n        let tabId = AppCachePageSideTab.getSelectedItem();\n        let data = {};\n\n        AppCachePageSideTab.getItems().forEach(function (tab) {\n            if (tab.sId === tabId) {\n                data.name = tab.getName();\n                data.additionalText = tab.getAdditionalText();\n            }\n        });\n\n        return data;\n    },\n\n    closeSidepanel: function (tabKey) {\n        sap.n.Launchpad.sidepanelClose();\n\n        // Destroy when closing Tile \n        if (tabKey) {\n            AppCachePageSideTab.getItems().forEach(function (tab) {\n                if (tab.getKey() === tabKey) tab.destroy();\n            });\n        }\n    },\n\n    openSidepanel: function (tabKey) {\n        sap.n.Launchpad.sidepanelOpen();\n    },\n\n    showGuided: function (data) {\n        let object = sap.ui.getCore().byId(sap.n.currentView.createId(data.FIELD_NAME));\n        popGuided.openBy(object)\n        popGuided.setTitle(data.STEP_TITLE);\n        docGuided.setText(data.STEP_DOC);\n    },\n\n    // Close Tile\n    closeTile: function (tileData) {\n        if (typeof tileData !== 'object' || !tileData.id) {\n            return;\n        }\n\n        location.hash = '';\n\n        // Destroy current App or URL\n        if (tileData.actionURL || tileData.actionWebApp) {\n            const iframe = querySelector(`#iFrame${tileData.id}`)\n            iframe.parentNode.removeChild(iframe);\n\n            // Navigate Back\n            if (sap.n.Launchpad.currentTile.id === tileData.id) {\n                AppCacheNav.back();\n                sap.n.Launchpad.currentTile = {};\n\n                if (tileData.sidepanelApp) sap.n.Shell.closeSidepanel(tileData.sidepanelApp);\n                if (sap.n.Launchpad.isMenuPage() && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n\n                AppCacheShellHelp.setVisible(false);\n                sap.n.Launchpad.setHideHeader(false);\n            }\n        } else {\n            // Custom beforeClose\n            let preventDefault = false;\n            let viewID;\n\n            if (sap.n.Apps[tileData.id] && sap.n.Apps[tileData.id].beforeClose) {\n                sap.n.Apps[tileData.id].beforeClose.forEach(function (eventFn) {\n                    let oEvent = new sap.ui.base.Event('beforeClose', new sap.ui.base.EventProvider());\n                    eventFn(oEvent);\n\n                    if (oEvent.bPreventDefault) preventDefault = true;\n                    oEvent = null;\n                });\n            }\n\n            // Default behaviour was avoided\n            if (preventDefault) return;\n\n            // Navigate Back\n            if (sap.n.Launchpad.currentTile.id === tileData.id) {\n                AppCacheNav.back();\n\n                if (AppCache.StartApp.trim().length > 0) {\n                    return;\n                }\n\n                sap.n.Launchpad.currentTile = {};\n\n                // Delete SidepanelApps\n                if (tileData.sidepanelApp) {\n                    sap.n.Shell.closeSidepanel(tileData.sidepanelApp);\n                    if (tileData.actionApplication) delete sap.n.Shell.openSidePanelApps[tileData.actionApplication];\n                }\n\n                if (sap.n.Launchpad.isMenuPage() && !sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n\n                AppCacheShellHelp.setVisible(false);\n                sap.n.Launchpad.setHideHeader(false);\n\n\n                // Fullscreen Handling\n                let cat = AppCacheNav.getCurrentPage().sId;\n                cat = cat.split('page')[1];\n\n                let dataCat = ModelData.FindFirst(AppCacheCategory, 'id', cat);\n\n                if (dataCat) {\n                    sap.n.Launchpad.MarkTopMenu(dataCat.id);\n                    AppCacheShellUI.setAppWidthLimited(!dataCat.enableFullScreen);\n                } else {\n                    let dataCatChild = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\n                    if (!dataCatChild) {\n                        AppCache.Back();\n                    } else {\n                        sap.n.Launchpad.handleAppTitle(dataCatChild.title)\n                    }\n                }\n            }\n\n            // Clear View\n            if (AppCache.View[tileData.id]) {\n                viewID = AppCache.View[tileData.id].sId;\n                AppCache.View[tileData.id].destroy();\n                AppCache.View[tileData.id] = null;\n                delete AppCache.View[tileData.id];\n            }\n\n            // Clear All Events\n            delete sap.n.Apps[tileData.id];\n\n            if (viewID) sap.n.Shell.clearObjects(viewID);\n        }\n\n        // Close Active Button\n        const containerOpenApp = sap.ui.getCore().byId(`${nepPrefix()}OpenAppContainer${tileData.id}`);\n        if (containerOpenApp) {\n            openApps.removeItem(containerOpenApp);\n            containerOpenApp.destroy();\n            if (openApps.getItems().length <= 0) openAppMaster.setVisible(false);\n        }\n\n        // Destroy Buttons\n        const btnByTileId = sap.ui.getCore().byId(`but${tileData.id}`);\n        if (btnByTileId) btnByTileId.destroy();\n\n        const btnTopByTileId = sap.ui.getCore().byId(`butTop${tileData.id}`);\n        if (btnTopByTileId) btnTopByTileId.destroy();\n\n        // SideBar \n        const items = blockRunningRow.getContent();\n        if (!items.length) closeContentNavigator();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild[tileData.id] && AppCache.ViewChild[tileData.id].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n        delete AppCache.ViewChild[tileData.id];\n\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n        sap.n.Layout.setHeaderPadding();\n    },\n\n    closeAllTiles: function () {\n        // Close all Tiles - Clear memory\n        for (const k in AppCache.View) {\n            let tile = ModelData.FindFirst(AppCacheTiles, 'GUID', k);\n            if (tile && tile.GUID) sap.n.Shell.closeTile(tile);\n        }\n\n        // Close AppCache.Load Apps\n        for (const k in sap.n.Apps) {\n            if (AppCache.View[k]) {\n                AppCache.View[k].destroy();\n                AppCache.View[k] = null;\n                delete sap.n.Apps[k];\n            }\n        }\n\n        // Clear Pages\n        AppCacheNav.getPages().forEach(function (data) {\n            if (\n                ![\n                    'AppCachePageMenu', 'AppCachePageStore', 'AppCache_boxURL',\n                    'AppCache_boxLogon', 'AppCache_boxLogonCustom', 'AppCache_boxPassword',\n                    'AppCache_boxPasscode', 'AppCache_boxPasscodeEntry', 'AppCache_boxUsers'\n                ].includes(data.sId)\n            ) {\n                AppCacheNav.removePage(data.sId);\n                data.destroy();\n                data = null;\n            }\n        });\n\n        // Clear Views\n        AppCache.View = [];\n\n        // Extra memory cleanup\n        sap.n.Shell.clearAllObjects();\n\n        sap.n.Shell.closeSidepanel();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild['undefined'] && AppCache.ViewChild['undefined'].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n\n        delete AppCache.ViewChild['undefined'];\n\n        blockRunningRow.destroyContent();\n        AppCacheAppButton.removeAllItems();\n        openApps.removeAllItems();\n\n        AppCache.Home();\n    },\n\n    clearObjects: function (view) {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (id[0] === view) {\n                if (data.getDomRef()) data.getDomRef().remove();\n                data.destroy();\n                data = null;\n            }\n        });\n    },\n\n    listPattern: function (object) {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            if (!includesJSView(data.getId()) && data.getId().indexOf(object) > -1) console.log(data.getId());\n        });\n    },\n\n    clearAllObjects: function () {\n        // JS Views \n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n\n            if (includesJSView(id[0])) {\n                if (data.getDomRef()) data.getDomRef().remove();\n\n                try {\n                    if (typeof data.destroy === 'function') data.destroy();\n                } catch (e) {\n\n                }\n\n                data = null;\n            }\n        });\n\n        // Objects created by javascript\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            if (!includesJSView(data.getId()) && hasNepPrefix(data.getId())) {\n                if (data.getDomRef()) data.getDomRef().remove();\n\n                try {\n                    if (typeof data.destroy === 'function') data.destroy();\n                } catch (e) { }\n\n                data = null;\n            }\n        });\n    },\n\n    viewExists: function (view) {\n        let found = false;\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (id[0] === view) found = true;\n        });\n        return found;\n    },\n\n    listObjects: function () {\n        sap.ui.getCore().byFieldGroupId('').forEach(function (data) {\n            let id = data.getId().split('--');\n            if (includesJSView(id[0])) console.log(data.getId());\n        });\n    },\n\n    openUrl: function (url, options) {\n        // Load Defaults\n        options = options || {};\n        LoadOptions = {};\n        LoadOptions.dialogHeight = options.dialogHeight || '90%';\n        LoadOptions.dialogWidth = options.dialogWidth || '1200px';\n        LoadOptions.dialogTitle = options.dialogTitle || '';\n        LoadOptions.dialogModal = options.dialogModal || false;\n        LoadOptions.webAppData = options.webAppData || null;\n\n        let contHeight = LoadOptions.dialogHeight;\n        let contWidth = LoadOptions.dialogWidth;\n        let diaTitle = LoadOptions.dialogTitle;\n        let screenWidth = window.innerWidth;\n\n        // Less Than 1200px\n        if (screenWidth < 1200) contWidth = (screenWidth * 0.8) + 'px';\n\n        // On Mobile\n        if (!sap.n.Launchpad.isDesktop()) {\n            contWidth = '100%';\n            contHeight = '100%';\n        }\n\n        // Create Dialog\n        let dia = new sap.n.Dialog({\n            contentWidth: contWidth,\n            contentHeight: contHeight,\n            type: 'Message',\n            resizable: !sap.n.Launchpad.isPhone(),\n            draggable: !sap.n.Launchpad.isPhone(),\n            stretchOnPhone: true,\n            title: diaTitle,\n            contentIsURL: true,\n            afterClose: function (oEvent) {\n                // Delete From Array\n                for (let i = 0; i < AppCache.Dialogs.length; i++) {\n                    if (AppCache.Dialogs[i] === this.getId()) {\n                        AppCache.Dialogs.splice(i, 1);\n                        break;\n                    }\n                }\n\n                if (AppCache.Dialogs.length === 0) {\n                    AppCacheShellDialog.setVisible(false);\n                }\n\n                this.destroyContent();\n                dia = null;\n            }\n        });\n\n        // Add Dialog to Array\n        AppCache.Dialogs.push(dia.getId());\n\n        if (LoadOptions.webAppData) {\n            let diaID = ModelData.genID();\n            dia.addContent(new sap.ui.core.HTML(nepId(), {\n                content: `<iframe id='diaFrame${diaID}' frameborder='0' height='100%' width='100%'></iframe>`,\n                visible: true,\n                sanitizeContent: false,\n                preferDOM: false,\n                afterRendering: function (oEvent) {\n                    let frame = document.getElementById('diaFrame' + diaID);\n                    frame.setAttribute('srcdoc', LoadOptions.webAppData);\n                }\n            }));\n        } else {\n            dia.addContent(new sap.ui.core.HTML(nepId(), {\n                content: `<iframe frameborder='0' height='100%' width='100%' src='${url}'></iframe>`,\n                visible: true,\n                sanitizeContent: false,\n                preferDOM: false\n            }));\n        }\n\n        dia.open();\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"ea309ade-922f-47e9-bae2-031b1f42b6f8","fieldName":"sap.n.Style","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":574,"fieldType":"neptune.Script","script":"sap.n.Style = {\n    getLayoutCss: function (config) {\n        let layout = config.layout;\n\n        css = '<style>';\n        // Top Menu\n        if (layout.TOP_BACK_COLOR) {\n            css += `\n                .nepTopMenu {\n                    background: ${layout.TOP_BACK_COLOR};\n                }\n                .nepDialogWithObjHeader .sapContrastPlus.sapMOHR.sapMOHRBgTranslucent,\n                .sapContrastPlus .nepDialogWithObjHeader .sapMOHR.sapMOHRBgTranslucent,\n                .nepDialogSubObjHeader {\n                    background: ${layout.TOP_BACK_COLOR};\n                }\n                html.sap-desktop\n                    .nepDialogSubObjHeader\n                    .sapContrastPlus\n                    .sapMIBar.sapMFooter-CTX,\n                html.sap-desktop\n                    .nepDialogSubObjHeader\n                    .sapContrastPlus.sapMIBar.sapMFooter-CTX {\n                    border-top-color: ${layout.TOP_BACK_COLOR};\n                }\n                .nepDialogWithObjHeader.sapMDialog.sapMPopup-CTX > header .sapMHeader-CTX,\n                .nepDialogWithObjHeader.sapMDialog.sapMPopup-CTX > header .sapMSubHeader-CTX,\n                .nepDialogWithObjHeader .sapMITH {\n                    background-color: ${layout.TOP_BACK_COLOR};\n                }\n                .nepPopover.sapMDialog.sapMPopup-CTX > header .sapMHeader-CTX,\n                .nepPopover.sapMDialog.sapMPopup-CTX > header .sapMSubHeader-CTX,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnTransparent.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled):hover > .sapMBtnTransparent.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnGhost.sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled):hover > .sapMBtnGhost.sapMBtnActive {\n                    background-color: ${layout.TOP_BACK_COLOR};\n                    border-color: ${layout.TOP_BACK_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_ACT_COLOR) {\n            /**\n             * 1. Active Top Menu\n             * 2. Hover normal Top Menu\n             * 3. Sub Menu\n             */\n            css += `\n                .nepDialogWithObjHeader .sapMITBSelected>.sapMITBContentArrow,\n                .nepTopMenuActive.sapMBtn, \n                .nepTopMenuBtn.sapMBtn:hover {\n                    border-bottom: 4px solid ${layout.TOP_ACT_COLOR};\n                }\n                .nepSubMenu.sapMPopover,\n                .nepOverflowMenu.nepPopover.sapMPopover {\n                    border-top: 4px solid ${layout.TOP_ACT_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_BOR_COLOR) {\n            css += `\n                .nepTopMenu {\n                    border-bottom: 1px solid ${layout.TOP_BOR_COLOR};\n                }\n                .nepDialogWithObjHeader .sapMITH {\n                    border-bottom: 2px solid ${layout.TOP_BOR_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_TXT_COLOR) {\n            css += `\n                .nepTopMenu :not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n                .nepTopMenu span.sapMBtnInner,\n                .nepDialogWithObjHeader\n                    .sapMITBTextOnly\n                    .sapMITBFilterDefault.sapMITBSelected\n                    > .sapMITBText,\n                .nepDialogWithObjHeader .sapMITBTextOnly .sapMITBFilterDefault > .sapMITBText {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepTopMenu .sapMTBSeparator {\n                    background: ${layout.TOP_TXT_COLOR};\n                }\n                .nepDialogWithObjHeader .sapMOHRTitle h1,\n                .nepDialogWithObjHeader .sapMOHRIntro .sapMText,\n                .nepDialogWithObjHeader .sapMOHRIcon .sapUiIcon,\n                .nepDialogWithObjHeader .sapMBtnIcon,\n                .nepDialogSubObjHeader .sapMText {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepDialogWithObjHeader\n                    :not(.sapMBtnDisabled)\n                    > .sapMBtnInner.sapMBtnActive\n                    .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n                .nepPopover .sapMBtnIcon {\n                    color: ${layout.TOP_TXT_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n\n        if (layout.TOP_MENU_COLOR) {\n            css += `\n                .nepListMenu .sapMSLITitleOnly,\n                .nepListMenu .sapMSLIImgIcon {\n                    color: ${layout.TOP_MENU_COLOR};\n                }\n                .nepListSetting .sapMLIBHoverable:hover {\n                    background: transparent;\n                    border: 1px solid ${layout.TOP_MENU_COLOR};\n                }\n                .nepUserActionText.sapMText {\n                    color: ${layout.TOP_MENU_COLOR};\n                }\n            `;\n        }\n        \n        if (layout.TOP_HOV_COLOR) {\n            css += `\n                .nepTopMenu span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtnCustomIcon:hover,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepTopMenu .nepTopMenuActiveHover span.sapMBtnInner,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMIBar-CTX .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable {\n                    color: ${layout.TOP_HOV_COLOR};\n                }\n            `;\n        }\n\n        if (layout.TOP_HOV_BACK) {\n            css += `\n                .nepTopMenu span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtnCustomIcon:hover,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .nepTopMenuActive span.sapMBtnInner:hover,\n                .nepPopover .sapMIBar-CTX.sapMHeader-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepPopover .sapMIBar-CTX.sapMFooter-CTX :not(.sapMBtnDisabled) > .sapMBtnActive,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive .sapMBtnIcon,\n                .nepTopMenu .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMIBar-CTX .sapMBtn:hover > .sapMBtnTransparent.sapMBtnHoverable:not(.sapMBtnActive):not(.sapMToggleBtnPressed),\n                .nepTopMenu .sapMBtn:hover:not(.sapMBtnDisabled) > .sapMBtnHoverable.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu *.sapMBtn:hover:not(.sapMBtnDisabled) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed) > .sapMBtnIcon,\n                .nepTopMenu :not(.sapMBtnDisabled):not(.sapMSBActive) > span.sapMBtnInner.sapMBtnTransparent:not(.sapMBtnActive):not(.sapMToggleBtnPressed):hover > .sapMBtnIcon,\n                .nepTopMenu .nepTopMenuActiveHover span.sapMBtnInner {\n                    background-color: ${layout.TOP_HOV_BACK};\n                    border-color: ${layout.TOP_HOV_BACK};\n                }\n            `;\n        }\n        \n        if (layout.TOP_NOTIF_BACK) {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner,\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable {\n                    background-color: ${layout.TOP_NOTIF_BACK};\n                    border-color: ${layout.TOP_NOTIF_BACK};\n                }\n            `;\n        }\n\n        if (layout.TOP_NOTIF_COLOR) {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner:hover {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n                    color: ${layout.TOP_NOTIF_COLOR};\n                }\n            `;\n        } else {\n            css += `\n                .nepTopMenu .nepNotificationButton span.sapMBtnInner {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n                .nepTopMenu .nepNotificationButton.sapMBtn:hover > .sapMBtnHoverable,\n                .nepTopMenu :not(.sapMBtnDisabled) > .sapMBtnInner.sapMBtnActive {\n                    color: ${layout.TOP_TXT_COLOR};\n                }\n            `;\n        }\n\n        // Left Sidebar\n        if (layout.SIDE_BACK_COLOR) css += `.nepNavBar { background: ${layout.SIDE_BACK_COLOR}; }`;\n        if (layout.SIDE_BOR_COLOR) css += `.nepNavBarContent { border-right: 1px solid ${layout.SIDE_BOR_COLOR}; }`;\n        if (layout.SIDE_ACT_COLOR) css += `.nepIconActive { border-left: 4px solid ${layout.SIDE_ACT_COLOR} !important; }`;\n        if (layout.SIDE_ACT_COLOR) css += `\n            html[dir=\"rtl\"] .nepIconActive {\n                border-left: none !important;\n                border-right: 4px solid ${layout.SIDE_ACT_COLOR} !important;\n            }\n        `;\n\n        // Shell\n        if (layout.SHELL_BACK_COLOR) css += `.nepShell { background: ${layout.SHELL_BACK_COLOR} !important; }`;\n\n        // Page\n        if (layout.PAGE_BACK_COLOR) css += `.nepPage { background: ${layout.PAGE_BACK_COLOR}; }`;\n        else css += '.nepPage { background: #fff; }';\n\n        if (layout.PAGE_BACK_IMAGE) {\n            let imageUrl = mediaUrl + layout.PAGE_BACK_IMAGE;\n            if (isMobile || isHCP) imageUrl = imageData[layout.PAGE_BACK_IMAGE] || imageUrl;\n\n            css += `\n                nepShell .sapMShellBG.sapUiGlobalBackgroundImage {\n                    background: inherit;\n                    background-image: url('${imageUrl}');\n                    background-repeat: no-repeat;\n                    background-size: cover;\n                }\n            `;\n        } else {\n            css += '.nepShell .sapMShellBG.sapUiGlobalBackgroundImage { background: inherit; background-image: none; }';\n        }\n\n        // Tile Group\n        if (layout.HEAD_COLOR) css += `.nepCatPanel { background-color: ${layout.HEAD_COLOR}; }`;\n\n        let borderWidth = layout.HEAD_BORDER_WDT || '3px';\n        if (layout.HEAD_BORDER_CLR) css += `.nepCatPanel { border-bottom: ${borderWidth} solid ${layout.HEAD_BORDER_CLR}; }`;\n\n        if (layout.TITLE_COLOR) {\n            css += `\n                .nepCatTitle.sapMTitle {\n                    color: ${layout.TITLE_COLOR};\n                }\n                .nepCatFavBtn:not(.sapMBtnDisabled) .sapMBtnTransparent > .sapMBtnIcon,\n                .nepCatFavBtn:not(.sapMBtnDisabled) .sapMBtnGhost > .sapMBtnIcon {\n                    color: ${layout.TITLE_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n        \n        if (layout.SUBTITLE_COLOR) css += `.nepCatSubTitle.sapMTitle { color: ${layout.SUBTITLE_COLOR}; }`;\n\n        // Tiles\n        if (layout.TILE_BACK_COLOR) css += `.nepTile { background-color: ${layout.TILE_BACK_COLOR}; }`;\n\n        // Sub Menu Background Color\n        if (layout.NAV_BACK_COLOR) {\n            css += `\n                .nepOverflowMenu.sapMPopover .sapMPopoverCont {\n                    background-color: ${layout.NAV_BACK_COLOR};\n                }\n                .nepOverflowMenu .sapMLIB {\n                    background: transparent;\n                }\n            `;\n        }\n\n        // Sub Menu Text Color\n        if (layout.NAV_TXT_COLOR) {\n            css += `\n                .nepPopover .nepOpenAppsBtn .sapMBtnIcon,\n                .nepOpenAppsBtn .sapMBtnInner,\n                .nepOverflowMenu .nepOpenAppsBtn .sapMBtnInner,\n                .nepOpenAppsClose.sapUiIcon,\n                .nepOverflowMenu .sapMBtnInner,\n                .nepOverflowMenu .sapMSTIIcon,\n                .nepOverflowMenu .nepTreeCategory .sapMTreeItemBaseExpander,\n                .nepOverflowMenu .sapMTreeItemBase {\n                    color: ${layout.NAV_TXT_COLOR};\n                    text-shadow: none;\n                }\n            `;\n        }\n\n        // Sub Menu Text Hover Color\n        if (layout.NAV_HOV_COLOR) css += `.nepOverflowMenu .sapMBtn:hover > .sapMBtnHoverable { color: ${layout.NAV_HOV_COLOR}; }`;\n\n        // Tile Button\n        css += sap.nep.Style.getTileButtonCss({ layout });\n\n        // Scrollbar\n        if (layout.SCROLL_COLOR) css += `\n            html.sap-desktop ::-webkit-scrollbar-thumb {\n                background-color: ${layout.SCROLL_COLOR};\n            }\n            html.sap-desktop ::-webkit-scrollbar-thumb:hover {\n                background-color: ${layout.SCROLL_COLOR};\n            }\n\n        `;\n\n        if (layout.SCROLL_WIDTH) css += `\n            html.sap-desktop ::-webkit-scrollbar {\n                width: ${layout.SCROLL_WIDTH} !important;\n                height: ${layout.SCROLL_WIDTH} !important;\n            }\n        `;\n\n        // Mobile\n        if (layout.MOB_TITLE_COL) css += `.nepMobileTitle.sapMTitle { color: ${layout.MOB_TITLE_COL}; text-shadow: none; }`;\n        if (layout.MOB_LABEL_COL) css += `.nepMobileLabel { color: ${layout.MOB_LABEL_COL}; text-shadow: none; }`;\n        if (layout.MOB_BUT_COL) css += `.nepMobileButton .sapMBtnInner { color: ${layout.MOB_BUT_COL} !important; text-shadow: none !important; }`;\n        if (layout.MOB_BUT_BACK) {\n            css += `\n                .nepMobileButton .sapMBtnInner {\n                    background: ${layout.MOB_BUT_BACK} !important;\n                    border-color: ${layout.MOB_BUT_BACK} !important;\n                }\n                .numPad .sapMBtnInner {\n                    background: ${layout.MOB_BUT_BACK};\n                }\n                #boxNumpadPanel .sapMCbBg {\n                    background: ${layout.MOB_BUT_BACK};\n                    opacity: 0.325;\n                }\n                #boxNumpadPanel .sapMCbBg.sapMCbMarkChecked {\n                    background: ${layout.MOB_BUT_BACK};\n                    opacity: 1;\n                }\n            `;\n        }\n\n        // Custom CSS\n        if (layout.CUSTOM_CSS) css += layout.CUSTOM_CSS.replace(/\\n|\\r\\n|\\r/g, '');\n        css += '</style>';\n\n        return { css };\n    },\n\n    getTileButtonCss: function (config) {\n        return '';\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"2b08c61a-a00f-4ce4-dec2-8cb0c7a169e3","fieldName":"sap.n.Util","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":575,"fieldType":"neptune.Script","script":"sap.n.Utils = {\n    message: function (config) {\n        let title = config.title || 'Message';\n        let intro = config.intro || '';\n        let text1 = config.text1 || '';\n        let text2 = config.text2 || '';\n        let text3 = config.text3 || '';\n        let icon = config.icon || '';\n\n        objHeaderMessage.setTitle(title);\n        objHeaderMessage.setIntro(intro);\n        txtMessage1.setText(text1);\n        txtMessage2.setText(text2);\n        txtMessage3.setText(text3);\n        acceptMessage.setText(config.acceptText);\n        declineMessage.setText(config.declineText);\n\n        txtMessage1.setVisible(!!text1);\n        txtMessage2.setVisible(!!text2);\n        txtMessage3.setVisible(!!text3);\n\n        if (config.acceptText) {\n            diaMessage.setBeginButton(acceptMessage);\n        }\n        \n        if (config.declineText) {\n            diaMessage.setEndButton(declineMessage);\n        }\n\n        switch (config.state) {\n            case 'Error':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/exclamation-circle');\n                objHeaderMessage.addStyleClass('nepStateError');\n                break;\n\n            case 'Warning':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/exclamation-circle');\n                objHeaderMessage.addStyleClass('nepStateWarning');\n                break;\n\n            case 'Success':\n                objHeaderMessage.setIcon('sap-icon://fa-solid/info-circle');\n                objHeaderMessage.addStyleClass('nepStateSuccess');\n                break;\n\n            default:\n                objHeaderMessage.setIcon('sap-icon://fa-solid/info-circle');\n                break;\n        }\n\n        if (icon) {\n            objHeaderMessage.setIcon(icon);\n        }\n\n        diaMessage.onClose = config.onClose || function () { };\n        diaMessage.onAccept = config.onAccept || function () { };\n        diaMessage.onDecline = config.onDecline || function () { };\n        diaMessage.open();\n    },\n\n    setLogonScreen: function () {\n        AppCache_butLogon.setVisible(true);\n        AppCache_inUsername.setVisible(false);\n        AppCache_inPassword.setVisible(false);\n        AppCache_inRememberMe.setVisible(false);\n        AppCache_inShowPass.setVisible(false);\n\n        AppCache_inUsername.setValueState();\n        AppCache_inPassword.setValueState();\n\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n        switch (logonData.type) {\n            case 'azure-bearer':\n            case 'openid-connect':\n            case 'saml':\n                AppCache_inUsername.setVisible(false);\n                AppCache_inPassword.setVisible(false);\n                break;\n\n            case 'ldap':\n                AppCache_inUsername.setVisible(true);\n                AppCache_inPassword.setVisible(true);\n                AppCache_inShowPass.setVisible(true);\n                break;\n\n            // Local \n            case 'local':\n            case 'sap':\n                if (!AppCache.enablePasscode) AppCache_inRememberMe.setVisible(true);\n                AppCache_inUsername.setVisible(true);\n                AppCache_inPassword.setVisible(true);\n                AppCache_inShowPass.setVisible(true);\n                break;\n        }\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"089c81af-0a55-4a1b-c874-bac012ced5a9","fieldName":"sap.n.Webauthn","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":576,"fieldType":"neptune.Script","script":"sap.n.Webauthn = {\r\n    register: function (userinfo) {\r\n        return new Promise(function (resolve) {\r\n            let challenge = new Uint8Array(16);\r\n            let userid = new Uint8Array(16);\r\n            let publicKeyCredentialOptions = {\r\n                challenge: window.crypto.getRandomValues(challenge),\r\n                rp: {\r\n                    name: 'Neptune DX Platform',\r\n                    id: location.hostname\r\n                },\r\n                user: {\r\n                    id: window.crypto.getRandomValues(userid),\r\n                    name: userinfo.username,\r\n                    displayName: userinfo.name,\r\n                },\r\n                pubKeyCredParams: [\r\n                    { 'type': 'public-key', 'alg': -7 },\r\n                    { 'type': 'public-key', 'alg': -35 },\r\n                    { 'type': 'public-key', 'alg': -36 },\r\n                    { 'type': 'public-key', 'alg': -257 },\r\n                    { 'type': 'public-key', 'alg': -258 },\r\n                    { 'type': 'public-key', 'alg': -259 },\r\n                    { 'type': 'public-key', 'alg': -37 },\r\n                    { 'type': 'public-key', 'alg': -38 },\r\n                    { 'type': 'public-key', 'alg': -39 },\r\n                    { 'type': 'public-key', 'alg': -8 }],\r\n                authenticatorSelection: {\r\n                    requireResidentKey: false,\r\n                    userVerification: 'discouraged',\r\n                },\r\n                transports: ['usb', 'ble', 'nfc'],\r\n                timeout: 60000,\r\n                attestation: 'none',\r\n                extensions: {\r\n                    auth: userinfo.auth\r\n                }\r\n            };\r\n\r\n            // Create User\r\n            navigator.credentials.create({\r\n                publicKey: publicKeyCredentialOptions\r\n            }).then(function (credential) {\r\n                let decodedAttestationObject = CBOR.decode(credential.response.attestationObject);\r\n                let { authData } = decodedAttestationObject;\r\n                let dataView = new DataView(new ArrayBuffer(2));\r\n                let idLenBytes = authData.slice(53, 55);\r\n\r\n                idLenBytes.forEach((value, index) => dataView.setUint8(index, value));\r\n                let credentialIdLength = dataView.getUint16();\r\n                let credentialId = authData.slice(55, 55 + credentialIdLength);\r\n\r\n                resolve(sap.n.Webauthn.bufferEncode(credentialId));\r\n\r\n            }).catch(function (e) {\r\n                appCacheLog(e);\r\n                resolve('ERROR');\r\n            });\r\n        });\r\n    },\r\n\r\n    login: function (userId) {\r\n        return new Promise(function (resolve) {\r\n            const challenge = new Uint8Array(16);\r\n            const publicKeyCredentialOptions = {\r\n                challenge: window.crypto.getRandomValues(challenge),\r\n                allowCredentials: [{\r\n                    id: sap.n.Webauthn.bufferDecode(userId),\r\n                    type: 'public-key',\r\n                }],\r\n                userVerification: 'discouraged',\r\n                rpId: location.hostname,\r\n                timeout: 60000\r\n            };\r\n\r\n            // Get User\r\n            navigator.credentials.get({\r\n                publicKey: publicKeyCredentialOptions\r\n            })\r\n            .then(resolve)\r\n            .catch(function (e) {\r\n                appCacheLog(e);\r\n                resolve(e);\r\n            });\r\n        });\r\n    },\r\n\r\n    string2buffer: function (str) {\r\n        return (new Uint8Array(str.length)).map(function (x, i) {\r\n            return str.charCodeAt(i)\r\n        });\r\n    },\r\n\r\n    bufferEncode: function (value) {\r\n        return sap.n.Webauthn.fromByteArray(value);\r\n    },\r\n\r\n    bufferDecode: function (value) {\r\n        return Uint8Array.from(atob(value), c => c.charCodeAt(0));\r\n    },\r\n\r\n    buffer2string: function (buf) {\r\n        let str = '';\r\n        if (!(buf.constructor === Uint8Array)) buf = new Uint8Array(buf);\r\n        buf.map(function (x) {\r\n            return str += String.fromCharCode(x)\r\n        });\r\n        return str;\r\n    },\r\n\r\n    fromByteArray: function (uint8) {\r\n        let lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/-';\r\n        let i;\r\n        let extraBytes = uint8.length % 3;\r\n        let output = '';\r\n        let temp, length;\r\n\r\n        function encode(num) {\r\n            return lookup.charAt(num);\r\n        }\r\n\r\n        function tripletToBase64(num) {\r\n            return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)\r\n        }\r\n\r\n        for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {\r\n            temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\r\n            output += tripletToBase64(temp)\r\n        }\r\n\r\n        switch (extraBytes) {\r\n            case 1:\r\n                temp = uint8[uint8.length - 1];\r\n                output += encode(temp >> 2);\r\n                output += encode((temp << 4) & 0x3F);\r\n                output += '==';\r\n                break;\r\n            case 2:\r\n                temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1]);\r\n                output += encode(temp >> 10);\r\n                output += encode((temp >> 4) & 0x3F);\r\n                output += encode((temp << 2) & 0x3F);\r\n                output += '=';\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return output;\r\n    }\r\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"555f5a27-476c-4fcb-c778-0922751cf7a2","fieldName":"AppCache","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":577,"fieldType":"neptune.Script","script":"// AppCache Variables\nlet AppCache = {\n    // Common  \n    Initialized: false,\n    userInfo: '',\n    CurrentUser: '',\n    CurrentApp: '',\n    CurrentConfig: '',\n    View: [],\n    ViewChild: [],\n    Dialogs: [],\n    isOffline: false,\n    isHCP: false,\n    isRestricted: true,\n    hcpDestination: '',\n    StartApp: '',\n    useMenu: true,\n    Url: '',\n    CustomLogo: '',\n    LoadOptions: {},\n    diaView: '',\n    loadQueue: new Array(),\n    loadRunning: false,\n    enablePush: false,\n    enableTrace: false,\n    enableLogging: false,\n    enableAutoLogin: false,\n    showTFAError: false,\n    hideSidemenu: false,\n    logoutUrl: '',\n    defaultTheme: 'sap_fiori_3',\n    launchpadTitle: '',\n    launchpadID: '',\n    timerLock: 0,\n    isPublic: false,\n    limitWidth: false,\n    pushSenderId: '',\n    hideTopHeader: false,\n    hideGlobalAjaxError: false,\n    setupResetHandler: false,\n    inactivityTimer: '',\n    sapCAICustomData: {},\n    cssGridBreakpoints: {\n        xxxlarge: 2360,\n        xxlarge: 1880,\n        xlarge: 1580,\n        large: 1280,\n        medium: 980,\n        small: 680,\n        xsmall: 380\n    },\n\n    // Mobile \n    mobileClient: '',\n    isMobile: false,\n    enablePasscode: false,\n    biometricAuthentication: false,\n    passcodeLength: 4,\n    numPasscode: 5,\n    Encrypted: '',\n    loginApp: '',\n    samlData: false,\n    inBackground: false,\n\n    loadLibrary: function (url) {\n        return new Promise(function (resolve) {\n            request({\n                type: 'GET',\n                url: url,\n                success: function (data) {\n                    resolve('OK');\n                },\n                error: function (jqXHR, textStatus, errorThrown) {\n                    resolve('ERROR');\n                },\n                dataType: 'script',\n                cache: true\n            });\n        });\n    },\n\n    _loadQueue: function () {\n        this.loadRunning = false;\n\n        let appData = this.loadQueue[0];\n        if (appData) {\n            this.loadQueue.splice(0, 1);\n            this.Load(appData.APPLID, appData.OPTIONS);\n        }\n    },\n\n    //  AppCache Methods\n    Load: function (value, options) {\n        // Check Queue - Put in queue of working\n        if (this.loadRunning) {\n            let appData = {\n                'APPLID': value,\n                'OPTIONS': options || {}\n            };\n            this.loadQueue.push(appData);\n            return;\n        }\n\n        this.loadRunning = true;\n\n        // Format ID\n        let applid = value.replace(/\\//g, '');\n\n        // Set Current App\n        AppCache.CurrentApp = value;\n\n        // Load Defaults\n        options = options || {};\n\n        AppCache.LoadOptions = {\n            dialogShow: options.dialogShow || false,\n            dialogHeight: options.dialogHeight || '90%',\n            dialogWidth: options.dialogWidth || '1200px',\n            dialogTitle: options.dialogTitle || '',\n            dialogIcon: options.dialogIcon || '',\n            dialogModal: options.dialogModal || false,\n            dialogHideMinimize: options.dialogHideMinimize || false,\n            dialogHideMosaic: options.dialogHideMosaic || false,\n            dialogHideMaximize: options.dialogHideMaximize || false,\n            onDialogClose: options.onDialogClose || function () { },\n            load: options.load || '',\n            parentObject: options.parentObject || '',\n            appGUID: options.appGUID || '',\n            appPath: options.appPath || '',\n            appAuth: options.appAuth || '',\n            appType: options.appType || '',\n            startParams: options.startParams || '',\n            openFullscreen: options.openFullscreen || false,\n            rootDir: options.rootDir || '',\n            sapICFNode: options.sapICFNode || '',\n            defaultLanguage: options.defaultLanguage || \"\",\n        }\n\n        // Check for AppCache.Load when Remote System\n        if (!AppCache.LoadOptions.appPath && (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.urlApplication)) {\n            AppCache.LoadOptions.appPath = sap.n.Launchpad.currentTile.urlApplication;\n            AppCache.LoadOptions.appType = sap.n.Launchpad.currentTile.urlType;\n            AppCache.LoadOptions.appAuth = sap.n.Launchpad.currentTile.urlAuth;\n        }\n\n        // Busyindicator Handling\n        if (AppCache.LoadOptions.parentObject) {\n            if (typeof AppCache.LoadOptions.parentObject.setBusy === 'function') {\n                AppCache.LoadOptions.parentObject.setBusy(true);\n            }\n        }\n\n        // Get App from Memory\n        if (!AppCache.LoadOptions.dialogShow) {\n            if (AppCache.LoadOptions.appGUID) {\n                if (AppCache.View[AppCache.LoadOptions.appGUID]) {\n                    AppCache.buildView(value);\n                    return;\n                }\n            } else {\n                if (AppCache.View[applid]) {\n                    AppCache.buildView(value);\n                    return;\n                }\n            }\n        }\n\n        // Get App from DB/LS if exist in repository\n        let app = ModelData.FindFirst(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath]);\n        if (app) {\n            if (AppCache.isOffline || !app.invalid) {\n                let viewName = 'app:' + value + ':' + AppCache.userInfo.language + ':' + AppCache.LoadOptions.appPath;\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9GetView(viewName.toUpperCase()).then(function (viewData) {\n                        if (viewData.length > 2) {\n                            AppCache.initView(value, viewData);\n                        } else {\n                            AppCache.getView(value);\n                        }\n                    });\n                } else {\n                    let data = sapStorageGet(viewName.toUpperCase());\n                    if (data) {\n                        AppCache.initView(value, data);\n                    } else {\n                        AppCache.getView(value);\n                    }\n                }\n            } else {\n                AppCache.getView(value);\n            }\n        } else {\n            AppCache.getView(value);\n        }\n\n    },\n\n    LoadAdaptive: function (id, options) {\n        if (!options) options = {};\n\n        sap.n.Adaptive.getConfig(id).then(function (config) {\n            // Exists ? \n            if (!config) {\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\n                return;\n            }\n\n            // Merge from Options\n            if (options && options.startParams) {\n                if (options.startParams.data) config.settings.data = options.startParams.data;\n                if (options.startParams.navigation) config.settings.navigation = options.startParams.navigation;\n                if (options.startParams.events) config.settings.events = options.startParams.events;\n            }\n\n            AppCache.Load(config.application, {\n                appGUID: ModelData.genID(),\n                startParams: config,\n                dialogShow: options.dialogShow || false,\n                dialogHeight: options.dialogHeight || '90%',\n                dialogWidth: options.dialogWidth || '1200px',\n                dialogTitle: options.dialogTitle || '',\n                dialogIcon: options.dialogIcon || '',\n                dialogModal: options.dialogModal || false,\n                dialogHideMinimize: options.dialogHideMinimize || false,\n                dialogHideMosaic: options.dialogHideMosaic || false,\n                dialogHideMaximize: options.dialogHideMaximize || false,\n                load: options.load || '',\n                parentObject: options.parentObject || '',\n                appPath: options.appPath || '',\n                appAuth: options.appAuth || '',\n                appType: options.appType || '',\n                openFullscreen: options.openFullscreen || false,\n                rootDir: options.rootDir || '',\n                sapICFNode: options.sapICFNode || ''\n            });\n        });\n    },\n\n    LoadAdaptiveSidepanel: function (id, title, options) {\n        if (!options) options = {};\n        sap.n.Adaptive.getConfig(id).then(function (config) {\n            // Exists ? \n            if (!config) {\n                sap.m.MessageToast.show(AppCache_tAdaptiveNotFound.getText());\n                return;\n            }\n\n            // Merge from Options\n            if (options && options.startParams) {\n                if (options.startParams.data) config.settings.data = options.startParams.data;\n                if (options.startParams.navigation) config.settings.navigation = options.startParams.navigation;\n                if (options.startParams.events) config.settings.events = options.startParams.events;\n            }\n\n            sap.n.Shell.loadSidepanel(config.application, title, {\n                appGUID: ModelData.genID(),\n                icon: options.icon || '',\n                additionaltext: options.additionaltext || '',\n                startParams: config,\n            });\n        });\n    },\n\n    LoadWebApp: function (value, options) {\n        let dataTile = {\n            actionWebApp: value,\n            openFullscreen: true,\n        };\n\n        let dataCat = {};\n        let viewName = 'webapp:' + value + ':' + dataTile.urlApplication;\n        let webApp = ModelData.FindFirst(AppCacheData, ['application', 'appPath'], [dataTile.actionWebApp, dataTile.urlApplication]);\n\n        if (webApp) {\n            // Get App from Memory\n            if (AppCache.View[viewName]) {\n                AppCache.buildWebApp(dataTile, null, dataCat);\n                return;\n            }\n\n            // Get App from Cache\n            if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                p9GetView(viewName).then(function (viewData) {\n                    if (viewData.length > 10 && !webApp.invalid) {\n                        AppCache.buildWebApp(dataTile, viewData, dataCat);\n                    } else {\n                        AppCache.getWebApp(dataTile, dataCat);\n                    }\n                });\n            } else {\n                let data = sapStorageGet(viewName);\n                if (data && !webApp.invalid) {\n                    AppCache.buildWebApp(dataTile, data, dataCat);\n                } else {\n                    AppCache.getWebApp(dataTile, dataCat);\n                }\n            }\n        } else {\n            AppCache.getWebApp(dataTile, dataCat);\n        }\n    },\n\n    // AppCache Methods\n    restrictedEnable: function () {\n        // Objects\n        AppCacheShellUser.setText();\n        AppCacheShellBack.setVisible(false);\n        AppCacheUserActionSettings.setVisible(false);\n        AppCacheShellMenu.setVisible(false);\n        AppCacheShellHelp.setVisible(false);\n        AppCacheUserActionPassword.setVisible(false);\n        launchpadContentMenu.setWidth('0px');\n        sap.n.Shell.closeSidepanel();\n        sap.n.Shell.closeAllSidepanelTabs();\n        sap.n.Launchpad.setLaunchpadContentWidth();\n\n        sap.n.Shell.closeAllSidepanelTabs();\n        sap.n.Shell.openSidePanelApps = {};\n\n        // Turn off\n        blockRunningRow.destroyContent();\n        AppCacheAppButton.removeAllItems();\n\n        // Close all Tiles - Clear memory\n        for (let key in AppCache.View) {\n            let tile = ModelData.FindFirst(AppCacheTiles, 'GUID', key);\n            if (tile && tile.GUID) sap.n.Shell.closeTile(tile);\n        }\n\n        // Close AppCache.Load Apps\n        for (let key in sap.n.Apps) {\n            if (AppCache.View[key]) {\n                AppCache.View[key].destroy();\n                AppCache.View[key] = null;\n                delete sap.n.Apps[key];\n            }\n        }\n\n        // Data\n        modelAppCacheTiles.setData([]);\n        modelAppCacheDiaSettings.setData([]);\n        modelAppCacheTilesRun.setData([]);\n        modelAppCacheTilesRun.setData([]);\n\n        AppCache.userInfo = {};\n\n        // Clear Pages\n        AppCacheNav.getPages().forEach(function (data) {\n            if (\n                ![\n                    'AppCachePageMenu', 'AppCachePageStore', 'AppCache_boxURL',\n                    'AppCache_boxLogon', 'AppCache_boxLogonCustom', 'AppCache_boxPassword',\n                    'AppCache_boxPasscode', 'AppCache_boxPasscodeEntry', 'AppCache_boxUsers'\n                ].includes(data.sId)\n            ) {\n                AppCacheNav.removePage(data.sId);\n                data.destroy();\n                data = null;\n            }\n        });\n\n        // Clear external URL\n        let elem = document.getElementById('AppCache_URLDiv');\n        if (elem) elem.innerHTML = '';\n\n        // Clear Views\n        AppCache.View = [];\n\n        // Clear timers\n        for (let key in sap.n.Launchpad.Timers) {\n            clearInterval(sap.n.Launchpad.Timers[key].timer);\n        }\n\n        if (AppCacheLogonAzure.autoRelog) {\n            clearInterval(AppCacheLogonAzure.autoRelog);\n            AppCacheLogonAzure.autoRelog = null;\n        }\n\n        sap.n.Launchpad.Timers = [];\n        sap.n.Launchpad.currentTile = {};\n        sap.n.currentView = '';\n\n        clearTimeout(AppCache.inactivityTimer);\n\n        AppCache.isRestricted = true;\n        location.hash = '';\n\n        // Standard Theme\n        if (AppCache.layout) sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n\n        topMenu.setHeight('48px');\n\n        // Close all Dialogs \n        sap.m.InstanceManager.closeAllDialogs();\n\n        // Extra memory cleanup\n        sap.n.Shell.clearAllObjects();\n\n        // Close Objects Loaded into the App\n        AppCache.ViewChild['undefined'] && AppCache.ViewChild['undefined'].forEach(function (data) {\n            sap.n.Shell.clearObjects(data.sId);\n        });\n\n        delete AppCache.ViewChild['undefined'];\n\n        // External Tools\n        AppCache.disableExternalTools();\n\n        // Adaptive\n        sap.n.Adaptive.configurations = {};\n        sap.n.Adaptive.pages = {};\n        sap.n.Adaptive.dialogs = {};\n\n        // Enhancement\n        if (sap.n.Enhancement.RestrictedEnable) {\n            try {\n                sap.n.Enhancement.RestrictedEnable();\n            } catch (e) {\n                appCacheError('Enhancement RestrictedEnable ' + e);\n            }\n        }\n\n    },\n\n    saveChildView: function (view) {\n        if (!sap.n.Launchpad.currentTile) return;\n        if (!AppCache.ViewChild[sap.n.Launchpad.currentTile.id]) AppCache.ViewChild[sap.n.Launchpad.currentTile.id] = [];\n        AppCache.ViewChild[sap.n.Launchpad.currentTile.id].push(view);\n    },\n\n    translate: function (language) {\n        // Language set in query string always takes precedence\n        const urlLang = new URLSearchParams(location.search).get('lang');\n        if (urlLang) {\n            language = urlLang;\n        }\n        // Handle Languages        \n        if (language === 'NB') language = 'NO';\n\n        AppCache.objects && AppCache.objects.forEach(function (object) {\n            let obj = sap.ui.getCore().byId(object.fieldName);\n            if (obj) {\n                object.attributes.forEach(function (attribute) {\n                    const translation = ModelData.FindFirst(attribute.translation, 'language', language);\n\n                    const firstLetter = attribute.attribute.charAt(0).toUpperCase();\n                    const restOfAttrStr = attribute.attribute.slice(1);\n                    const arg = translation ? translation.value : attribute.value;\n                    const jsFn = `obj.set${firstLetter}${restOfAttrStr}('${arg}')`;\n\n                    try {\n                        eval(jsFn);\n                    } catch (e) {\n                        console.log(e);\n                    }\n                });\n            }\n        });\n\n        AppCache.coreLanguageHandler.updateResourceBundlesNewLang(language);\n    },\n\n    inactivitySetup: function () {\n        if (!AppCache.setupResetHandler) {\n            window.addEventListener('mousemove', AppCache.inactivityReset, false);\n            window.addEventListener('mousedown', AppCache.inactivityReset, false);\n            window.addEventListener('keypress', AppCache.inactivityReset, false);\n            window.addEventListener('DOMMouseScroll', AppCache.inactivityReset, false);\n            window.addEventListener('mousewheel', AppCache.inactivityReset, false);\n            window.addEventListener('touchmove', AppCache.inactivityReset, false);\n            window.addEventListener('MSPointerMove', AppCache.inactivityReset, false);\n            AppCache.setupResetHandler = true;\n        }\n\n        AppCache.inactivityStart();\n    },\n\n    inactivityReset: function () {\n        clearTimeout(AppCache.inactivityTimer);\n        if (!AppCache.isRestricted) AppCache.inactivityStart();\n    },\n\n    inactivityStart: function () {\n        AppCache.inactivityTimer = setTimeout(AppCache.inactivityTrigger, AppCache.timerLock * 1000);\n    },\n\n    inactivityTrigger: function () {\n        appCacheLog('Inactivity Timer: Triggering Autolock');\n        clearTimeout(AppCache.inactivityTimer);\n        AppCache.Lock();\n    },\n\n    restrictedDisable: function () {\n        // AutoLock \n        if (!isCordova() && AppCache.timerLock) AppCache.inactivitySetup();\n\n        AppCacheUserActionSettings.setVisible(true);\n        AppCache_boxPasscodeEntry.setVisible(false);\n        AppCacheShellTitle.setText();\n\n        if (!AppCache.StartApp && !AppCache.StartWebApp) AppCacheShellMenu.setVisible(true);\n\n        // Config\n        if (AppCache.config) {\n            if (AppCache.config.hideTopHeader) topMenu.setHeight('0px');\n            if (AppCache.config.verticalMenu && sap.ui.Device.resize.width >= sap.n.Launchpad.verticalMenuLimit) sap.n.Launchpad.overflowMenuOpen();\n        }\n\n        appCacheLog('AppCache.restrictedDisable: Before get data from database');\n        getCacheAppCacheDiaSettings(true);\n\n        // Get User Data\n        cacheLoaded = 0;\n        getCacheAppCacheTiles(true);\n        getCacheAppCacheCategory(true);\n        getCacheAppCacheCategoryChild(true);\n        getCacheAppCacheTilesRun(true);\n        getCacheAppCacheTilesFav(true);\n        getCacheAppCacheCustomization(true);\n\n        // Init IDP Provider  \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type) {\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    AppCacheUserActionPassword.setVisible(true);\n                    AppCacheLogonLocal.Init();\n                    break;\n\n                case 'azure-bearer':\n                    AppCacheLogonAzure.Init();\n                    break;\n\n                case 'openid-connect':\n                    AppCacheLogonOIDC.Init();\n                    break;\n\n                case 'ldap':\n                    AppCacheLogonLdap.Init();\n                    break;\n            }\n        }\n\n        (function () {\n            function waitForCache() {\n                if (cacheLoaded >= 6) {\n                    AppCache.isRestricted = false;\n                    AppCache.Encrypted = '';\n\n                    appCacheLog('AppCache.restrictedDisable: All data fetched from database');\n\n                    if (AppCache.enablePasscode) {\n                        AppCacheUserActionLock.setVisible(true);\n                        AppCacheUserActionSwitch.setVisible(false);\n                    } else {\n                        AppCacheUserActionLogoff.setVisible(true);\n                    }\n\n                    // Enhancement\n                    if (sap.n.Enhancement.RestrictedDisable) {\n                        try {\n                            sap.n.Enhancement.RestrictedDisable();\n                        } catch (e) {\n                            appCacheError('Enhancement RestrictedDisable ' + e);\n                        }\n                    }\n\n                    if (AppCache.enablePasscode && !AppCache.isOffline) {\n                        AppCache.updateUserInfo().then(function (status) {\n                            // TODO - Consider to move on even if updateUserInfo fails ? \n                            if (status === 'Ok') {\n                                AppCache.UpdateGetData();\n                            } else {\n                                appCacheError('User logoff due to error in updateUserInfo');\n                                AppCache.Lock();\n                            }\n                        });\n                    } else {\n                        AppCache.UpdateGetData();\n                    }\n\n                } else {\n                    setTimeout(waitForCache, 50);\n                }\n            }\n            waitForCache();\n        })();\n\n        // Update users Login Time \n        let user = ModelData.FindFirst(AppCacheUsers, 'username', AppCache.userInfo.username);\n        if (user) {\n            user.lastLogin = Date.now();\n            ModelData.Update(AppCacheUsers, 'username', AppCache.userInfo.username, user);\n            setCacheAppCacheUsers();\n        }\n    },\n\n    AutoUpdateMobileApp: function () {\n        // Update App - device check\n        const deviceName = sap.ui.Device.os.name;\n        if (!['win', 'Android', 'iOS'].includes(deviceName)) return;\n\n        if (!isCordova()) return;\n        if (AppCache.isOffline) return;\n\n        // Version check\n        const currentVersion = AppCache.AppVersion.replace(/\\D/g, '')\n        const activeVersion = AppCache.AppVersionActive.replace(/\\D/g, '')\n\n        if (currentVersion < activeVersion) {\n            let n = `${AppCache.Url}/mobileClients/${AppCache.mobileClient}/build/${AppCache.AppVersionActiveID}/`;\n\n            if (deviceName === 'win') n += 'Windows';\n            else if (deviceName === 'Android') n += 'Android';\n            else if (deviceName === 'iOS') {\n                n = 'itms-services://?action=download-manifest&url=' + encodeURIComponent(`${n}Ios.plist`);\n                console.log(n);\n            }\n\n            AppCache.UpdateMobileApp(n, AppCache.AppVersionActive);\n        }\n    },\n\n    fileWriter: {\n        // Save the file to OS in blocks of 5MB recursively. Saving all in one block can result in out of memory errors on some devices\n        writeBlock: function (fileWriter, bytesWritten, callback) {\n            let blockSize = Math.min(5 * 1024 * 1024, AppCache.fileWriter.blob.size - bytesWritten);\n            let block = this.blob.slice(bytesWritten, bytesWritten + blockSize, AppCache.fileWriter.blob.type);\n\n            fileWriter.write(block);\n\n            bytesWritten += blockSize;\n            fileWriter.onwrite = function () {\n                if (bytesWritten < AppCache.fileWriter.blob.size) {\n                    AppCache.fileWriter.writeBlock(fileWriter, bytesWritten, callback);\n                } else {\n                    callback(fileWriter);\n                }\n            };\n        }\n    },\n\n    UpdateMobileApp: function (fileUrl, version) {\n        // Update App - device check\n        if (sap.ui.Device.os.name !== 'iOS' && sap.ui.Device.os.name !== 'Android' && sap.ui.Device.os.name !== 'win') return;\n\n        sap.ui.core.BusyIndicator.hide();\n\n        // iOS\n        if (sap.ui.Device.os.name === 'iOS') {\n            window.open(fileUrl, '_system');\n            return;\n        }\n\n        let fileDirectory = cordova.file.cacheDirectory;\n        let localFile = AppCache.CurrentConfig;\n        let remoteFile = fileUrl;\n        let contentType;\n\n        if (sap.ui.Device.os.name === 'Android') {\n            localFile += '.apk';\n            contentType = 'application/vnd.android.package-archive';\n        } else {\n            localFile += '.appx';\n            contentType = 'application/vns.ms-appx';\n        }\n\n        // Open Dialog\n        AppCache_diaDownload.open();\n        AppCache_diaDownload.setText(AppCache_tDownloading.getText() + ' (v.' + version + ')...');\n\n        // Delete Old File\n        window.resolveLocalFileSystemURL(localFile, function (fileEntry) {\n            fileEntry.remove();\n        }, function (error) { });\n\n        // Download File \n        AppCache.downloadXhr = new XMLHttpRequest();\n        AppCache.downloadXhr.responseType = 'blob'; // force blob\n        AppCache.downloadXhr.open('GET', remoteFile);\n        AppCache.downloadXhr.send();\n\n        AppCache.downloadXhr.onload = function () {\n            if (AppCache.downloadXhr.status != 200) {\n                AppCache_diaDownload.close();\n                sap.m.MessageToast.show(AppCache.downloadXhr.statusText);\n                AppCache.downloadXhr = null;\n            } else {\n\n                let loDownloadedData = {\n                    response: AppCache.downloadXhr.response,\n                    responseType: AppCache.downloadXhr.responseType\n                };\n\n                // Save File\n                window.requestFileSystem(LocalFileSystem.TEMPORARY, 0, function (fs) {\n                    fs.root.getFile(localFile, { create: true, exclusive: false }, function (fileEntry) {\n                        fileEntry.createWriter(function (fileWriter) {\n                            //\n                            // Helper functions - Begin\n                            let lfFormatMessage = function (poObject, pvMessage) {\n                                //\n                                // Replaces the parameter with the object's property with the same name\n                                // E.g.: Person = { Name1: 'Jørgen' }; Text = 'My name is ${Name1}'\n                                //       lfFormatMessage( Person, Text ) => 'My name is Jørgen'\n                                let lvMessage = pvMessage.replaceAll(\n                                    /\\$\\{(\\w*)\\}/gi,\n                                    function (match, contents, offset, input_string) {\n                                        return poObject[contents];\n                                    }\n                                );\n                                return lvMessage;\n                            };\n                            let lfOpenInstaller = function (pvFullFile) {\n                                //\n                                // Opens the file for installation (requires full path in file:// or cdvfile://)\n                                cordova.plugins.fileOpener2.open(\n                                    pvFullFile,\n                                    contentType, {\n                                    success: function () {\n                                        //\n                                        // Upon success, it makes sure that it closes the dialog before the update starts\n                                        AppCache_diaDownload.close();\n                                    },\n                                    error: function (e) {\n                                        //\n                                        // It's an error, so close the dialog anyway before displaying the error messages\n                                        AppCache_diaDownload.close();\n                                        let lvErrorMessage = lfFormatMessage(e, 'Error opening file. Status: ${status} - Error message: ${message}');\n                                        console.error(lvErrorMessage);\n                                    }\n                                });\n                            };\n                            // Helper functions - End\n                            //\n\n                            //\n                            // File saving error handling\n                            fileWriter.onerror = function (e) {\n                                let lvErrorMessage = lfFormatMessage(e, 'Error saving file. Status: ${status} - Error message: ${message}');\n                                console.error(lvErrorMessage);\n                            }\n\n                            //\n                            // Prepares blob data\n                            AppCache.fileWriter.blob = (loDownloadedData.responseType === 'blob')\n                                ? loDownloadedData.response\n                                : new Blob([loDownloadedData.response], contentType);\n                            //\n                            // Save the file to OS in blocks of 5MB recursively (check function AppCache.fileWriter.writeBlock). \n                            // Saving all in one block can result in out of memory errors on some devices\n                            AppCache.fileWriter.writeBlock(fileWriter, 0, function (fileWriter) {\n                                lfOpenInstaller(fileWriter.localURL);\n                                AppCache.downloadXhr = null;\n                                loDownloadedData = null;\n                            });\n                        });\n                    });\n                });\n            }\n        };\n\n        AppCache.downloadXhr.onprogress = function (evt) {\n            const t = AppCache_tDownloading.getText();\n            if (evt.lengthComputable) {\n                AppCache_diaDownload.setText(`${t} (v.${version})...${evt.loaded} of ${evt.total} ${bytes}`);\n            } else {\n                AppCache_diaDownload.setText(`${t} (v.${version})...${evt.loaded} bytes`);\n            }\n        };\n\n        AppCache.downloadXhr.onerror = function () {\n            AppCache_diaDownload.close();\n            sap.m.MessageToast.show(AppCache_tErrorDownloading.getText());\n            AppCache.downloadXhr = null;\n        };\n\n    },\n\n    clearCookies: function () {\n\n        // Cookie Clearing - Android/iOS\n        if (typeof cookieMaster !== 'undefined') {\n            cookieMaster.clearCookies(\n                function () { },\n                function () { });\n        }\n\n        // Cookie Clearing - Windows 10\n        try {\n            document.execCommand('ClearAuthenticationCache', 'false');\n        } catch (e) { }\n\n        // Enhancement\n        if (sap.n.Enhancement.ClearCookies) {\n            try {\n                sap.n.Enhancement.ClearCookies();\n            } catch (e) {\n                appCacheError('Enhancement ClearCookies ' + e);\n            }\n        }\n\n    },\n\n    initView: function (value, data) {\n        // Load Option: Download\n        if (AppCache.LoadOptions.load === 'download') {\n            sap.ui.core.BusyIndicator.hide();\n            this._loadQueue();\n            return;\n        }\n\n        // Format ID\n        let applid = value.replace(/\\//g, '').toUpperCase();\n\n        try {\n            eval(data);\n        } catch (error) {\n            if (error.message) {\n                sap.m.MessageToast.show(error.message);\n            }\n            return;\n        }\n\n        // Creating UI5 view \n        let versionParts = sap.ui.version.split(\".\");\n\n        // BlockLayout vs Cards\n        if (versionParts[0] >= 1 && versionParts[1] < 56) {\n\n            let oJSView;\n\n            if (!AppCache.LoadOptions.dialogShow && !AppCache.LoadOptions.parentObject) {\n\n                try {\n                    oJSView = sap.ui.view({\n                        viewName: value.toUpperCase(),\n                        type: sap.ui.core.mvc.ViewType.JS\n                    });\n                } catch (err) {\n                    AppCache.handleTileError(err);\n                    sap.m.MessageToast.show('Init view error in : ' + value.toUpperCase());\n                }\n\n                if (AppCache.LoadOptions.appGUID) {\n                    AppCache.View[AppCache.LoadOptions.appGUID] = oJSView;\n                } else {\n                    AppCache.View[applid] = oJSView;\n                }\n            } else {\n\n                try {\n                    AppCache.diaView = sap.ui.view({\n                        viewName: value.toUpperCase(),\n                        type: sap.ui.core.mvc.ViewType.JS\n                    });\n                } catch (err) {\n                    AppCache.handleTileError(err);\n                    sap.m.MessageToast.show('Init view error in : ' + value.toUpperCase());\n\n                }\n            }\n\n            AppCache.buildView(applid);\n\n        } else {\n\n            sap.ui.core.mvc.JSView.create({\n                viewName: value.toUpperCase()\n            }).then(function (oView) {\n\n                if (!AppCache.LoadOptions.dialogShow && !AppCache.LoadOptions.parentObject) {\n                    if (AppCache.LoadOptions.appGUID) {\n                        AppCache.View[AppCache.LoadOptions.appGUID] = oView;\n                    } else {\n                        AppCache.View[applid] = oView;\n                    }\n                } else {\n                    AppCache.diaView = oView;\n                }\n\n                AppCache.buildView(applid);\n\n            }).catch(function (err) {\n                AppCache.handleTileError(err);\n                sap.m.MessageToast.show(err);\n            });\n\n        }\n\n    },\n\n    buildView: function (value) {\n        // Format ID\n        let applid = value.replace(/\\//g, '');\n        let tempView = sap.n.currentView;\n        let eventId;\n\n        if (!AppCache.LoadOptions.parentObject && !AppCache.LoadOptions.dialogShow) {\n            if (AppCache.LoadOptions.appGUID) {\n                sap.n.currentView = AppCache.View[AppCache.LoadOptions.appGUID];\n            } else {\n                sap.n.currentView = AppCache.View[applid];\n            }\n        }\n\n        // Turn off debug\n        AppCacheShellDebug.setVisible(false);\n\n        if (AppCache.LoadOptions.appGUID) {\n            eventId = AppCache.LoadOptions.appGUID;\n        } else {\n            eventId = applid;\n        }\n\n        // Custom init\n        if (sap.n.Apps[eventId]) {\n\n            if (sap.n.Apps[eventId].init) {\n                sap.n.Apps[eventId].init.forEach(function (data) {\n                    if (AppCache.LoadOptions.startParams) {\n                        try {\n                            AppCache.LoadOptions.startParams = JSON.parse(AppCache.LoadOptions.startParams);\n                        } catch (error) { }\n                    }\n\n                    data(AppCache.LoadOptions.startParams);\n                });\n                sap.n.Apps[eventId].init = null;\n            }\n\n            // Custom beforeDisplay\n            if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeDisplay) {\n                sap.n.Apps[eventId].beforeDisplay.forEach(function (data) {\n                    if (AppCache.LoadOptions.startParams) {\n                        try {\n                            AppCache.LoadOptions.startParams = JSON.parse(AppCache.LoadOptions.startParams);\n                        } catch (error) { }\n                    }\n\n                    data(AppCache.LoadOptions.startParams);\n                });\n            }\n\n            // Custom onNavigation\n            if (sap.n.Apps[eventId] && sap.n.Apps[eventId].onNavigation) {\n                sap.n.Apps[eventId].onNavigation.forEach(function (data) {\n                    if (sap.n.HashNavigation.data) sap.n.HashNavigation.data = JSON.parse(sap.n.HashNavigation.data);\n                    data(sap.n.HashNavigation.data);\n                    sap.n.HashNavigation.data = '';\n                });\n            }\n\n        }\n\n        // Load Option: Not full load\n        if (AppCache.LoadOptions.load !== '') {\n            sap.n.currentView = tempView;\n            sap.ui.core.BusyIndicator.hide();\n            AppCache.saveChildView(tempView);\n            AppCache.diaView = null;\n            this._loadQueue();\n            return;\n        }\n\n        // Dialog\n        if (AppCache.LoadOptions.dialogShow) {\n            let contHeight = AppCache.LoadOptions.dialogHeight;\n            let contWidth = AppCache.LoadOptions.dialogWidth;\n\n            // On Mobile\n            if (!sap.n.Launchpad.isDesktop()) {\n                contWidth = '100%';\n                contHeight = '100%';\n            }\n\n            // Create Dialog\n            let dia = new sap.n.Dialog({\n                contentWidth: contWidth,\n                contentHeight: contHeight,\n                type: 'Message',\n                resizable: true,\n                draggable: true,\n                stretchOnPhone: true,\n                icon: AppCache.LoadOptions.dialogIcon,\n                title: AppCache.LoadOptions.dialogTitle,\n                hideMinimize: AppCache.LoadOptions.dialogHideMinimize,\n                hideMosaic: AppCache.LoadOptions.dialogHideMosaic,\n                hideMaximize: AppCache.LoadOptions.dialogHideMaximize,\n                afterClose: function (oEvent) {\n\n                    // Delete From Array\n                    for (let i = 0; i < AppCache.Dialogs.length; i++) {\n                        if (AppCache.Dialogs[i] === dia.getId()) {\n                            AppCache.Dialogs.splice(i, 1);\n                            break;\n                        }\n                    }\n\n                    dia.destroyContent();\n                    dia = null;\n\n                    if (AppCache.Dialogs.length === 0) AppCacheShellDialog.setVisible(false);\n\n                },\n                beforeClose: AppCache.LoadOptions.onDialogClose\n            });\n\n            // Add Dialog to Array\n            AppCache.Dialogs.push(dia.getId());\n            dia.addContent(AppCache.diaView);\n\n            dia.open();\n            sap.ui.core.BusyIndicator.hide();\n            AppCache.saveChildView(AppCache.diaView);\n            this._loadQueue();\n            return;\n        }\n\n        // ParentObject\n        if (AppCache.LoadOptions.parentObject) {\n            let view = AppCache.diaView || AppCache.View[applid];\n\n            if (AppCache.LoadOptions.parentObject.addContent) {\n                AppCache.LoadOptions.parentObject.removeAllContent();\n                AppCache.LoadOptions.parentObject.addContent(view);\n                AppCache.LoadOptions.parentObject.rerender();\n            }\n\n            if (typeof AppCache.LoadOptions.parentObject.setBusy === 'function') AppCache.LoadOptions.parentObject.setBusy(false);\n\n            AppCache.diaView = null;\n            AppCache.saveChildView(view);\n            this._loadQueue();\n            return;\n        }\n\n        // Add page to navigation\n        if (!AppCacheNav.getPage(sap.n.currentView.sId)) AppCacheNav.addPage(sap.n.currentView);\n\n        // Navigate\n        AppCacheNav.to(sap.n.currentView, modelAppCacheDiaSettings.oData.TRANSITION || 'fade');\n\n        // Set Shell Title\n        if (sap.n.Launchpad.SetHeader) sap.n.Launchpad.SetHeader();\n\n        // Set Shell Settings - Tiles\n        let dataTile = ModelData.FindFirst(AppCacheTiles, 'id', AppCache.LoadOptions.appGUID);\n\n        if (dataTile) {\n            let hideHeader = false;\n            if (sap.n.Launchpad.isDesktop() && dataTile.hideHeaderL) hideHeader = true;\n            if (sap.n.Launchpad.isTablet() && dataTile.hideHeaderM) hideHeader = true;\n            if (sap.n.Launchpad.isPhone() && dataTile.hideHeaderS) hideHeader = true;\n            sap.n.Launchpad.setHideHeader(hideHeader);\n\n            if (dataTile.openFullscreen) {\n                AppCacheShellUI.setAppWidthLimited(false);\n            } else {\n                AppCacheShellUI.setAppWidthLimited(true);\n            }\n\n        }\n        sap.ui.core.BusyIndicator.hide();\n        this._loadQueue();\n\n    },\n\n    getView: function (value) {\n        if (status === 'NOT_LOGGED_IN') {\n            AppCache.handleTileError('getView: NOT_LOGGED_IN');\n            sap.m.MessageToast.show(AppCache_tSessionTimeout.getText());\n            return;\n        }\n\n        // Get View from Server\n        if (AppCache.LoadOptions.rootDir) {\n            if (AppCache.LoadOptions.rootDir === '/views/') {\n                url = AppCache.LoadOptions.rootDir + value;\n            } else {\n                url = AppCache.LoadOptions.rootDir + value + '.js';\n            }\n        } else {\n            if (AppCache.isPublic) {\n                url = '/public/app/' + value + '.js';\n            } else {\n                url = '/app/' + value + '.js';\n            }\n        };\n\n        // Detect Mobile \n        if (AppCache.isMobile) url += '?isMobile=true';\n\n        let headers = { 'X-Requested-With': 'XMLHttpRequest' }\n\n        // Remote System\n        if (AppCache.LoadOptions.appPath) {\n            // Remote System\n            if (AppCache.LoadOptions.appType === 'SAP') {\n                headers.NeptuneServer = AppCache.LoadOptions.appPath;\n\n                const proxyPrefix = '/proxy/remote/';\n                const appPathPrefix = `${AppCache.LoadOptions.appPath}/neptune/`;\n                const appPathPostfix = `/${AppCache.LoadOptions.appAuth}`;\n                if (AppCache.LoadOptions.sapICFNode) {\n                    url = proxyPrefix + encodeURIComponent(appPathPrefix + AppCache.LoadOptions.sapICFNode + `/${value}.view.js`) + appPathPostfix;\n                } else {\n                    url = proxyPrefix + encodeURIComponent(appPathPrefix + `${value}.view.js`) + appPathPostfix;\n                }\n\n                AppCache.hideGlobalAjaxError = true;\n            } else {\n                url += AppCache.isMobile ? '&' : '?';\n                url += 'p9Server=' + AppCache.LoadOptions.appPath;\n\n                const p = encodeURIComponent(AppCache.LoadOptions.appPath + url);\n                if (AppCache.LoadOptions.appAuth) url = `/proxy/remote/${p}/${AppCache.LoadOptions.appAuth}`;\n                else url = `/proxy/${p}`;\n            }\n\n            // Remote System ID for adding  proxy authentication\n            if (AppCache.LoadOptions.appAuth) headers['X-Auth-In-P9'] = AppCache.LoadOptions.appAuth;\n\n            url = AppCache.Url + url;\n\n        } else {\n            url = AppCache.Url + url;\n        }\n\n        if (AppCache.LoadOptions.defaultLanguage) {\n            url += AppCache.isMobile ? '&' : '?';\n            url += 'lang=' + AppCache.LoadOptions.defaultLanguage;\n        }\n\n        const urlParams = new URLSearchParams(window.location.search);\n        const debug = urlParams.get('debug');\n        \n        if (debug) {\n            url += AppCache.isMobile ? '&' : '?';\n            url += 'debug=true';\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.RemoteSystemAuth) {\n            try {\n                sap.n.Enhancement.RemoteSystemAuth(headers);\n            } catch (e) {\n                appCacheError('Enhancement RemoteSystemAuth ' + e);\n            }\n        }\n\n        request({\n            datatype: 'HTML',\n            type: 'GET',\n            url: url,\n            headers: headers,\n            success: function (data, status, request) {\n\n                AppCache.hideGlobalAjaxError = true;\n\n                // Save in DB/LocalStorage\n                let viewName = 'app:' + value + ':' + AppCache.userInfo.language + ':' + AppCache.LoadOptions.appPath;\n\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9SaveView(viewName.toUpperCase(), data);\n                } else {\n                    sapStoragePut(viewName.toUpperCase(), data)\n                }\n\n                // Set App Initialized\n                AppCache.Initialized = true;\n\n                // Update Application Data \n                if (value !== 'cockpit_doc_reader') {\n\n                    // App Timestamp in Header\n                    let updatedAt = request.getResponseHeader('X-Updated-At');\n                    if (AppCache.LoadOptions.appType !== 'SAP') updatedAt = parseFloat(updatedAt);\n\n                    // Get TimeStamp from App \n                    if (updatedAt) {\n                        ModelData.Update(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath], {\n                            appType: 'app',\n                            application: value.toUpperCase(),\n                            updatedAt: updatedAt,\n                            invalid: false,\n                            language: AppCache.userInfo.language,\n                            appPath: AppCache.LoadOptions.appPath\n                        });\n\n                        setCacheAppCacheData();\n                    } else {\n                        let url = '/api/functions/Launchpad/GetAppTimestamp';\n                        let headers = {};\n\n                        // Remote System\n                        if (AppCache.LoadOptions.appPath) {\n                            url = '/proxy/remote/' + encodeURIComponent(AppCache.LoadOptions.appPath + url) + '/' + AppCache.LoadOptions.appAuth;\n                        }\n\n                        url = AppCache.Url + url;\n\n                        // Enhancement\n                        if (sap.n.Enhancement.RemoteSystemAuth) {\n                            try {\n                                sap.n.Enhancement.RemoteSystemAuth(headers);\n                            } catch (e) {\n                                appCacheError('Enhancement RemoteSystemAuth ' + e);\n                            }\n                        }\n\n                        // Get App Timestamp\n                        jsonRequest({\n                            url,\n                            headers,\n                            data: JSON.stringify({ application: value }),\n                            success: function (data) {\n                                ModelData.Update(AppCacheData, ['application', 'language', 'appPath'], [value.toUpperCase(), AppCache.userInfo.language, AppCache.LoadOptions.appPath], {\n                                    appType: 'app',\n                                    application: value.toUpperCase(),\n                                    updatedAt: data.updatedAt,\n                                    invalid: false,\n                                    language: AppCache.userInfo.language,\n                                    appPath: AppCache.LoadOptions.appPath\n                                });\n                                setCacheAppCacheData();\n                            },\n                            error: function (result, status) {\n\n                            }\n                        });\n\n                    }\n                }\n\n                // Start View\n                AppCache.initView(value, data);\n\n            },\n            error: function (error) {\n                if (error.status === 404) {\n                    Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\n                        if (tile && (tile.actionApplication === value || tile.tileApplication === value)) {\n                            let b = sap.ui.getCore().byId(`but${tile.id}`);\n                            if (b) b.destroy();\n                        }\n                    });\n                    sap.m.MessageToast.show(AppCache_tAppNotFound.getText());\n                }\n\n                AppCache.handleTileError(error.statusText);\n\n                setTimeout(function () {\n                    AppCache.hideGlobalAjaxError = false;\n                }, 100);\n            }\n        });\n\n    },\n\n    handleTileError: function (err) {\n        AppCache.loadRunning = false;\n        sap.n.currentView = '';\n        sap.n.Shell.closeTile({ id: AppCache.LoadOptions.appGUID });\n        sap.n.Shell.closeSidepanel();\n        if (err) console.log(err);\n    },\n\n    getWebApp: function (dataTile, dataCat) {\n        if (AppCache.isPublic) url = '/public/webapp/' + dataTile.actionWebApp;\n        else url = '/webapp/' + dataTile.actionWebApp;\n\n        // Detect Mobile \n        if (AppCache.isMobile) url += '?isMobile=true';\n\n        let headers = { 'X-Requested-With': 'XMLHttpRequest' }\n\n        if (dataTile.urlApplication) {\n            if (AppCache.userInfo.azureToken) headers.Authorization = 'Bearer ' + AppCache.userInfo.azureToken.id_token;\n            url = AppCache.Url + '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n        } else {\n            url = AppCache.Url + url;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.RemoteSystemAuth) {\n            try {\n                sap.n.Enhancement.RemoteSystemAuth(headers);\n            } catch (e) {\n                appCacheError('Enhancement RemoteSystemAuth ' + e);\n            }\n        }\n\n        request({\n            datatype: 'HTML',\n            type: 'GET',\n            url: url,\n            headers: headers,\n            success: function (data) {\n                // Save in DB/LocalStorage\n                let viewName = 'webapp:' + dataTile.actionWebApp + ':' + dataTile.urlApplication;\n\n                if (typeof p9Database !== 'undefined' && p9Database !== null) {\n                    p9SaveView(viewName, data);\n                } else {\n                    sapStoragePut(viewName, data);\n                }\n\n                let url = '/api/functions/Launchpad/GetAppTimestamp';\n                let headers = {};\n\n                // Remote System\n                if (dataTile.urlApplication) {\n                    if (AppCache.userInfo.azureToken) headers.Authorization = 'Bearer ' + AppCache.userInfo.azureToken.id_token;\n                    url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n                }\n\n                url = AppCache.Url + url;\n\n                // Enhancement\n                if (sap.n.Enhancement.RemoteSystemAuth) {\n                    try {\n                        sap.n.Enhancement.RemoteSystemAuth(headers);\n                    } catch (e) {\n                        appCacheError('Enhancement RemoteSystemAuth ' + e);\n                    }\n                }\n\n                // Get App Timestamp\n                jsonRequest({\n                    type: 'POST',\n                    contentType: 'application/json',\n                    url: url,\n                    headers: headers,\n                    data: JSON.stringify({ webapp: dataTile.actionWebApp }),\n                    success: function (data) {\n                        ModelData.Update(AppCacheData, ['application', 'appPath'], [data.application, dataTile.urlApplication], {\n                            appType: 'webapp',\n                            application: data.application,\n                            appPath: dataTile.urlApplication,\n                            updatedAt: data.updatedAt,\n                            invalid: false,\n                            language: AppCache.userInfo.language\n                        });\n                        setCacheAppCacheData();\n                    },\n                    error: function (result, status) { }\n                });\n\n                // Set Flag to InMemory\n                AppCache.View[viewName] = true;\n\n                // Start View\n                AppCache.buildWebApp(dataTile, data, dataCat);\n\n            },\n            error: function (error) {\n                if (error.status === 404) {\n                    Array.isArray(modelAppCacheTiles.oData) && modelAppCacheTiles.oData.forEach(function (tile) {\n                        if (tile && tile.actionWebApp === dataTile.actionWebApp) {\n                            let b = sap.ui.getCore().byId(`but${tile.id}`);\n                            if (b) b.destroy();\n                        }\n                    });\n                    sap.m.MessageToast.show(AppCache_tAppNotFound.getText());\n                }\n\n                AppCache.handleTileError(error.statusText);\n            }\n        });\n    },\n\n    buildWebApp: function (dataTile, viewData, dataCat) {\n        // As Dialog \n        if (dataTile.openDialog) {\n            sap.n.Launchpad.contextType = 'Tile';\n            sap.n.Launchpad.contextTile = dataTile;\n\n            sap.n.Shell.openUrl(dataTile.actionWebApp, {\n                webAppData: viewData,\n                dialogTitle: dataTile.title,\n                dialogWidth: dataTile.dialogWidth || '1200px',\n                dialogHeight: dataTile.dialogHeight || '90%',\n            });\n\n            location.hash = '';\n            AppCacheShellBack.setVisible(false);\n            return;\n        }\n\n        if (dataTile.actionWebApp !== AppCache.StartWebApp) sap.n.Launchpad.handleNavButton(dataTile, dataCat);\n        AppCacheNav.to(AppCache_boxURL, modelAppCacheDiaSettings.oData.TRANSITION || 'fade');\n\n        // As Embedded\n        AppCacheShellUI.setAppWidthLimited(!dataTile.openFullscreen);\n\n        // Hide All\n        hideChildren('#AppCache_URLDiv');\n\n        // Check If element exist > Display or Create\n        const el = elById(`iFrame${dataTile.id}`);\n        if (el) {\n            el.style.display = 'block';\n            return;\n        }\n\n        appendIFrame(\n            querySelector('#AppCache_URLDiv'),\n            {\n                'id': `iFrame${dataTile.id}`,\n                'frameborder': '0',\n                'style': 'border: 0;',\n                'width': '100%',\n                'height': '100%',\n                'srcdoc': viewData\n            }\n        );\n    },\n\n    Lock: function () {\n        // Enhancement\n        if (sap.n.Enhancement.BeforeLock) {\n            try {\n                sap.n.Enhancement.BeforeLock();\n            } catch (e) {\n                appCacheError(`Enhancement BeforeLock ${e}`);\n            }\n        }\n\n        // Logoff \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type) {\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    AppCacheLogonLocal.Logoff();\n                    break;\n\n                case 'azure-bearer':\n                    AppCacheLogonAzure.Logoff();\n                    break;\n\n                case 'openid-connect':\n                    AppCacheLogonOIDC.Logoff();\n                    break;\n\n                case 'ldap':\n                    AppCacheLogonLdap.Logoff();\n                    break;\n            }\n        } else {\n            AppCacheLogonLocal.Logoff();\n        }\n\n        AppCache.restrictedEnable();\n\n        // Check PIN Code\n        if (!AppCache.enablePasscode) {\n            AppCache.Logout();\n            return;\n        }\n\n        AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n\n        // Clear NumPad\n        NumPad.numPasscode = 0;\n        NumPad.numValue = '';\n        NumPad.Verify = false;\n\n        AppCache.setEnableUsersScreen();\n        AppCacheNav.rerender();\n\n        sap.ui.core.BusyIndicator.hide();\n    },\n\n    Logout: function () {\n        clearSelectedLoginType();\n        \n        // Enhancement\n        if (sap.n.Enhancement.BeforeLogout) {\n            try {\n                sap.n.Enhancement.BeforeLogout();\n            } catch (e) {\n                appCacheError('Enhancement BeforeLogout ' + e);\n            }\n        }\n        if (AppCache.isMobile) {\n            // Restricted Area\n            AppCache.restrictedEnable();\n\n            // Show Logon Screen\n            AppCache.setEnableLogonScreen();\n            AppCache.Initialized = false;\n            NumPad.numPasscode = 0;\n            NumPad.numValue = '';\n            AppCache.Encrypted = '';\n            AppCache_inUsername.setValue();\n            AppCache_inPassword.setValue();\n            AppCacheShellUser.setText();\n\n            if (AppCache.enableAutoLogin) AppCacheLogonLocal.AutoLoginRemove();\n\n            // Logoff \n            if (AppCache.userInfo && AppCache.userInfo.logonData) {\n                switch (AppCache.userInfo.logonData.type) {\n                    case 'azure-bearer':\n                        AppCacheLogonAzure.Logoff();\n                        break;\n\n                    case 'openid-connect':\n                        AppCacheLogonOIDC.Logoff();\n                        break;\n\n                    case 'ldap':\n                        AppCacheLogonLdap.Logoff();\n                        break;\n\n                    default:\n                        AppCacheLogonLocal.Logoff();\n                        break;\n                }\n            } else {\n                AppCacheLogonLocal.Logoff();\n            }\n        } else {\n            // Logoff \n            if (AppCache.userInfo && AppCache.userInfo.logonData) {\n                switch (AppCache.userInfo.logonData.type) {\n                    case 'azure-bearer':\n                        AppCacheLogonAzure.Signout();\n                        break;\n\n                    case 'openid-connect':\n                        AppCacheLogonOIDC.Signout();\n                        break;\n\n                    default:\n                        break;\n                }\n            }\n            // Enhancement\n            if (sap.n.Enhancement.AfterLogout) {\n                try {\n                    sap.n.Enhancement.AfterLogout();\n                } catch (e) {\n                    appCacheError('Enhancement AfterLogout ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    location.hash = '';\n                    location.reload();\n                },\n                error: function (result, status) { }\n            });\n        }\n\n        AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n        sap.ui.core.BusyIndicator.hide();\n    },\n\n    LogonCustom: function (options) {\n        AppCache_loginTypes.setSelectedKey(options.logonid);\n        AppCache_inUsername.setValue(options.username);\n        AppCache_inPassword.setValue(options.password);\n        AppCache.Logon();\n    },\n\n    Logon: function () {\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n\n        // Logon \n        switch (logonData.type) {\n            case 'local':\n                AppCacheLogonLocal.Logon();\n                break;\n\n            case 'sap':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonSap.Logon();\n                break;\n\n            case 'azure-bearer':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonAzure.Logon();\n                break;\n\n            case 'openid-connect':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonOIDC.Logon();\n                break;\n\n            case 'saml':\n                AppCacheLogonLocal.AutoLoginRemove();\n                if (AppCache.isMobile) {\n                    AppCacheLogonSaml.Logon(logonData);\n                } else {\n                    window.open(logonData.entryPoint);\n                }\n                break;\n\n            case 'ldap':\n                AppCacheLogonLocal.AutoLoginRemove();\n                AppCacheLogonLdap.Logon();\n                break;\n        }\n    },\n\n    getLogonTypeInfo: function (id) {\n        let info = { type: 'local' };\n        const { logonTypes } = modelDataSettings.oData;\n        Array.isArray(logonTypes) && logonTypes.forEach(function (data) {\n            if (data.id === id) info = data;\n        });\n\n        delete info.bindCredentials;\n        delete info.bindDn;\n        delete info.filterGroup;\n        delete info.filterUser;\n        delete info.findGroupsForUserFilter;\n        delete info.groupKeyField;\n        delete info.mapGroup;\n        delete info.mapUser;\n        delete info.searchBase;\n        delete info.searchFilter;\n        delete info.searchGroupFilter;\n        delete info.searchUserFilter;\n\n        return info;\n    },\n\n    setUserInfo: function () {\n        AppCacheUserActionText.setText(AppCache.userInfo.name || AppCache.userInfo.username);\n        inAppCacheFormSettingsLang.setSelectedKey(AppCache.userInfo.language);\n\n        // Enhancement\n        if (sap.n.Enhancement.setUserInfo) {\n            try {\n                sap.n.Enhancement.setUserInfo();\n            } catch (e) {\n                appCacheError('Enhancement setUserInfo ' + e);\n            }\n        }\n\n        if (AppCache.isMobile) return;\n\n        // logonData \n        let logonData = localStorage.getItem('p9logonData');\n\n        if (logonData) {\n            try {\n                AppCache.userInfo.logonData = JSON.parse(logonData);\n                delete AppCache.userInfo.logonData.bindCredentials;\n                delete AppCache.userInfo.logonData.bindDn;\n                delete AppCache.userInfo.logonData.filterGroup;\n                delete AppCache.userInfo.logonData.filterUser;\n                delete AppCache.userInfo.logonData.findGroupsForUserFilter;\n                delete AppCache.userInfo.logonData.groupKeyField;\n                delete AppCache.userInfo.logonData.mapGroup;\n                delete AppCache.userInfo.logonData.mapUser;\n                delete AppCache.userInfo.logonData.searchBase;\n                delete AppCache.userInfo.logonData.searchFilter;\n                delete AppCache.userInfo.logonData.searchGroupFilter;\n                delete AppCache.userInfo.logonData.searchUserFilter;\n            } catch (e) { }\n        }\n\n        // Azure Bearer \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type === 'azure-bearer') {\n            let tokenData = localStorage.getItem('p9azuretoken');\n            let tokenDatav2 = localStorage.getItem('p9azuretokenv2');\n\n            if (tokenData || tokenDatav2) {\n                try {\n                    if (tokenDatav2) {\n                        AppCacheLogonAzure.Relog(null);\n                    } else {\n\n                        AppCache.userInfo.azureToken = JSON.parse(tokenData);\n                        AppCache.userInfo.azureUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.azureToken.id_token);\n                        AppCache.userInfo.authDecrypted = AppCache.userInfo.azureToken.refresh_token;\n\n                        if (AppCache.userInfo.azureToken.refresh_token) {\n                            AppCacheLogonAzure.Relog(AppCache.userInfo.azureToken.refresh_token);\n                        }\n                    }\n                } catch (e) { }\n            }\n        }\n\n        // OIDC Bearer \n        if (AppCache.userInfo.logonData && AppCache.userInfo.logonData.type === 'openid-connect') {\n            let tokenDataOIDC = localStorage.getItem('p9oidctoken');\n            if (tokenDataOIDC) {\n                try {\n                    AppCache.userInfo.oidcToken = JSON.parse(tokenData);\n                    AppCache.userInfo.oidcUser = AppCacheLogonOIDC._parseJwt(AppCache.userInfo.azureToken.id_token);\n                    AppCache.userInfo.authDecrypted = AppCache.userInfo.oidcToken.refresh_token;\n                } catch (e) { }\n            }\n        }\n\n        // localStorage.removeItem('p9azuretoken');\n        // localStorage.removeItem('p9azuretokenv2');\n        // localStorage.removeItem('p9oidctoken');\n        // localStorage.removeItem('p9logonData');\n    },\n\n    getUserInfo: function () {\n        // Fetch UserData\n        sap.n.Planet9.function({\n            id: dataSet,\n            method: 'GetUserInfo',\n            success: function (data) {\n                appCacheLog('Successfully received User Info from P9');\n                appCacheLog(data);\n                AppCache.afterUserInfo(false, data);\n            },\n            error: function (result, error) {\n                appCacheError('Error getting User Info (getUserInfo)');\n\n                // Cookie Disabled ? \n                if (result.status === 401) {\n                    console.error('getUserInfo: 401 Not authenticated. Please check system settings and security for cookie settings')\n                }\n\n                AppCache.afterUserInfo(true);\n            }\n        });\n\n    },\n\n    updateUserInfo: function () {\n        return new Promise(function (resolve) {\n            appCacheLog('AppCache.updateUserInfo: Starting');\n\n            // Fetch UserData\n            sap.n.Planet9.function({\n                id: dataSet,\n                method: 'GetUserInfo',\n                success: function (userInfo) {\n                    appCacheLog('AppCache.updateUserInfo: Successfully received User Info from P9');\n                    appCacheLog(userInfo);\n\n                    if (userInfo && userInfo.length) {\n                        let u = userInfo[0];\n                        let user = ModelData.FindFirst(AppCacheUsers, 'username', u.username);\n\n                        if (user) {\n                            user = Object.assign({}, user, {\n                                group: u.group || [],\n                                roles: u.roles || [],\n                                language: u.language,\n                                mobile: u.mobile,\n                                phone: u.phone,\n                                email: u.email,\n                                name: u.name,\n                            });\n\n                            AppCacheUserActionText.setText(user.name || user.username);\n                            ModelData.Update(AppCacheUsers, 'username', user.username, user);\n                            setCacheAppCacheUsers();\n                        }\n                    }\n                    resolve('Ok');\n                },\n                error: function (result, _err) {\n                    appCacheError('Error getting User Info from (updateUserInfo)');\n                    appCacheError(result);\n                    resolve('Error');\n                }\n            });\n        });\n    },\n\n    afterUserInfo: function (offline, data) {\n        let userData = '';\n\n        if (offline && !AppCache.isMobile) {\n            getCacheAppCacheUsers();\n            userData = modelAppCacheUsers.oData[0];\n        } else {\n            if (data) {\n                userData = data[0];\n                ModelData.Update(AppCacheUsers, 'username', data[0].username, userData);\n                setCacheAppCacheUsers();\n            }\n        }\n\n        sap.ui.core.BusyIndicator.hide();\n        AppCache_inPassword.setValue();\n\n        if (AppCache.loginApp) AppCacheShellUI.setAppWidthLimited(true);\n\n        // Azure/OIDC - No PIN Code\n        if (!AppCache.enablePasscode) {\n            if (AppCache.userInfo && AppCache.userInfo.azureToken) userData.azureToken = AppCache.userInfo.azureToken;\n            if (AppCache.userInfo && AppCache.userInfo.azureUser) userData.azureUser = AppCache.userInfo.azureUser;\n            if (AppCache.userInfo && AppCache.userInfo.oidcToken) userData.oidcToken = AppCache.userInfo.oidcToken;\n            if (AppCache.userInfo && AppCache.userInfo.oidcUser) userData.oidcUser = AppCache.userInfo.oidcUser;\n\n            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n\n            if (AppCache.enablePwa && AppCache.userInfo.logonData.type === 'azure-bearer') {\n                AppCacheLogonAzure.Signout();\n            }\n\n            if (AppCache.enablePwa && AppCache.userInfo.logonData.type === 'openid-connect') {\n                AppCacheLogonOIDC.Signout();\n            }\n\n        }\n\n        // User Information\n        if (userData) AppCache.userInfo = userData;\n        AppCache.setUserInfo();\n\n        // Desktop \n        if (!AppCache.isMobile) {\n\n            AppCache.translate(AppCache.userInfo.language);\n\n            cacheLoaded = 0;\n            getCacheAppCacheTiles(true);\n            getCacheAppCacheCategory(true);\n            getCacheAppCacheCategoryChild(true);\n            getCacheAppCacheTilesRun(true);\n            getCacheAppCacheTilesFav(true);\n            getCacheAppCacheCustomization(true);\n\n            (function () {\n                function waitForCache() {\n                    if (cacheLoaded >= 6) {\n                        AppCache.Update();\n                    } else {\n                        setTimeout(waitForCache, 50);\n                    }\n                }\n                waitForCache();\n            })();\n\n        } else {\n\n            // Translate if Mobile and not PIN Code\n            if (!AppCache.enablePasscode) {\n                AppCache.translate(AppCache.userInfo.language);\n            }\n\n            if (AppCache.enablePasscode) {\n                AppCache.setEnablePasscodeScreen();\n            } else {\n                NumPad.Verify = true;\n                AppCacheShellUser.setEnabled(true);\n                AppCacheUserActionLogoff.setVisible(true);\n                if (AppCache.biometricAuthentication) sap.n.Fingerprint.saveBasicAuth();\n                AppCache.Update();\n            }\n\n        }\n    },\n\n    clearPasscodeInputs: function () {\n        const p1 = AppCache_inPasscode1;\n        const p2 = AppCache_inPasscode2;\n\n        p1.setValue().setValueState('None');\n        p2.setValue().setValueState('None');\n    },\n\n    SetPasscode: function () {\n        const p1 = AppCache_inPasscode1;\n        const p2 = AppCache_inPasscode2;\n\n        const v1 = p1.getValue().trim();\n        const v2 = p2.getValue().trim();\n\n        const v1Valid = isPincodeValid(v1);\n        const v2Valid = isPincodeValid(v2);\n\n        if (!v1Valid.isValid && v1Valid.errorMessage) {\n            showPincodeError(v1Valid.errorMessage);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        if (!v2Valid.isValid && v2Valid.errorMessage) {\n            showPincodeError(v2Valid.errorMessage);\n            AppCache.clearPasscodeInputs();\n            return p2.focus();\n        }\n\n        if (!v1) {\n            showPincodeError(pincodeEntryErrs().newPasscode, p1);\n            return p1.focus();\n        }\n\n        if (!v2) {\n            showPincodeError(pincodeEntryErrs().repeatPasscode, p2);\n            return p2.focus();\n        }\n\n        if (v2.length !== AppCache.passcodeLength) {\n            showPincodeError(pincodeEntryErrs().passcodeTooShort);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        if (v1 !== v2) {\n            showPincodeError(pincodeEntryErrs().passcodeNoMatch);\n            AppCache.clearPasscodeInputs();\n            return p1.focus();\n        }\n\n        // Clear Values\n        AppCache.Passcode = p1.getValue();\n        setTimeout(AppCache.clearPasscodeInputs, 1000);\n\n        // Store Authentication\n        const key = generatePBKDF2Key(AppCache.Passcode, AppCache.deviceID)\n        const encrypted = encryptAES(AppCache.Auth, key.toString());\n        AppCache.Encrypted = encrypted.toString();\n\n        // User Data \n        if (isCordova() && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n            let sksKey = AppCache.AppID + '-' + AppCache.userInfo.username;\n            cordova.plugins.SecureKeyStore.set(function (res) { }, function (error) {\n                AppCache.userInfo.auth = encrypted.toString();\n            }, sksKey, encrypted.toString());\n        } else {\n            AppCache.userInfo.auth = encrypted.toString();\n        }\n\n        // Store data to user \n        if (isCordova() && !window.navigator.simulator && AppCache.biometricAuthentication) AppCache.userInfo.biometric = true;\n\n        // Logon Type \n        if (AppCache.samlData) {\n            AppCache.userInfo.logonData = AppCache.samlData;\n            AppCache.userInfo.logonData.type = 'saml';\n        } else {\n            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n        }\n\n        // Only Biometric for 1. User\n        if (modelAppCacheUsers.oData.length > 1) AppCache.userInfo.biometric = false;\n        if (modelAppCacheUsers.oData.length === 1 && modelAppCacheUsers.oData[0].username !== AppCache.userInfo.username) AppCache.userInfo.biometric = false;\n\n        // Save User Data  \n        setCacheAppCacheUsers();\n        modelAppCacheUsers.refresh();\n\n        // PWA - Azure \n        if (AppCache.enablePwa && AppCache.userInfo.logonData.type === 'azure-bearer') {\n            AppCacheLogonAzure.Signout();\n        }\n\n        // PWA - OIDC \n        if (AppCache.enablePwa && AppCache.userInfo.logonData.type === 'openid-connect') {\n            AppCacheLogonOIDC.Signout();\n        }\n\n        // Store passcode to OS SAMKeychain library or Android SecureStorage\n        if (isCordova() && !window.navigator.simulator && AppCache.biometricAuthentication) {\n\n            // Set OS SAMKeychain library and Android SecureStorage key\n            let serviceKey = AppCache.userInfo.username;\n            let dialogText = AppCache_tEnableFingerprint.getText();\n\n            if (sap.ui.Device.os.ios && sap.ui.Device.os.version >= 11 && device && device.model && device.model.indexOf('iPhone10') > 0) {\n                dialogText = AppCache_tEnableFaceId.getText();\n            }\n\n            if (sap.ui.Device.os.android && FingerprintAuth) {\n\n                try {\n                    FingerprintAuth.isAvailable(function (result) {\n\n                        if (result.isAvailable && result.hasEnrolledFingerprints) {\n\n                            // Prevent soft keyboard\n                            p1.setEnabled(false);\n                            p2.setEnabled(false);\n\n                            // Get user language\n                            let pluginLanguage = sap.n.Fingerprint.android.getLanguage(AppCache.userInfo.language);\n\n                            // Biometric authentication config\n                            let encryptConfig = {\n                                clientId: AppCache.AppID,\n                                username: serviceKey,\n                                password: AppCache.Passcode,\n                                disableBackup: true,\n                                maxAttempts: 5,\n                                locale: pluginLanguage,\n                                userAuthRequired: true,\n                                dialogMessage: dialogText\n                            };\n\n                            // Encrypt\n                            FingerprintAuth.encrypt(encryptConfig, function (result) {\n                                // Encryption success\n                                if (result.withFingerprint || result.withBackup) {\n                                    AppCache.userInfo.token = result.token;\n                                    setCacheAppCacheUsers();\n                                    AppCache.setEnablePasscodeEntry();\n                                } else {\n                                    AppCache.biometricAuthentication = false;\n                                    AppCache.userInfo.biometric = false;\n                                    setCacheAppCacheUsers();\n                                    AppCache.setEnablePasscodeEntry();\n                                }\n                            }, function (error) {\n                                AppCache.biometricAuthentication = false;\n                                AppCache.userInfo.biometric = false;\n                                setCacheAppCacheUsers();\n                                AppCache.setEnablePasscodeEntry();\n                            });\n                        } else {\n                            AppCache.biometricAuthentication = false;\n                            AppCache.userInfo.biometric = false;\n                            setCacheAppCacheUsers();\n                            AppCache.setEnablePasscodeEntry();\n                        }\n                    }, function (error) {\n                        AppCache.biometricAuthentication = false;\n                        AppCache.userInfo.biometric = false;\n                        setCacheAppCacheUsers();\n                        AppCache.setEnablePasscodeEntry();\n                    });\n                } catch (error) {\n                    AppCache.biometricAuthentication = false;\n                    AppCache.userInfo.biometric = false;\n                    setCacheAppCacheUsers();\n                    AppCache.setEnablePasscodeEntry();\n                }\n\n            } else if (sap.ui.Device.os.ios && typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureKeyStore && typeof CID !== 'undefined') {\n\n                // Prevent soft keyboard\n                p1.setEnabled(false);\n                p2.setEnabled(false);\n\n                CID.checkAuth(dialogText, function (res) {\n\n                    if (res == 'success') {\n                        cordova.plugins.SecureKeyStore.set(function (res) {\n                            AppCache.setEnablePasscodeEntry();\n                        }, function (error) {\n                            console.log(error);\n                            AppCache.biometricAuthentication = false;\n                            AppCache.userInfo.biometric = false;\n                            setCacheAppCacheUsers();\n                            AppCache.setEnablePasscodeEntry();\n                        }, serviceKey, AppCache.Passcode);\n                    } else {\n                        console.log(res);\n                        AppCache.biometricAuthentication = false;\n                        AppCache.userInfo.biometric = false;\n                        setCacheAppCacheUsers();\n                        AppCache.setEnablePasscodeEntry();\n                    }\n\n                }, function (error) {\n                    console.log(error);\n                    AppCache.biometricAuthentication = false;\n                    AppCache.userInfo.biometric = false;\n                    setCacheAppCacheUsers();\n                    AppCache.setEnablePasscodeEntry();\n                });\n\n            } else {\n                AppCache.biometricAuthentication = false;\n                AppCache.userInfo.biometric = false;\n                setCacheAppCacheUsers();\n                AppCache.setEnablePasscodeEntry();\n            }\n\n        } else {\n            AppCache.setEnablePasscodeEntry();\n        }\n    },\n\n    RemoveAllCache: function () {\n\n        appCacheLog('AppCache.RemoveAllCache triggered');\n\n        // Remove iOS SAMKeychain library and Android SecureStorage keys\n        if (isCordova() && !window.navigator.simulator) {\n\n            if (sap.ui.Device.os.ios || sap.ui.Device.os.android) {\n\n                // KeyChain & SecureStorage\n                if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && cordova.plugins.SecureKeyStore && modelAppCacheUsers.oData) {\n\n                    for (i = 0; i < modelAppCacheUsers.oData.length; i++) {\n\n                        let sksKey = AppCache.AppID + '-' + modelAppCacheUsers.oData[i].username;\n\n                        cordova.plugins.SecureKeyStore.remove(function (res) {\n                        }, function (error) {\n                            console.error(error);\n                        }, sksKey);\n                    }\n                }\n\n                let serviceKey;\n\n                // FingerprintAuth.delete\n                if (window.FingerprintAuth) {\n                    modelAppCacheUsers.oData.forEach(function (data) {\n                        if (!data.biometric) return true;\n                        serviceKey = data.username;\n                        try {\n                            FingerprintAuth.delete({\n                                clientId: AppCache.AppID,\n                                username: serviceKey\n                            }, function (result) {\n\n                            }, function (error) {\n                                console.error(error);\n                            });\n                        } catch (error) {\n                            console.error(error);\n                        }\n                    });\n                }\n\n            }\n\n        }\n\n        // LocalStorage\n        localStorage.clear();\n\n        // IndexedDB\n        if (typeof p9Database !== 'undefined' && p9Database !== null) {\n            let db, tx, store;\n\n            db = p9Models.result;\n\n            tx = db.transaction('model', 'readwrite');\n            store = tx.objectStore('model');\n            store.clear();\n\n            db = p9Views.result;\n            tx = db.transaction('view', 'readwrite');\n            store = tx.objectStore('view');\n            store.clear();\n        }\n\n        // Old implementation\n        if (typeof p9ModelsDB !== 'undefined') p9ModelsDB.p9Models.clear();\n        if (typeof p9ViewsDB !== 'undefined') p9ViewsDB.p9Views.clear();\n\n        modelAppCacheUsers.setData([]);\n        modelAppCacheData.setData([]);\n        modelAppCacheTiles.setData([]);\n        modelAppCacheTilesRun.setData([]);\n        modelAppCacheCategory.setData([]);\n        modelAppCacheCategoryChild.setData([]);\n\n    },\n\n    Update: function () {\n        appCacheLog('AppCache.Update: Starting');\n        setiOSPwaIcons();\n\n        let afterPromise = function () {\n            if (AppCache.isMobile) {\n                appCacheLog('AppCache.Update: Starting mobile');\n                AppCache.restrictedDisable();\n            } else {\n                appCacheLog('AppCache.Update: Starting desktop');\n                AppCache.UpdateGetData();\n            }\n\n            // PushNotification\n            try {\n                // Mobile \n                if (AppCache.enablePush && isCordova()) {\n                    setTimeout(function () {\n                        if (AppCache.isRestricted) return;\n                        appCacheLog('PushNotifications: Starting setup mobile');\n                        sap.n.Push.setupPush();\n                    }, 1000 * 3);\n                }\n\n                // Desktop\n                if (typeof setupNotifications === 'function') {\n                    setTimeout(function () {\n                        if (AppCache.isRestricted) return;\n                        appCacheLog('PushNotifications: Starting setup desktop');\n                        setupNotifications();\n                    }, 1000 * 3);\n                }\n\n            } catch (e) {\n                console.log(e);\n            }\n\n            // Auto Update \n            if (AppCache.enableAutoUpdate) AppCache.AutoUpdateMobileApp();\n\n            // Enhancement\n            if (sap.n.Enhancement.AfterUpdate) {\n                try {\n                    sap.n.Enhancement.AfterUpdate();\n                } catch (e) {\n                    appCacheError('Enhancement AfterUpdate ' + e);\n                }\n            }\n\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.BeforeUpdate) {\n            try {\n                let actions = [];\n                actions.push(sap.n.Enhancement.BeforeUpdate());\n                Promise.all(actions).then(function (values) {\n                    afterPromise();\n                });\n            } catch (e) {\n                appCacheError('Enhancement BeforeUpdate ' + e);\n            }\n        } else {\n            afterPromise();\n        }\n\n    },\n\n    UpdateGetData: function () {\n        // Wrapped this in a promise so apps that use UpdateGetData can determine when it has completed.\n        return new Promise(function (resolve) {\n            appCacheLog('AppCache.UpdateGetData: Starting');\n\n            if (AppCache.StartApp) {\n                // Start App\n                sap.n.Launchpad.currentTile = {\n                    id: AppCache.StartApp.toUpperCase(),\n                };\n\n                AppCacheShellUI.setAppWidthLimited(false);\n                sap.ui.core.BusyIndicator.hide();\n            } else if (AppCache.StartWebApp) {\n                // Start WebApp\n                AppCacheShellUI.setAppWidthLimited(false);\n                sap.ui.core.BusyIndicator.hide();\n            } else {\n                // move after sap.n.Customizations.init\n                // sap.n.Launchpad.BuildMenu();\n                if (!AppCache.isPublic && !modelAppCacheTiles.oData.length) busyDialogStartup.open();\n            }\n\n            // Payload\n            let dataRequest = {\n                deviceType: sap.n.Launchpad.deviceType(),\n                launchpad: AppCache.launchpadID,\n                apps: []\n            }\n\n            // Save Current Tiles/Category\n            currCategory = JSON.parse(JSON.stringify(modelAppCacheCategory.oData));\n            currCategoryChild = JSON.parse(JSON.stringify(modelAppCacheCategoryChild.oData));\n            currTiles = JSON.parse(JSON.stringify(modelAppCacheTiles.oData));\n            currFav = JSON.parse(JSON.stringify(modelAppCacheTilesFav.oData));\n\n            // Hide BusyIndicator of already cached data \n            if (currTiles.length) sap.ui.core.BusyIndicator.hide();\n\n            // Duplicate Check & System Split\n            let uniqueApps = {};\n            let appSystems = {};\n\n            Array.isArray(modelAppCacheData.oData) && modelAppCacheData.oData.forEach(function (data) {\n                if (!data.appPath || data.appPath === 'null') data.appPath = '';\n                if (!uniqueApps[data.application + '|' + data.appPath]) uniqueApps[data.application + '|' + data.appPath] = data;\n            });\n\n            for (let key in uniqueApps) {\n                let keyData = key.split('|');\n                let appPath = keyData[1];\n\n                if (appPath) {\n                    if (!appSystems[appPath]) appSystems[appPath] = [];\n                    appSystems[appPath].push(uniqueApps[key]);\n                } else {\n                    dataRequest.apps.push(uniqueApps[key]);\n                }\n            }\n\n            appCacheLog('AppCache.UpdateGetData: Apps to check update before getTiles');\n            appCacheLog(dataRequest);\n\n            // Get Tiles \n            sap.n.Planet9.function({\n                id: dataSet,\n                method: 'GetTiles',\n                data: dataRequest,\n                success: function (data) {\n                    busyDialogStartup.close();\n\n                    if (data.status && isLaunchpadNotFound(data.status)) {\n                        showLaunchpadNotFoundError(data.status);\n                        return;\n                    }\n\n                    // Blackout\n                    if (data.blackout) {\n                        sap.m.MessageBox.show(data.blackout.message, {\n                            title: data.blackout.title || 'System Status',\n                            onClose: function (oAction) {\n                                if (AppCache.isMobile) {\n                                    if (AppCache.enablePasscode) {\n                                        AppCache.Lock();\n                                    } else {\n                                        AppCache.Logout();\n                                    }\n                                } else {\n                                    topShell.setBlocked(true);\n                                }\n                            }\n                        });\n                        return;\n                    }\n\n                    if (!data.categoryChilds) data.categoryChilds = [];\n\n                    modelAppCacheData.setData(data.apps);\n                    modelAppCacheTiles.setData(data.tiles);\n                    modelAppCacheCategory.setData(data.category);\n                    modelAppCacheCategoryChild.setData(data.categoryChilds);\n\n                    if (data.fav && data.fav.tiles) {\n                        modelAppCacheTilesFav.setData(data.fav.tiles);\n                    } else {\n                        modelAppCacheTilesFav.setData([]);\n                    }\n\n                    // Check if UI5 Version Changed \n                    let ui5Version = localStorage.getItem('p9ui5version');\n                    if (ui5Version !== sap.ui.version) {\n                        data.apps.forEach(function (app) {\n                            app.invalid = true;\n                        });\n                        localStorage.setItem('p9ui5version', sap.ui.version);\n                    }\n\n                    // Get App Update from Other Systems\n                    let action = [];\n                    for (let key in appSystems) { action.push(AppCache.UpdateGetDataRemote(appSystems[key])); }\n                    AppCache.hideGlobalAjaxError = true;\n                    Promise.all(action).then(function (values) {\n                        AppCache.hideGlobalAjaxError = false;\n\n                        // Merge App Check Data from Remote Systems \n                        values.forEach(function (value) {\n                            // SAP \n                            if (value && value.result && value.result.apps) {\n                                value.result.apps.forEach(function (app) {\n                                    modelAppCacheData.oData.push({\n                                        appType: app.apptype,\n                                        application: app.application,\n                                        updatedAt: app.updatedat,\n                                        invalid: app.invalid,\n                                        language: app.language,\n                                        appPath: app.apppath\n                                    });\n                                });\n                            } else {\n                                if (value && value.length) ModelData.AddArray(AppCacheData, value);\n                            }\n                        });\n\n                        // Save Cache\n                        setCacheAppCacheData();\n                        setCacheAppCacheTiles();\n                        setCacheAppCacheCategory();\n                        setCacheAppCacheCategoryChild();\n                        setCacheAppCacheTilesFav();\n\n                        appCacheLog('AppCache.UpdateGetData: after getTiles and saved to database');\n\n                        sap.n.Ajax.SuccessGetMenu();\n                        sap.ui.core.BusyIndicator.hide();\n\n                        // Check Update of StartApp \n                        data.apps.forEach(function (app) {\n                            if (sap.n.Launchpad.currentTile &&\n                                sap.n.Launchpad.currentTile.actionApplication &&\n                                app.application.toLowerCase() === sap.n.Launchpad.currentTile.actionApplication.toLowerCase() &&\n                                app.invalid) AppCache.Load(sap.n.Launchpad.currentTile.actionApplication);\n                        });\n\n                        // Fetch all Apps if on Mobile \n                        if (AppCache.isMobile && !AppCache.enablePwa) {\n                            data.tiles.forEach(function (tile) {\n                                if (tile.actionApplication || tile.tileApplication) sap.n.Ajax.loadApps(tile);\n                            });\n                        }\n\n                        if (AppCache.StartApp) {\n                            AppCache.Load(AppCache.StartApp);\n                            // Start WebApp\n                        } else if (AppCache.StartWebApp) {\n                            AppCache.LoadWebApp(AppCache.StartWebApp);\n                        }\n\n                        resolve();\n                    });\n\n                    sap.n.Customization.init(data).then(() => {\n                        if (!AppCache.StartApp && !AppCache.StartWebApp) {\n                            sap.n.Launchpad.BuildMenu();\n                        }\n\n                        sap.n.Customization.Popover.init();\n                    });\n                },\n                error: function (result, status) {\n                    sap.ui.core.BusyIndicator.hide();\n                    busyDialogStartup.close();\n\n                    // We must load existing versions of the start app if we failed to fetch new ones\n                    if (AppCache.StartApp) {\n                        AppCache.Load(AppCache.StartApp);\n                        // Start WebApp\n                    } else if (AppCache.StartWebApp) {\n                        AppCache.LoadWebApp(AppCache.StartWebApp);\n                    }\n\n                    if (result.responseJSON && result.responseJSON.status && isLaunchpadNotFound(result.responseJSON.status)) {\n                        showLaunchpadNotFoundError(result.responseJSON.status);\n                        return;\n                    }\n\n                    resolve();\n                }\n            });\n        });\n    },\n\n    UpdateGetDataRemote: function (apps) {\n        return new Promise(function (resolve, reject) {\n            let url = '';\n            let headers = {};\n            let dataRequest = apps;\n            let app = apps[0];\n            let dataTile = ModelData.FindFirst(AppCacheTiles, 'urlApplication', app.appPath);\n\n            if (!dataTile) resolve();\n            if (!apps.length) resolve();\n\n            // URL\n            if (dataTile.urlType === 'SAP') {\n                headers.NeptuneServer = dataTile.urlApplication;\n                url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + '/neptune/api/server/app_check_update') + '/' + dataTile.urlAuth;\n            } else {\n                url = '/api/functions/Launchpad/CheckUpdate?p9Server=' + dataTile.urlApplication;\n                url = '/proxy/remote/' + encodeURIComponent(dataTile.urlApplication + url) + '/' + dataTile.urlAuth;\n            }\n\n            // Authentication ID\n            headers['X-Auth-In-P9'] = dataTile.urlAuth;\n\n            // Enhancement\n            if (sap.n.Enhancement.RemoteSystemAuth) {\n                try {\n                    sap.n.Enhancement.RemoteSystemAuth(headers);\n                } catch (e) {\n                    appCacheError('Enhancement RemoteSystemAuth ' + e);\n                }\n            }\n\n            jsonRequest({\n                url: url,\n                data: JSON.stringify(dataRequest),\n                headers: headers,\n                success: function (data) {\n                    resolve(data);\n                },\n                error: function (result, status) {\n                    resolve([]);\n                }\n            });\n        });\n    },\n\n    enableExternalTools: function () {\n\n        // SAP Conversational AI\n        if (AppCache.config.sapcai_enabled && AppCache.config.sapcai_channelid && AppCache.config.sapcai_token && !sap.n.Launchpad.isPhone()) {\n\n            window.webchatMethods = {\n                getMemory: function (conversationId) {\n                    let userName = AppCache.userInfo.name || 'anonymous';\n                    let userId = AppCache.userInfo.username || 'anonymous';\n                    let userLanguage = AppCache.userInfo.language || 'na';\n                    let customData = AppCache.sapCAICustomData || {};\n\n                    const memory = {\n                        userName: userName,\n                        userId: userId,\n                        userLanguage: userLanguage,\n                        customData: customData\n                    }\n\n                    return { memory: memory, merge: true }\n                }\n            }\n\n            if (!document.getElementById('cai-webchat')) {\n                let s = document.createElement('script');\n                s.setAttribute('id', 'cai-webchat');\n                s.setAttribute('src', 'https://cdn.cai.tools.sap/webchat/webchat.js');\n                s.setAttribute('channelId', AppCache.config.sapcai_channelid);\n                s.setAttribute('token', AppCache.config.sapcai_token);\n                document.body.appendChild(s);\n            } else {\n                let s = document.getElementById('cai-webchat');\n                s.setAttribute('channelId', AppCache.config.sapcai_channelid);\n                s.setAttribute('token', AppCache.config.sapcai_token);\n            }\n        } else {\n            if (document.getElementById('cai-webchat')) document.getElementById('cai-webchat').style.visibility = 'hidden';\n        }\n\n        // IBM Watson Assistant\n        if (AppCache.config.watson_enabled && AppCache.config.watson_integrationid && AppCache.config.watson_region && AppCache.config.watson_instanceid && !sap.n.Launchpad.isPhone()) {\n            window.watsonAssistantChatOptions = {\n                integrationID: AppCache.config.watson_integrationid,\n                region: AppCache.config.watson_region,\n                serviceInstanceID: AppCache.config.watson_instanceid,\n                onLoad: function (instance) { instance.render(); }\n            };\n\n            setTimeout(function () {\n                const t = document.createElement('script');\n                t.src = 'https://web-chat.global.assistant.watson.appdomain.cloud/loadWatsonAssistantChat.js';\n                document.head.appendChild(t);\n            });\n        }\n\n    },\n\n    disableExternalTools: function () {\n        // SAP Conversational AI\n        if (AppCache.config.sapcai_enabled) {\n            if (document.getElementById('cai-webchat')) {\n                let caiChat = document.getElementsByClassName('CaiAppChat')[0];\n                let caiExpander = document.getElementsByClassName('CaiAppExpander')[0];\n\n                if (caiChat && caiExpander) {\n                    caiChat.classList.remove('open');\n                    caiChat.classList.add('close');\n                    caiExpander.classList.remove('close');\n                    caiExpander.classList.add('open');\n                }\n            }\n        }\n\n        // IBM Watson Assistant\n        if (AppCache.config.watson_enabled) {\n            if (document.getElementById('WACWidget')) {\n                let watsonChat = document.getElementById('WACWidget');\n                let watsonExpander = document.getElementsByClassName('WACLauncher__ButtonContainer')[0];\n                // let watsonSvg = document.getElementsByClassName('WACLauncher__svg')[0];\n\n                if (watsonChat && watsonExpander) {\n                    watsonChat.classList.add('WACWidget--closed');\n                    watsonExpander.classList.remove('WACLauncher__ButtonContainer--open');\n                    // watsonSvg.classList.remove('ACLauncher__svg--open');\n                }\n            }\n        }\n    },\n\n    Home: function () {\n        location.hash = 'Home';\n    },\n\n    _Home: function () {\n        // Clear HashNavigation\n        location.hash = '';\n\n        let eventId;\n        let preventDefault = false;\n\n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id) {\n            eventId = sap.n.Launchpad.currentTile.id;\n        } else {\n            eventId = AppCache.CurrentApp.toUpperCase();\n        }\n\n        if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeHome) {\n            sap.n.Apps[eventId].beforeHome.forEach(function (data) {\n                let oEvent = new sap.ui.base.Event('beforeHome', new sap.ui.base.EventProvider());\n                data(oEvent);\n                if (oEvent.bPreventDefault) preventDefault = true;\n                oEvent = null;\n            });\n        }\n\n        // Default behaviour was avoided\n        if (preventDefault) return;\n\n        if (AppCache.StartApp) {\n            return;\n        }\n\n        sap.n.Launchpad.SelectHomeMenu();\n        sap.n.Launchpad.setHideHeader(false);\n        sap.n.currentView = '';\n\n        // Title\n        sap.n.Launchpad.SetHeader();\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n\n    },\n\n    Back: function () {\n        location.hash = 'Back';\n    },\n\n    _Back: function () {\n\n        // Clear HashNavigation\n        location.hash = '';\n\n        let eventId;\n        let preventDefault = false;\n\n        if (sap.n.Launchpad.currentTile && sap.n.Launchpad.currentTile.id) {\n            eventId = sap.n.Launchpad.currentTile.id;\n        } else {\n            eventId = AppCache.CurrentApp.toUpperCase();\n        }\n\n        if (sap.n.Apps[eventId] && sap.n.Apps[eventId].beforeBack) {\n            sap.n.Apps[eventId].beforeBack.forEach(function (data) {\n                let oEvent = new sap.ui.base.Event('beforeBack', new sap.ui.base.EventProvider());\n                data(oEvent);\n                if (oEvent.bPreventDefault) preventDefault = true;\n                oEvent = null;\n            });\n        }\n\n        // Default behaviour was avoided\n        if (preventDefault) return;\n\n        // Close Objects \n        AppCacheShellHelp.setVisible(false);\n        AppCacheShellDebug.setVisible(false);\n        sap.n.Shell.closeSidepanel();\n\n        // Navigate \n        if (AppCacheNav.getCurrentPage().sId.indexOf('page') > -1) {\n            AppCacheNav.back();\n        } else {\n\n            if (!sap.n.Launchpad.backApp) {\n                AppCache.Home();\n            } else if (sap.n.Launchpad.backApp && sap.n.currentView && sap.n.currentView.sViewName === sap.n.Launchpad.backApp.sViewName) {\n                AppCache.Home();\n            } else {\n                AppCacheNav.backToPage(sap.n.Launchpad.backApp);\n            }\n\n        }\n\n        //  Back Button - Only hide when top menu. \n        let cat = AppCacheNav.getCurrentPage().sId;\n        cat = cat.split('page')[1];\n\n        let top = ModelData.FindFirst(AppCacheCategory, 'id', cat);\n\n        if (top) {\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(false);\n            sap.n.Launchpad.setShellWidth();\n            sap.n.Launchpad.MarkTopMenu(top.id);\n            sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n        } else {\n            if (!sap.n.Launchpad.hideBackIcon) AppCacheShellBack.setVisible(true);\n            let sub = ModelData.FindFirst(AppCacheCategoryChild, 'id', cat);\n            sap.n.Launchpad.setShellWidth();\n            sap.n.Launchpad.handleAppTitle(sub.title);\n        }\n\n        sap.n.Launchpad.backApp = AppCacheNav.getCurrentPage();\n        sap.n.Launchpad.setHideHeader(false);\n\n        // Clear currentTile\n        sap.n.Launchpad.currentTile = {};\n        sap.n.currentView = '';\n\n        // Title\n        sap.n.Launchpad.SetHeader();\n\n    },\n\n    setEnablePasscodeEntry: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n\n        // Handle userInfo \n        if (modelAppCacheUsers.oData.length === 1) AppCache.userInfo = modelAppCacheUsers.oData[0];\n        AppCache.setUserInfo();\n\n        delete AppCache.userInfo.azureToken;\n        AppCache.translate(AppCache.userInfo.language);\n\n        AppCache_boxPasscodeEntry.setVisible(true);\n        AppCacheNav.to('AppCache_boxPasscodeEntry', 'fade');\n        AppCache.handleUserMenu();\n\n        // biometricAuthentication supported ? \n        appCacheLog('setEnablePasscodeEntry: Before biometric, enabled: ' + AppCache.biometricAuthentication);\n\n        if (!window.navigator.simulator && window.cordova !== undefined && AppCache.biometricAuthentication) {\n            const { os } = sap.ui.Device;\n            const fp = sap.n.Fingerprint;\n            if (os.ios && CID !== undefined) {\n                fp.ios.checkSupport();\n            } else if (os.android && window.FingerprintAuth) {\n                FingerprintAuth.isAvailable(fp.android.onSupported, fp.android.notSupported);\n            }\n        }\n\n        // Fetch Encrypted String\n        const { userInfo } = AppCache;\n\n        if (typeof cordova !== 'undefined') {\n            const c = cordova;\n            if (c !== undefined && c.plugins !== undefined && c.plugins.SecureKeyStore !== undefined) {\n                const sksKey = `${AppCache.AppID}-${userInfo.username}`;\n                c.plugins.SecureKeyStore.get(function (res) {\n                    AppCache.Encrypted = res;\n                    appCacheLog('setEnablePasscodeEntry: Got data from SecureKeyStorage');\n                }, function (err) {\n                    AppCache.Encrypted = userInfo.auth;\n                    appCacheLog(`setEnablePasscodeEntry: Error ${err}`);\n                }, sksKey);\n            }\n        } else {\n            AppCache.Encrypted = userInfo.auth;\n            appCacheLog('setEnablePasscodeEntry: Fallback solution');\n        }\n    },\n\n    setEnablePasscodeScreen: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCache_inPasscode1.setEnabled(true);\n        AppCache_inPasscode2.setEnabled(true);\n        AppCache_inPasscode1.setMaxLength(AppCache.passcodeLength);\n        AppCache_inPasscode2.setMaxLength(AppCache.passcodeLength);\n        AppCache.handleUserMenu();\n\n        // PWA - Webauthn\n        if (AppCache.enablePwa && AppCache.enablePasscode && AppCache.config.enableWebAuth && (window.PublicKeyCredential !== undefined || typeof window.PublicKeyCredential === 'function')) {\n\n            AppCache.userInfo.biometric = true;\n            if (modelAppCacheUsers.oData.length > 1) AppCache.userInfo.biometric = false;\n            if (modelAppCacheUsers.oData.length === 1 && modelAppCacheUsers.oData[0].username !== AppCache.userInfo.username) AppCache.userInfo.biometric = false;\n\n            if (AppCache.userInfo.biometric) {\n\n                sap.n.Webauthn.register(AppCache.userInfo).then(function (userid) {\n                    if (userid === 'ERROR') {\n                        AppCacheNav.to('AppCache_boxPasscode', 'fade');\n                    } else {\n                        // Store Authentication\n                        const key = generatePBKDF2Key(userid, AppCache.deviceID)\n                        const encrypted = encryptAES(AppCache.Auth, key.toString());\n                        AppCache.Encrypted = encrypted.toString();\n                        AppCache.userInfo.auth = encrypted.toString();\n\n                        // Logon Type \n                        if (AppCache.samlData) {\n                            AppCache.userInfo.logonData = AppCache.samlData;\n                            AppCache.userInfo.logonData.type = 'saml';\n                        } else {\n                            AppCache.userInfo.logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n                        }\n\n                        modelAppCacheUsers.oData[0].webauthid = userid;\n                        setCacheAppCacheUsers();\n                        AppCache.Update();\n                    }\n                })\n\n            } else {\n                AppCacheNav.to('AppCache_boxPasscode', 'fade');\n            }\n\n        } else {\n            AppCacheNav.to('AppCache_boxPasscode', 'fade');\n        }\n    },\n\n    setEnablePasswordScreen: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCacheNav.to('AppCache_boxPassword', 'fade');\n        AppCache.handleUserMenu();\n    },\n\n    setEnableUsersScreen: function () {\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n        AppCacheShellUser.setIcon('sap-icon://fa-solid/user-circle');\n        AppCacheNav.to('AppCache_boxUsers', 'fade');\n        AppCache.handleUserMenu();\n        AppCache.calculateUserScreen();\n    },\n\n    calculateUserScreen: function () {\n\n        if (modelAppCacheUsers.oData.length > 1) {\n            toolUsersSort.setVisible(true);\n            toolUsersFilter.setVisible(true);\n            setTimeout(function () {\n                toolUsersFilter.focus();\n            }, 250);\n        } else {\n            toolUsersSort.setVisible(false);\n            toolUsersFilter.setVisible(false);\n        }\n\n        // Calculate Heights \n        if (sap.n.Launchpad.isPhone()) {\n\n            if (modelAppCacheUsers.oData.length <= 1) {\n                AppCacheUserScroll.setHeight('100px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length <= 2) {\n                AppCacheUserScroll.setHeight('200px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length <= 3) {\n                AppCacheUserScroll.setHeight('300px');\n                return;\n            }\n\n            if (modelAppCacheUsers.oData.length > 4) {\n                AppCacheUserScroll.setHeight('400px');\n                return;\n            }\n\n        }\n\n        // Desktop\n        if (modelAppCacheUsers.oData.length <= 1) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('100px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 2) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('200px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 3) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('300px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 4) {\n            AppCache_boxLogonUsers.setHeight('75%');\n            AppCacheUserScroll.setHeight('400px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length <= 5) {\n            AppCache_boxLogonUsers.setHeight('100%');\n            AppCacheUserScroll.setHeight('500px');\n            return;\n        }\n\n        if (modelAppCacheUsers.oData.length > 5) {\n            AppCache_boxLogonUsers.setHeight('100%');\n            AppCacheUserScroll.setHeight('600px');\n        }\n    },\n\n    setEnableLogonScreen: function () {\n        AppCache.samlData = false;\n\n        closeContentNavigator();\n        sap.n.Launchpad.setHideTopButtons(true);\n\n        // Login App \n        if (AppCache.loginApp !== '' && AppCache.loginApp !== 'null') {\n            if (AppCache_boxLogonCustom.getContent().length === 0) {\n                AppCache.loginApp();\n                AppCache.setSettings(true);\n            }\n            AppCacheNav.to('AppCache_boxLogonCustom', 'fade');\n            AppCacheShellUI.setAppWidthLimited(false);\n        } else {\n            AppCacheNav.to('AppCache_boxLogon', 'fade');\n        }\n\n        AppCache.handleUserMenu();\n\n        // Biometric \n        if (AppCache.biometricAuthentication && !AppCache.enablePasscode) sap.n.Fingerprint.getBasicAuth();\n\n        AppCacheNav.rerender();\n\n    },\n\n\n    handleUserMenu: function () {\n        [\n            AppCacheUserActionSettings, AppCacheUserActionSwitch, AppCacheUserActionLock,\n            AppCacheUserActionPassword, AppCacheUserActionLogin, AppCacheUserActionLogoff,\n            AppCacheUserActionEditScreen,\n        ].forEach(function (ua) {\n            ua.setVisible(false);\n        });\n\n        AppCacheShellUser.setEnabled(true);\n        NumPad.KeypressHandlerRemove();\n\n        const pageId = AppCacheNav.getCurrentPage().sId;\n\n        function setAppWidth() {\n            if ([\n                'AppCache_boxLogon', 'AppCache_boxPassword', 'AppCache_boxPasscode',\n                'AppCache_boxPasscodeEntry', 'AppCache_boxUsers', 'AppCache_boxCaptcha'\n            ].includes(pageId)) {\n                AppCacheShellUI.setAppWidthLimited(true);\n            }\n        }\n\n        function setShellTitle() {\n            const titles = {\n                'AppCache_boxLogon': AppCache_Screen_Login.getText(),\n                'AppCache_boxPasscode': AppCache_Screen_PIN.getText(),\n                'AppCache_boxPasscodeEntry': AppCache_Screen_PINEntry.getText(),\n                'AppCache_boxUsers': AppCache_Screen_Users.getText(),\n            };\n            if (sap.n.Launchpad.isPhone() && titles[pageId] !== undefined) {\n                AppCacheShellTitle.setText(titles[pageId]);\n            }\n        }\n\n        function setSwitchUserOption() {\n            if (['AppCache_boxPassword', 'AppCache_boxCaptcha', 'AppCache_boxPasscodeEntry'].includes(pageId)) {\n                AppCacheUserActionSwitch.setVisible(true);\n            }\n        }\n\n        function setShellUserIcon() {\n            if (['AppCache_boxPasscode', 'AppCache_boxUsers'].includes(pageId)) {\n                AppCacheShellUser.setEnabled(false);\n            }\n        }\n\n        function handleNumPadKeyEvents() {\n            if (pageId === 'AppCache_boxPasscodeEntry') {\n                NumPad.KeypressHandlerSet();\n                butNumpad1.focus();\n            }\n        }\n\n        setAppWidth();\n        setShellTitle();\n        setSwitchUserOption();\n        setShellUserIcon()\n\n        if (['AppCache_boxLogon', 'AppCache_boxLogonCustom'].includes(pageId)) {\n            if (AppCache.enablePasscode && modelAppCacheUsers.oData.length > 0) {\n                AppCacheUserActionSwitch.setVisible(true);\n            } else {\n                AppCacheShellUser.setEnabled(false);\n            }\n        }\n\n        handleNumPadKeyEvents();\n    },\n\n    getSettings: function () {\n\n        appCacheLog('Getting settings from P9 server');\n\n        let url = AppCache.Url + '/user/logon/types?launchpad=' + AppCache.launchpadID;\n        if (AppCache.mobileClient) url += '&mobileclient=' + AppCache.mobileClient;\n\n        request({\n            type: 'GET',\n            url: url,\n            success: function (data) {\n                appCacheLog('Successfully received settings from P9 server');\n\n                // Save Data \n                AppCache.currentSettings = modelDataSettings.oData;\n                modelDataSettings.setData(data);\n                setCacheDataSettings();\n\n                // Handle Startup Actions \n                AppCache.setSettings(true);\n            },\n            error: function (result, status) {\n                appCacheError('Error receiving settings from P9 server, using cached data');\n            }\n        });\n\n    },\n\n    setSettings: function (skipStartup) {\n\n        if (!modelDataSettings.oData.settings) {\n            if (!skipStartup) AppCache.Startup();\n            return;\n        }\n\n        let data = modelDataSettings.oData;\n        let forceRestart = false;\n\n        // Enhancement\n        if (sap.n.Enhancement.BeforeSetSettingsMobile) {\n            try {\n                sap.n.Enhancement.BeforeSetSettingsMobile(data);\n            } catch (e) {\n                appCacheError('Enhancement BeforeSetSettingsMobile ' + e);\n            }\n        }\n\n        // Get System Name/Description \n        if (data.settings.name) txtFormLoginSubTitle1.setText(data.settings.name);\n        if (data.settings.description) txtFormLoginSubTitle2.setText(data.settings.description);\n\n        // Parse Logon Types\n        let idps = [];\n\n        data.logonTypes.sort(sort_by('description', false));\n\n        AppCache_loginTypes.removeAllItems();\n\n        if (!data.settingsLaunchpad.config.hideLoginLocal || !data.logonTypes.length) {\n            AppCache_loginTypes.addItem(new sap.ui.core.Item({\n                key: 'local',\n                text: 'Local'\n            }));\n        }\n\n        for (let i = 0, length = data.logonTypes.length; i < length; i++) {\n            if (data.logonTypes[i].show) {\n\n                if (data.logonTypes[i].type === 'saml') continue;\n                if (data.logonTypes[i].type === 'oauth2') continue;\n\n                AppCache_loginTypes.addItem(new sap.ui.core.Item({\n                    key: data.logonTypes[i].id,\n                    text: data.logonTypes[i].description\n                }));\n\n                if (!AppCache.config.hideLoginSelection) AppCache_loginTypes.setVisible(true);\n            }\n        }\n\n        if (AppCache.config && AppCache.config.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n        if (AppCache.defaultLoginIDP) AppCache_loginTypes.setSelectedKey(AppCache.defaultLoginIDP);\n\n        // Texts \n        if (data.customizing.length) {\n\n            if (data.customizing[0].txtLogin1Enable || data.customizing[0].txtLogin2Enable || data.customizing[0].txtLogin3Enable) {\n                panLinksPin.setVisible(true);\n                panLinksUsers.setVisible(true);\n                panLinksPass.setVisible(true);\n                panLinks.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin1Enable) {\n                linkText1.setText(data.customizing[0].txtLogin1Label);\n                linkText1.setVisible(true);\n                linkPassText1.setText(data.customizing[0].txtLogin1Label);\n                linkPassText1.setVisible(true);\n                linkPinText1.setText(data.customizing[0].txtLogin1Label);\n                linkPinText1.setVisible(true);\n                linkUsersText1.setText(data.customizing[0].txtLogin1Label);\n                linkUsersText1.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin2Enable) {\n                linkText2.setText(data.customizing[0].txtLogin2Label);\n                linkText2.setVisible(true);\n                linkSep1.setVisible(true);\n                linkPassText2.setText(data.customizing[0].txtLogin2Label);\n                linkPassText2.setVisible(true);\n                linkPassSep1.setVisible(true);\n                linkPinText2.setText(data.customizing[0].txtLogin2Label);\n                linkPinText2.setVisible(true);\n                linkPinSep1.setVisible(true);\n                linkUsersText2.setText(data.customizing[0].txtLogin2Label);\n                linkUsersText2.setVisible(true);\n                linkUsersSep1.setVisible(true);\n            }\n\n            if (data.customizing[0].txtLogin3Enable) {\n                linkText3.setText(data.customizing[0].txtLogin3Label);\n                linkText3.setVisible(true);\n                linkSep2.setVisible(true);\n                linkPassText3.setText(data.customizing[0].txtLogin3Label);\n                linkPassText3.setVisible(true);\n                linkPassSep2.setVisible(true);\n                linkPinText3.setText(data.customizing[0].txtLogin3Label);\n                linkPinText3.setVisible(true);\n                linkPinSep2.setVisible(true);\n                linkUsersText3.setText(data.customizing[0].txtLogin3Label);\n                linkUsersText3.setVisible(true);\n                linkUsersSep2.setVisible(true);\n            }\n\n        }\n\n        // AppCache - Launchpad\n        if (data.settingsLaunchpad) {\n\n            if (typeof data.settingsLaunchpad.enableNotifications !== 'undefined' && data.settingsLaunchpad.enableNotifications) AppCache.enablePush = data.settingsLaunchpad.enableNotifications;\n            if (typeof data.settingsLaunchpad.limitWidth !== 'undefined' && data.settingsLaunchpad.limitWidth) AppCache.limitWidth = data.settingsLaunchpad.limitWidth;\n            if (typeof data.settingsLaunchpad.startApp !== 'undefined') AppCache.StartApp = data.settingsLaunchpad.startApp;\n\n            // Config\n            if (data.settingsLaunchpad.config) {\n                if (data.settingsLaunchpad.config.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n                if (data.settingsLaunchpad.config.hideTopHeader) AppCache.hideTopHeader = true;\n                if (data.settingsLaunchpad.config.languages) sap.n.Launchpad.applyLanguages(data.settingsLaunchpad.config.languages);\n                if (data.settingsLaunchpad.config.loginTitle) txtFormLoginSubTitle1.setText(data.settingsLaunchpad.config.loginTitle);\n                if (data.settingsLaunchpad.config.loginSubTitle) txtFormLoginSubTitle2.setText(data.settingsLaunchpad.config.loginSubTitle);\n\n                // Enhancement\n                if (data.settingsLaunchpad.config.enhancement) {\n                    try {\n                        eval(data.settingsLaunchpad.config.enhancement);\n                    } catch (e) {\n                        console.log(e);\n                    }\n                }\n\n            }\n\n            if (data.settingsLaunchpad.layout) {\n                AppCache.layout = data.settingsLaunchpad.layout;\n                sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n            }\n\n        }\n\n        // AppCache - Mobile \n        if (data.settingsMobile) {\n\n            // Changes no restart \n            if (typeof data.settingsMobile.pincodeTries !== 'undefined') AppCache.numPasscode = data.settingsMobile.pincodeTries;\n            if (typeof data.settingsMobile.autolock !== 'undefined') AppCache.timerLock = data.settingsMobile.autolock;\n\n            if (typeof data.settingsMobile.resetPasswordUrl !== 'undefined' && data.settingsMobile.resetPasswordUrl) {\n                AppCache.passUrlReset = data.settingsMobile.resetPasswordUrl;\n                AppCache_resetPassword.setVisible(true);\n            } else {\n                AppCache_resetPassword.setVisible(false);\n            }\n\n            // Changes requires restart\n            if (typeof data.settingsMobile.pincode !== 'undefined') {\n                AppCache.enablePasscode = data.settingsMobile.pincode;\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile && AppCache.currentSettings.settingsMobile.pincode !== data.settingsMobile.pincode) forceRestart = true;\n            }\n\n            if (typeof data.settingsMobile.fingerprint !== 'undefined') {\n                AppCache.biometricAuthentication = data.settingsMobile.fingerprint;\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile && AppCache.currentSettings.settingsMobile.fingerprint !== data.settingsMobile.fingerprint) forceRestart = true;\n            }\n\n            // PIN Code\n            if (typeof data.settingsMobile.pincodeLength !== 'undefined' && AppCache.passcodeLength !== data.settingsMobile.pincodeLength) {\n                AppCache.passcodeLength = data.settingsMobile.pincodeLength;\n                modelAppCacheUsers.setData([]);\n                if (skipStartup && AppCache.currentSettings && AppCache.currentSettings.settingsMobile) forceRestart = true;\n            }\n\n            // Auto Update \n            if (data.settingsMobile.enableAutoUpdate) {\n                AppCache.enableAutoUpdate = data.settingsMobile.enableAutoUpdate;\n            } else {\n                AppCache.enableAutoUpdate = false;\n            }\n\n            // MobileActive Version\n            if (data.settingsMobile.activeVersion) {\n                AppCache.AppVersionActive = data.settingsMobile.activeVersion;\n                if (data.settingsMobile.builds && data.settingsMobile.builds.length) AppCache.AppVersionActiveID = data.settingsMobile.builds[0].id;\n            }\n\n        }\n\n        // Custom Login App - Mobile Client\n        if (AppCache.loginApp && AppCache_boxLogonCustom.getContent().length) {\n            if (AppCache.loginAppSetSettings) AppCache.loginAppSetSettings(modelDataSettings.oData);\n        }\n\n        // Set Logon Screen\n        sap.n.Utils.setLogonScreen();\n\n        // Startup\n        if (!skipStartup) {\n            AppCache.Startup();\n        } else {\n            if (forceRestart) {\n                sap.m.MessageToast.show(AppCache_tRestartForced.getText());\n                AppCache.Startup();\n            }\n        }\n\n        // Clear \n        AppCache.currentSettings = null;\n    },\n\n    Startup: function () {\n        // Check if CurrentConfig\n        if (!AppCache.CurrentConfig) {\n            sap.m.MessageToast.show(AppCache_tNoCurrentConfig.getText());\n            return;\n        }\n\n        // Enhancement\n        if (sap.n.Enhancement.global) {\n            try {\n                sap.n.Enhancement.global();\n            } catch (e) {\n                console.error('Enhancement global ' + e);\n            }\n        }\n\n        if (sap.n.Enhancement.BeforeStartup) {\n            try {\n                sap.n.Enhancement.BeforeStartup();\n            } catch (e) {\n                console.error('Enhancement BeforeStartup ' + e);\n            }\n        }\n\n        // Device ID\n        AppCache.deviceID = localStorage.getItem('AppCacheID');\n\n        if (!AppCache.deviceID) {\n            AppCache.deviceID = ModelData.genID();\n            localStorage.setItem('AppCacheID', AppCache.deviceID);\n        }\n\n        // Reset Password Link\n        if (AppCache.passUrlReset && AppCache.passUrlReset !== 'null') AppCache_resetPassword.setVisible(true);\n\n        // Get Cache\n        appCacheLog('AppCache.Startup: Loading Apps');\n        getCacheAppCacheData();\n\n        // Mobile or Desktop \n        if (AppCache.isMobile) {\n\n            if (AppCache.enablePwa) {\n                AppCache.Url = location.origin;\n            }\n\n            appCacheLog('AppCache.Startup: Mobile Client');\n\n            AppCache.translate(navigator.language.slice(0, 2).toUpperCase());\n\n            // Status Bar - Fullscreen\n            if (typeof StatusBar !== 'undefined') {\n                if (AppCache.isFullscreen) StatusBar.hide();\n                StatusBar.overlaysWebView(false);\n            }\n\n            // Set URL for resources from Server \n            imgWindows.setSrc(AppCache.Url + imgWindows.getSrc());\n            imgAndroid.setSrc(AppCache.Url + imgAndroid.getSrc());\n            imgIos.setSrc(AppCache.Url + imgIos.getSrc());\n\n            if (AppCache.isPublic) {\n                AppCacheShellUser.destroy();\n                AppCache.Update();\n\n                setTimeout(function () {\n                    if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n                }, 300);\n\n            } else {\n\n                appCacheLog('AppCache.Startup: Clear cookies');\n                AppCache.clearCookies();\n\n                appCacheLog('AppCache.Startup: Fetching users from database');\n                cacheLoaded = 0;\n                getCacheAppCacheUsers(true);\n\n                (function () {\n                    function waitForCache() {\n                        if (cacheLoaded >= 1) {\n\n                            appCacheLog('AppCache.Startup: Got users from database');\n\n                            // If localStorage fails to decrypt\n                            if (!modelAppCacheUsers || !modelAppCacheUsers.oData) modelAppCacheUsers.oData = [];\n\n                            // Remove Users from Desktop, if used in browser\n                            for (i = 0; i < modelAppCacheUsers.oData.length; i++) {\n                                let data = modelAppCacheUsers.oData[i];\n                                if (!data.logonData || !data.logonData.type) data.delete = true;\n                            }\n\n                            ModelData.Delete(AppCacheUsers, 'delete', true);\n\n                            appCacheLog(modelAppCacheUsers.oData);\n\n                            // Passcode or Logon\n                            if (AppCache.enablePasscode) {\n\n                                // Set Visible Markers\n                                switch (AppCache.passcodeLength) {\n\n                                    case 6:\n                                        Passcode5.setVisible(true);\n                                        Passcode6.setVisible(true);\n                                        break;\n\n                                    case 8:\n                                        Passcode5.setVisible(true);\n                                        Passcode6.setVisible(true);\n                                        Passcode7.setVisible(true);\n                                        Passcode8.setVisible(true);\n                                        break;\n\n                                    default:\n                                        break;\n\n                                }\n\n                                if (!modelAppCacheUsers.oData.length) {\n                                    AppCache.setEnableLogonScreen();\n                                } else {\n                                    AppCache.setEnableUsersScreen();\n                                }\n\n                            } else {\n\n                                // Check for AutoLogin\n                                AppCacheLogonLocal.AutoLoginGet().then(function (auth) {\n\n                                    appCacheLog('AppCache.Startup: Autologin starting');\n\n                                    if (auth) {\n                                        let action = [];\n                                        AppCache.enableAutoLogin = true;\n                                        AppCacheLogonLocal.Init();\n                                        action.push(AppCacheLogonLocal.Relog(auth));\n                                        Promise.all(action).then(function (values) {\n                                            if (values[0] === 'OK') {\n                                                AppCache.getUserInfo(auth);\n                                                appCacheLog('AppCache.Startup: Autologin found user in database');\n                                            } else {\n                                                sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                                                AppCache.Logout();\n                                            }\n                                        });\n                                    } else {\n                                        AppCache.setEnableLogonScreen();\n                                        appCacheLog('AppCache.Startup: Autologin no user found in database');\n                                    }\n\n                                });\n\n                            }\n\n                            setTimeout(function () {\n                                if (typeof navigator.splashscreen !== 'undefined') navigator.splashscreen.hide();\n                            }, 300);\n\n                        } else {\n                            setTimeout(waitForCache, 50);\n                        }\n                    }\n                    waitForCache();\n                })()\n\n            }\n\n        } else {\n\n            appCacheLog('AppCache.Startup: Desktop Client');\n\n            AppCacheUserActionSettings.setVisible(true);\n            AppCache.isRestricted = false;\n\n            // Build URL\n            AppCache.Url = location.origin;\n\n            // Get User Data\n            if (AppCache.isPublic) {\n                AppCacheShellUser.destroy();\n                AppCache.Update();\n            } else {\n                AppCache.getUserInfo();\n            }\n\n        }\n\n        // App Title\n        sap.n.Launchpad.handleAppTitle(AppCache.launchpadTitle);\n\n        // Custom Logo\n        if (AppCache.CustomLogo && AppCache.CustomLogo !== 'null') {\n\n            if (isCordova() || location.protocol === 'file:') {\n                AppCacheShellLogoDesktop.setSrc('public/customlogo');\n                AppCacheShellLogoMobile.setSrc('public/customlogo');\n            } else {\n                AppCacheShellLogoDesktop.setSrc(AppCache.CustomLogo);\n                AppCacheShellLogoMobile.setSrc(AppCache.CustomLogo);\n            }\n\n        } else {\n\n            if (isCordova() || location.protocol === 'file:') {\n                AppCacheShellLogoDesktop.setSrc('public/images/nsball.png');\n                AppCacheShellLogoMobile.setSrc('public/images/nsball.png');\n            } else {\n                AppCacheShellLogoDesktop.setSrc('/public/images/nsball.png');\n                AppCacheShellLogoMobile.setSrc('/public/images/nsball.png');\n            }\n\n        }\n\n\n        // Check for OffLine \n        if (!navigator.onLine) onOffline();\n\n        topShell.setVisible(true);\n\n        // PWA Install\n        setTimeout(function () {\n            if (_pwaInstall) {\n                pageShell.setShowSubHeader(true);\n                actionPWA.setVisible(true);\n            }\n        }, 500);\n\n    },\n\n    _getLoginQuery() {\n        if (AppCache.mobileClient && AppCache.isMobile) {\n            return '?mobileClientID=' + AppCache.mobileClient;\n        }\n        return '';\n    }\n};\n\nwindow.AppCache = AppCache;","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"8d26476f-0e36-47c8-b875-847c9b52c75b","fieldName":"coreLanguageHandler","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":578,"fieldType":"neptune.Script","script":"AppCache.coreLanguageHandler = {\r\n    excludedLibraries: ['sap.n', 'sap.ui.unified.internal', 'nep.bootstrap'],\r\n    cldrBundle: {},\r\n\r\n    updateResourceBundlesNewLang: function (bundleLanguage) {\r\n        let loadedLibraries = sap.ui.getCore().getLoadedLibraries();\r\n        Object.entries(loadedLibraries).forEach(function ([_, library]) {\r\n            if (this.excludedLibraries.includes(library.name)) return true;\r\n\r\n            let currrentResourceBundle = sap.ui.getCore().getLibraryResourceBundle(library.name);\r\n            if (currrentResourceBundle && currrentResourceBundle.sLocale !== bundleLanguage) {\r\n                this.getResourceBundle(library.name, bundleLanguage)\r\n                    .then(function (newResourceBundle) {\r\n                        if (newResourceBundle && newResourceBundle.aPropertyFiles.length) {\r\n                            currrentResourceBundle.aPropertyFiles = newResourceBundle.aPropertyFiles;\r\n                        }\r\n                    });\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    getResourceBundle: function (ui5Lib, bundleLanguage) {\r\n        return new Promise(function (resolve, reject) {\r\n            sap.ui.require(['sap/base/i18n/ResourceBundle'], function (ResourceBundle) {\r\n                let ui5Version = this.getUI5version();\r\n                let ui5LibConv = ui5Lib.replace(/[.]/g, '/');\r\n                let urlPath = '/';\r\n\r\n                if (isCordova() || location.protocol === 'file:') urlPath = '';\r\n\r\n                urlPath += `public/openui5/${ui5Version}/${ui5LibConv}/messagebundle.properties`\r\n\r\n                ResourceBundle.create({\r\n                    url: urlPath,\r\n                    async: true,\r\n                    locale: bundleLanguage\r\n\r\n                }).then(function (resourceBundle) {\r\n                    resolve(resourceBundle);\r\n                });\r\n\r\n            }.bind(this));\r\n        }.bind(this));\r\n    },\r\n\r\n    getUI5version: function () {\r\n        let sMajor = sap.ui.getCore().getConfiguration().getVersion().getMajor();\r\n        let sMinor = sap.ui.getCore().getConfiguration().getVersion().getMinor();\r\n        return `${sMajor}.${sMinor}`;\r\n    },\r\n\r\n    setNewCLDRbundle: function (bundleLang) {\r\n        const l = bundleLang.toLocaleLowerCase();\r\n        sapLoadLanguage(l === 'no' ? 'nb' : l).then(function (bundle) {\r\n            this.cldrBundle = bundle;\r\n            sap.ui.core.LocaleData.prototype._get = function () {\r\n                return this._getDeep(AppCache.coreLanguageHandler.cldrBundle, arguments);\r\n            };\r\n        }.bind(this));\r\n    }\r\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"731248db-c2b6-4e42-9442-3a2cd916c19c","fieldName":"AppCacheLogonOIDC","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":579,"fieldType":"neptune.Script","script":"let AppCacheLogonOIDC = {\r\n    state: null,\r\n    options: {},\r\n    loginScopes: ['email', 'profile', 'openid', 'offline_access'],\r\n\r\n    Logon: function () {\r\n        this.options = this._getLogonData();\r\n\r\n        if (!isCordova()) {\r\n            if (location.protocol === 'file:') {\r\n                sap.m.MessageToast.show('Testing OIDC from file is not allowed due to CSRF issues. Please test in mobile app');\r\n                return;\r\n            }\r\n\r\n            AppCacheLogonOIDC._showLogonPopupAndWaitForCallbackUrl(AppCache.Url + '/user/logon/openid-connect/' + AppCacheLogonOIDC.options.path)\r\n                .then(function (callbackUrl) {\r\n                    if (callbackUrl) {\r\n                        setSelectedLoginType('openid-connect');\r\n                        const authResponse = AppCacheLogonOIDC._getHashParamsFromUrl(callbackUrl);\r\n\r\n                        appCacheLog('OIDC: Got code');\r\n                        appCacheLog(authResponse);\r\n\r\n                        return AppCacheLogonOIDC.P9LoginWithCode(authResponse);\r\n                    }\r\n                });\r\n        } else {\r\n            let logonWin = AppCacheLogonOIDC._showLogonPopup(AppCache.Url + '/user/logon/openid-connect/' + AppCacheLogonOIDC.options.path);\r\n\r\n            // Mobile InAppBrowser\r\n            logonWin.addEventListener('loadstop', function () {\r\n\r\n                logonWin.executeScript({ code: 'location.search' }, function (url) {\r\n\r\n                    let authResponse = AppCacheLogonOIDC._getHashParamsFromUrl(url[0]);\r\n\r\n                    // Get response\r\n                    if (authResponse) {\r\n\r\n                        // Logging \r\n                        appCacheLog('LoadStop: Got search response');\r\n                        appCacheLog(authResponse);\r\n\r\n                        // Error \r\n                        if (authResponse.error) {\r\n                            logonWin.close();\r\n                            sap.m.MessageToast.show(authResponse.error);\r\n                            sap.ui.core.BusyIndicator.hide();\r\n                            return;\r\n                        }\r\n\r\n                        if (authResponse.code) {\r\n                            logonWin.close();\r\n                            AppCacheLogonOIDC.P9LoginWithCode(authResponse);\r\n\r\n                        }\r\n\r\n                    }\r\n                });\r\n\r\n            });\r\n\r\n        }\r\n\r\n    },\r\n\r\n    Logoff: function () {\r\n\r\n        this.options = this._getLogonData();\r\n\r\n        if (navigator.onLine && AppCache.isOffline === false) {\r\n\r\n            AppCacheLogonOIDC.Signout();\r\n\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logout',\r\n                success: function (data) {\r\n                    AppCache.clearCookies();\r\n                    appCacheLog('OIDC: Successfully logged out');\r\n                },\r\n                error: function (result, status) {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n                    AppCache.clearCookies();\r\n                    appCacheLog('OIDC: Successfully logged out, in offline mode');\r\n                }\r\n            });\r\n        } else {\r\n            AppCache.clearCookies();\r\n        }\r\n\r\n    },\r\n\r\n    Relog: function (refreshToken) {\r\n        this.options = this._getLogonData();\r\n        AppCacheLogonOIDC.GetTokenWithRefreshToken(refreshToken, 'pin');\r\n    },\r\n\r\n    Init: function () {\r\n        this.options = this._getLogonData();\r\n    },\r\n\r\n    Signout: function () {\r\n\r\n        this.options = this._getLogonData();\r\n\r\n        let signOut = window.open(AppCache.Url + '/user/logon/openid-connect/' + AppCacheLogonOIDC.options.path + '/logout', '_blank', 'location=no,width=5,height=5,left=-1000,top=3000');\r\n\r\n        if (isCordova()) {\r\n\r\n            signOut.hide();\r\n\r\n            signOut.addEventListener('loadstop', function () {\r\n                signOut.close();\r\n            })\r\n\r\n        } else {\r\n\r\n            signOut.onload = function () {\r\n                signOut.close();\r\n            };\r\n\r\n            signOut.blur();\r\n\r\n            setTimeout(function () {\r\n                signOut.close();\r\n            }, 5000);\r\n\r\n        }\r\n\r\n    },\r\n\r\n    GetTokenWithRefreshToken: function (refreshToken, process) {\r\n        this.options = this._getLogonData();\r\n        appCacheLog('OIDC: Starting method GetTokenWithRefreshToken');\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            request({\r\n                type: 'POST',\r\n                url: AppCache.Url + '/user/logon/openid-connect/' + AppCacheLogonOIDC.options.path + '/token',\r\n                contentType: 'application/x-www-form-urlencoded',\r\n                data: {\r\n                    grant_type: 'refresh_token',\r\n                    refresh_token: refreshToken,\r\n                },\r\n                success: function (data) {\r\n                    setSelectedLoginType('openid-connect');\r\n\r\n                    appCacheLog('OIDC: Got tokens from GetTokenWithRefreshToken');\r\n                    appCacheLog(data);\r\n\r\n                    AppCacheLogonOIDC._onTokenReady(data);\r\n                    AppCacheLogonOIDC.P9LoginWithToken(data, process);\r\n                    resolve(data);\r\n                },\r\n                error: function (result) {\r\n\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    let errorText = 'OIDC: Error getting token from GetTokenWithRefreshToken';\r\n\r\n                    if (result.responseJSON && result.responseJSON.error_description) {\r\n                        errorText = result.responseJSON.error_description;\r\n                    }\r\n\r\n                    sap.m.MessageToast.show(errorText);\r\n\r\n                    appCacheLog(errorText);\r\n                    AppCache.Logout();\r\n                    reject(result);\r\n                }\r\n            })\r\n        });\r\n\r\n    },\r\n\r\n    P9LoginWithCode: function (authResponse) {\r\n        this.options = this._getLogonData();\r\n        let url = `${AppCache.Url}/user/logon/openid-connect/${AppCacheLogonOIDC.options.path}`\r\n        url += '/callback?' + serializeDataForQueryString(authResponse);\r\n\r\n        sap.ui.core.BusyIndicator.show(0);\r\n        appCacheLog('OIDC: Starting method P9LoginWithCode');\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            request({\r\n                type: 'GET',\r\n                url: url,\r\n                contentType: 'application/json',\r\n                success: function (data) {\r\n                    appCacheLog('OIDC: Successfully logged on to P9. Starting process: Get User Info');\r\n                    appCacheLog(data);\r\n\r\n                    if (data.refresh_token) {\r\n                        AppCache.Auth = data.refresh_token;\r\n                    } else {\r\n                        console.error('OIDC: No refresh token is received');\r\n                        return;\r\n                    }\r\n\r\n                    AppCacheLogonOIDC._onTokenReady(data);\r\n                    AppCache.getUserInfo();\r\n                },\r\n                error: function (result) {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    if (result.responseJSON && result.responseJSON.status) {\r\n                        sap.m.MessageToast.show(result.responseJSON.status);\r\n                    }\r\n\r\n                    console.log('OIDC: Error login to P9.');\r\n                    console.log(result);\r\n                    reject(result);\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    P9LoginWithToken: function (token, process) {\r\n\r\n        this.options = this._getLogonData();\r\n\r\n        sap.ui.core.BusyIndicator.show(0);\r\n\r\n        appCacheLog('OIDC: Starting method P9LoginWithToken');\r\n\r\n        if (!token.id_token) {\r\n            console.error('OIDC: id_token is missing');\r\n            return;\r\n        } else {\r\n            appCacheLog(token.id_token)\r\n        }\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logon/openid-connect/' + AppCacheLogonOIDC.options.path + '/session' + AppCache._getLoginQuery(),\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + token.id_token,\r\n                },\r\n                success: function (data) {\r\n                    setSelectedLoginType('openid-connect');\r\n                    switch (process) {\r\n                        case 'pin':\r\n                            appCacheLog(`OIDC: Successfully logged on to P9. Starting process: ${process}`);\r\n\r\n                            // Start App\r\n                            NumPad.numPasscode = 0;\r\n                            NumPad.Clear();\r\n                            NumPad.Verify = true;\r\n                            AppCache.Encrypted = '';\r\n                            if (AppCache.isMobile) AppCache.Update();\r\n                            break;\r\n\r\n                        case 'refresh':\r\n                            appCacheLog('OIDC: Auto Refresh Session');\r\n                            break;\r\n\r\n                        default:\r\n                            break;\r\n\r\n                    }\r\n\r\n                },\r\n                error: function (result) {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n                    let errorText = 'Error logging on P9, or P9 not online';\r\n                    if (result.responseJSON && result.responseJSON.status) errorText = result.responseJSON.status;\r\n                    appCacheLog(errorText);\r\n                    if (result.status === 0) onOffline();\r\n                    reject(result);\r\n                }\r\n            })\r\n        });\r\n\r\n    },\r\n\r\n    _onTokenReady: function (data, resourceToken) {\r\n\r\n        AppCache.userInfo.oidcToken = data;\r\n        AppCache.userInfo.oidcUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.oidcToken.id_token);\r\n\r\n        if (resourceToken) {\r\n            AppCache.userInfo.oidcResourceToken = resourceToken;\r\n        }\r\n\r\n        appCacheLog('OIDC: User Data');\r\n        appCacheLog(AppCache.userInfo);\r\n    },\r\n\r\n    _getLogonData: function () {\r\n        let logonData;\r\n        if (!this.fullUri) this.fullUri = AppCache.Url || location.origin;\r\n\r\n        if (AppCache.userInfo && AppCache.userInfo.logonData && AppCache.userInfo.logonData.id) {\r\n            logonData = AppCache.userInfo.logonData;\r\n        } else {\r\n            logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\r\n        }\r\n\r\n        return logonData;\r\n    },\r\n\r\n    _getHashParamsFromUrl: function (url) {\r\n\r\n        if (url.indexOf('?') < 0) return;\r\n\r\n        const queryString = url.split('?')[1];\r\n\r\n        let params = queryString.replace(/^(#|\\?)/, '');\r\n        let hashParams = {};\r\n        let e,\r\n            a = /\\+/g,\r\n            r = /([^&;=]+)=?([^&;]*)/g,\r\n            d = function (s) {\r\n                return decodeURIComponent(s.replace(a, ' '));\r\n            };\r\n        while (e = r.exec(params))\r\n            hashParams[d(e[1])] = d(e[2]);\r\n        return hashParams;\r\n    },\r\n\r\n    _showLogonPopupAndWaitForCallbackUrl: function (url) {\r\n\r\n        return new Promise(function (resolve, reject) {\r\n            const popup = AppCacheLogonOIDC._showLogonPopup(url);\r\n\r\n            (function check() {\r\n                if (popup.closed) {\r\n                    return resolve();\r\n                }\r\n\r\n                let callbackUrl = '';\r\n                try {\r\n                    callbackUrl = popup.location.href || '';\r\n                } catch (e) { }\r\n\r\n                if (callbackUrl) {\r\n                    if (callbackUrl.indexOf('code=') > -1) {\r\n                        console.log('Callbackurl: ', callbackUrl);\r\n                        popup.close();\r\n                        return resolve(callbackUrl);\r\n                    }\r\n                }\r\n                setTimeout(check, 100);\r\n            })();\r\n        });\r\n    },\r\n\r\n    _showLogonPopup: function (url) {\r\n        const popUpWidth = 500;\r\n        const popUpHeight = 650;\r\n\r\n        const winLeft = window.screenLeft ? window.screenLeft : window.screenX;\r\n        const winTop = window.screenTop ? window.screenTop : window.screenY;\r\n\r\n        const width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\r\n        const height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\r\n\r\n        const left = ((width / 2) - (popUpWidth / 2)) + winLeft;\r\n        const top = ((height / 2) - (popUpHeight / 2)) + winTop;\r\n\r\n        const logonWin = window.open(url, 'Login ', 'location=no,width=' + popUpWidth + ',height=' + popUpHeight + ',left=' + left + ',top=' + top);\r\n        if (logonWin.focus) logonWin.focus();\r\n\r\n        return logonWin;\r\n    }\r\n}\r\n\r\nwindow.AppCacheLogonOIDC = AppCacheLogonOIDC;","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"1e1100bd-e58d-4f16-94a4-6a4c81caa8e7","fieldName":"AppCacheLogonLocal","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":580,"fieldType":"neptune.Script","script":"let AppCacheLogonLocal = {\n    autoLoginKey: '_p9_log',\n\n    Logon: function () {\n        sap.ui.core.BusyIndicator.show();\n\n        let rec = {\n            username: AppCache_inUsername.getValue().toLowerCase(),\n            password: AppCache_inPassword.getValue(),\n            loginid: AppCache_loginTypes.getSelectedKey()\n        };\n\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\n\n        jsonRequest({\n            url: AppCache.Url + '/user/logon/local' + AppCache._getLoginQuery(),\n            data: JSON.stringify(rec),\n            success: function (data) {\n                if (data.status && data.status === 'UpdatePassword') {\n                    const url = new URL(data.link, location.href);\n                    url.searchParams.append('reason', data.reason || 'other');\n                    location.replace(url.toString());\n                } else {\n                    setSelectedLoginType('local');\n                    AppCache.getUserInfo();\n                    AppCacheLogonLocal.AutoLoginSet();\n                }\n            },\n            error: function (result, status) {\n                if (result.status === 401) sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                if (result.status === 0) sap.m.MessageToast.show(AppCache_tNoConnection.getText());\n                AppCacheLogonLocal.AutoLoginRemove();\n                sap.ui.core.BusyIndicator.hide();\n            }\n        });\n    },\n\n    AutoLoginSet: function () {\n        if (AppCache_inRememberMe.getSelected()) {\n            if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n                cordova.plugins.SecureKeyStore.set(\n                    function (res) { },\n                    function (error) {\n                        localStorage.setItem(AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n                    }, AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n            } else {\n                localStorage.setItem(AppCacheLogonLocal.autoLoginKey, AppCache.Auth);\n            }\n\n            AppCache.enableAutoLogin = true;\n        } else {\n            AppCacheLogonLocal.AutoLoginRemove();\n        }\n    },\n\n    AutoLoginRemove: function () {\n        AppCache.enableAutoLogin = false;\n        if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n            cordova.plugins.SecureKeyStore.remove(\n                function (res) { },\n                function (error) {\n                    localStorage.removeItem(AppCacheLogonLocal.autoLoginKey);\n                }, AppCacheLogonLocal.autoLoginKey);\n        } else {\n            localStorage.removeItem(AppCacheLogonLocal.autoLoginKey);\n        }\n    },\n\n    AutoLoginGet: function () {\n        return new Promise(function (resolve, reject) {\n            if (typeof cordova !== 'undefined' && typeof cordova.plugins !== 'undefined' && typeof cordova.plugins.SecureKeyStore !== 'undefined') {\n                cordova.plugins.SecureKeyStore.get(\n                    function (res) {\n                        resolve(res);\n                    },\n                    function (error) {\n                        resolve(localStorage.getItem(AppCacheLogonLocal.autoLoginKey));\n                    }, AppCacheLogonLocal.autoLoginKey);\n            } else {\n                resolve(localStorage.getItem(AppCacheLogonLocal.autoLoginKey));\n            }\n        });\n    },\n\n    Relog: function (auth, process) {\n        return new Promise(function (resolve, reject) {\n            let rec = Base64.decode(auth);\n\n            try {\n                rec = JSON.parse(rec);\n            } catch (e) {\n                console.log(e);\n                resolve('ERROR');\n            }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logon/local' + AppCache._getLoginQuery(),\n                data: JSON.stringify(rec),\n                success: function (data) {\n                    if (data.status && data.status === 'UpdatePassword') {\n                        const url = new URL(data.link, location.href);\n                        url.searchParams.append('reason', data.reason || 'other');\n                        location.replace(url.toString());\n                        resolve('ERROR');\n                    } else {\n                        setSelectedLoginType('local');\n                        resolve('OK');\n                    }\n                },\n                error: function (result, status) {\n                    if (result.status === 0) {\n                        resolve('OK');\n                        onOffline();\n                    } else {\n                        resolve('ERROR');\n                    }\n                }\n            });\n        });\n    },\n\n    Logoff: function () {\n        if (navigator.onLine && AppCache.isOffline === false) {\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                },\n                error: function (result, status) {\n                    AppCache.clearCookies();\n                }\n            });\n        }\n    },\n\n    Init: function () { }\n}\n\nwindow.AppCacheLogonLocal = AppCacheLogonLocal;","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"8588f658-999e-45a2-85ff-633242d85e0f","fieldName":"AppCacheLogonSap","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":581,"fieldType":"neptune.Script","script":"let AppCacheLogonSap = {\r\n\r\n    sapData: undefined,\r\n\r\n    Logon: function () {\r\n        sap.ui.core.BusyIndicator.show();\r\n\r\n        const rec = {\r\n            username: AppCache_inUsername.getValue(),\r\n            password: AppCache_inPassword.getValue()\r\n        };\r\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\r\n\r\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\r\n\r\n        if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\r\n            logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\r\n        }\r\n\r\n        jsonRequest({\r\n            url: AppCache.Url + '/user/logon/sap/' + logonData.path + AppCache._getLoginQuery(),\r\n            data: JSON.stringify(rec),\r\n            success: function (data) {\r\n                if (data.status === 'UpdatePassword') {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n                    AppCache_formLogon.setVisible(false);      \r\n                    AppCache_formPasswordReset.setVisible(true);\r\n                    txtFormNewPassRequired.setVisible(true);\r\n                    AppCacheLogonSap.sapData = { detail: rec, path: logonData.path };\r\n                } else {\r\n                    setSelectedLoginType('sap');\r\n                    AppCache.getUserInfo();\r\n                }\r\n            },\r\n            error: function (result, status) {\r\n                if (result.status === 401) {\r\n                    sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\r\n                }\r\n            }\r\n        });\r\n    },\r\n\r\n    ResetPassword: function() {    \r\n        const { detail, path } = AppCacheLogonSap.sapData;\r\n        if (inNewPassword.getValue() !== inNewPassword2.getValue()) {\r\n            sap.m.MessageToast.show('Passwords doesn\\'t match!');\r\n        } else if (!inNewPassword.getValue()) {\r\n            sap.m.MessageToast.show('Please provide a password');\r\n        } else {\r\n            sap.ui.core.BusyIndicator.show();\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logon/sap/' + path + AppCache._getLoginQuery(),\r\n                data: JSON.stringify({\r\n                    detail,\r\n                    password: inNewPassword.getValue()\r\n                }),\r\n                success: function (data) {                    \r\n                    if (data.status === 'UpdatePassword') {                        \r\n                        sap.ui.core.BusyIndicator.hide();\r\n                        jQuery.sap.require('sap.m.MessageToast');\r\n                        sap.m.MessageToast.show(data.message);\r\n                        inNewPassword.setValueState('Error');\r\n                        inNewPassword2.setValueState('Error');\r\n                    } else {\r\n                        AppCache.Auth = Base64.encode(JSON.stringify({username: detail.username, password: inNewPassword.getValue()}));\r\n                        AppCache_formLogon.setVisible(true);      \r\n                        AppCache_formPasswordReset.setVisible(false);\r\n                        setSelectedLoginType('sap');\r\n                        AppCache.getUserInfo();\r\n                    }\r\n                },\r\n                error: function (result, status) {\r\n                    sap.ui.core.BusyIndicator.hide();\r\n\r\n                    jQuery.sap.require('sap.m.MessageBox');\r\n                    sap.m.MessageBox.show(result.responseJSON.status, {\r\n                        title: 'Error',\r\n                        icon: 'ERROR',\r\n                        actions: ['CLOSE'],\r\n                        onClose: function () { }\r\n                    });\r\n\r\n                    inNewPassword.setValueState('Error');\r\n                    inNewPassword2.setValueState('Error');\r\n                }\r\n            });\r\n        }\r\n    },\r\n\r\n    Relog: function (auth) {\r\n        return new Promise(function (resolve, reject) {\r\n            let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\r\n            if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\r\n                logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\r\n            }\r\n\r\n            let rec = Base64.decode(auth);\r\n            try {\r\n                rec = JSON.parse(rec);\r\n            } catch (e) { }\r\n\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logon/sap/' + logonData.path + AppCache._getLoginQuery(),\r\n                data: JSON.stringify(rec),\r\n                success: function (data) {\r\n                    setSelectedLoginType('sap');\r\n                    resolve(data);\r\n                },\r\n                error: function (result, status) {\r\n                    if (result.status === 0) {\r\n                        resolve('OK');\r\n                        onOffline();\r\n                    } else {\r\n                        resolve();\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    },\r\n\r\n    Logoff: function () {\r\n        if (navigator.onLine && AppCache.isOffline === false) {\r\n            jsonRequest({\r\n                url: AppCache.Url + '/user/logout',\r\n                success: function (data) {\r\n                    AppCache.clearCookies();\r\n                },\r\n                error: function (result, status) {\r\n                    AppCache.clearCookies();\r\n                }\r\n            });\r\n        } else {\r\n            AppCache.clearCookies();\r\n        }\r\n    },\r\n\r\n    Init: function () { }\r\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"619eb084-d850-4549-d1ba-be94050ac8ea","fieldName":"AppCacheLogonLdap","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":582,"fieldType":"neptune.Script","script":"let AppCacheLogonLdap = {\n    Logon: function () {\n        sap.ui.core.BusyIndicator.show();\n\n        let rec = {};\n        rec.username = AppCache_inUsername.getValue().toLowerCase();\n        rec.password = AppCache_inPassword.getValue();\n        rec.loginid = AppCache_loginTypes.getSelectedKey();\n        AppCache.Auth = Base64.encode(JSON.stringify(rec));\n\n        let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n\n        if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\n            logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\n        }\n\n        jsonRequest({\n            url: AppCache.Url + '/user/logon/ldap/' + logonData.path + AppCache._getLoginQuery(),\n            data: JSON.stringify(rec),\n            success: function (data) {\n                setSelectedLoginType('ldap');\n                AppCache.getUserInfo();\n            },\n            error: function (result, status) {\n                if (result.status === 401) {\n                    sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                }\n            }\n        });\n    },\n\n    Relog: function (auth) {\n        return new Promise(function (resolve, reject) {\n            let logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n            if (!logonData.path && AppCache.userInfo && AppCache.userInfo.logonData) {\n                logonData = AppCache.getLogonTypeInfo(AppCache.userInfo.logonData.id);\n            }\n\n            let rec = Base64.decode(auth);\n            try {\n                rec = JSON.parse(rec);\n            } catch (e) { }\n\n            jsonRequest({\n                url: AppCache.Url + '/user/logon/ldap/' + logonData.path + AppCache._getLoginQuery(),\n                data: JSON.stringify(rec),\n                success: function (data) {\n                    setSelectedLoginType('ldap');\n                    resolve(data);\n                },\n                error: function (result, status) {\n                    if (result.status === 0) {\n                        resolve('OK');\n                        onOffline();\n                    } else {\n                        resolve();\n                    }\n                }\n            });\n        });\n    },\n\n    Logoff: function () {\n        if (navigator.onLine && AppCache.isOffline === false) {\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                },\n                error: function (result, status) {\n                    AppCache.clearCookies();\n                }\n            });\n        } else {\n            AppCache.clearCookies();\n        }\n    },\n\n    Init: function () { }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"374d0c99-e15b-4bcc-dbf1-7a8ca5d640e9","fieldName":"AppCacheLogonSaml","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":583,"fieldType":"neptune.Script","script":"let AppCacheLogonSaml = {\n    Logon: function (data) {\n        AppCache.Auth = JSON.stringify(data);\n        AppCache.samlData = data;\n\n        let loginWin = window.open(data.entryPoint, '_blank', 'location=yes');\n\n        // Apply Event Hander for inAppBrowser\n        setTimeout(function () {\n            loginWin.addEventListener('loadstart', function (event) {\n                // Check for login ok\n                sap.n.Planet9.function({\n                    id: dataSet,\n                    method: 'GetUserInfo',\n                    success: function (data) {\n                        AppCache.afterUserInfo(false, data);\n                        loginWin.close();\n                    },\n                    error: function (result, error) {\n                        // Not logged on\n                    }\n                });\n            });\n        }, 500);\n    },\n\n    Relog: function (data) {\n        try { data = JSON.parse(data); } catch (e) { }\n        let loginWin = window.open(data.entryPoint, '_blank', 'location=yes');\n\n        setTimeout(function () {\n            // apply event handler for inAppBrowser\n            loginWin.addEventListener('loadstart', function (event) {\n                // check for login\n                sap.n.Planet9.function({\n                    id: dataSet,\n                    method: 'GetUserInfo',\n                    success: function (data) {\n                        // Clear\n                        NumPad.numPasscode = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n\n                        // Start App\n                        AppCache.Encrypted = '';\n                        AppCache.Update();\n\n                        loginWin.close();\n                    },\n                    error: function (result, error) {\n                        // Not logged on\n                    }\n                });\n            });\n        }, 500);\n    },\n\n    Logoff: function () {\n        // SAML Logout \n        if (AppCache.userInfo.logonData.logoutUrl) {\n            request({\n                type: 'GET',\n                contentType: 'application/json',\n                url: AppCache.userInfo.logonData.logoutUrl\n            });\n        }\n\n        // P9 Logout\n        if (navigator.onLine && AppCache.isOffline === false) {\n            jsonRequest({\n                url: AppCache.Url + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                },\n                error: function (result, status) {\n                    AppCache.clearCookies();\n                }\n            });\n        } else {\n            AppCache.clearCookies();\n        }\n    },\n\n    Init: function () { }\n}","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"db664d5b-12d8-4fba-ea59-fe10784a4825","fieldName":"AppCacheLogonAzure","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":584,"fieldType":"neptune.Script","script":"let AppCacheLogonAzure = {\n    state: null,\n    options: {},\n    fullUri: null,\n    redirectUri: '/public/azure_redirect.html',\n    msalObj: null,\n    loginScopes: ['user.read', 'profile', 'openid', 'offline_access'],\n\n    InitMsal: function () {\n        let me = this;\n        return new Promise(function (resolve) {\n\n            if (me.msalObj) return resolve();\n\n            let msalUrl = '/public/ms/msal.js';\n            if (isCordova()) msalUrl = 'public/ms/msal.js';\n\n            AppCache.loadLibrary(msalUrl).then(function () {\n\n                let redirectUri = AppCacheLogonAzure.redirectUri;\n\n                if (AppCache.Url) {\n                    redirectUri = AppCache.Url + redirectUri;\n                } else {\n                    redirectUri = location.origin + redirectUri;\n                }\n\n                me.msalObj = new msal.PublicClientApplication({\n                    auth: {\n                        clientId: me.options.clientID,\n                        authority: 'https://login.microsoftonline.com/' + me.options.tenantId,\n                        redirectUri: redirectUri,\n                    },\n                    cache: {\n                        cacheLocation: 'sessionStorage',\n                        storeAuthStateInCookie: false,\n                    }\n                });\n\n                resolve();\n            });\n        });\n    },\n\n    Logon: function (loginHint) {\n        this.options = this._getLogonData();\n\n        if (this.useMsal()) {\n            this._loginMsal();\n            return;\n        }\n\n        this.state = Date.now();\n\n        let logonWin = this._openPopup(this._loginUrl(loginHint));\n\n        if (!isCordova()) {\n\n            if (location.protocol === 'file:') {\n                sap.m.MessageToast.show('Testing Azure AD from file is not allowed due to CSRF issues. Please test in mobile app');\n                return;\n            }\n\n            if (logonWin.focus) logonWin.focus();\n\n            // Browser\n            this._waitForPopupDesktop(logonWin, function (url) {\n\n                let authResponse = AppCacheLogonAzure._getHashParams(url);\n\n                // Get response\n                if (authResponse) {\n\n                    if (authResponse.error) {\n                        sap.m.MessageToast.show(authResponse.error);\n                        sap.ui.core.BusyIndicator.hide();\n                        return;\n                    }\n\n                    appCacheLog('Azure Logon: Got code');\n                    appCacheLog(authResponse);\n\n                    // Prevent cross-site request forgery attacks\n                    if (parseInt(authResponse.state) !== AppCacheLogonAzure.state) {\n                        sap.m.MessageToast.show('Cross-site request forgery detected');\n                        return;\n                    }\n\n                    // Request Access/Refresh Tokens \n                    AppCacheLogonAzure._getToken(authResponse);\n\n                } else {\n                    console.log('No token response, or window closed manually');\n                }\n\n            }.bind(this));\n\n        } else {\n\n            // Mobile InAppBrowser\n            logonWin.addEventListener('loadstop', function () {\n\n                logonWin.executeScript({ code: 'location.search' }, function (url) {\n\n                    let authResponse = AppCacheLogonAzure._getHashParams(url[0]);\n\n                    // Get response\n                    if (authResponse) {\n                        // Logging \n                        appCacheLog('LoadStop: Got search response');\n                        appCacheLog(authResponse);\n\n                        // Error \n                        if (authResponse.error) {\n                            logonWin.close();\n                            sap.m.MessageToast.show(authResponse.error);\n                            sap.ui.core.BusyIndicator.hide();\n                            return;\n                        }\n\n                        if (authResponse.state && authResponse.code) {\n\n                            logonWin.close();\n\n                            // Prevent cross-site request forgery attacks\n                            if (parseInt(authResponse.state) !== AppCacheLogonAzure.state) {\n                                sap.m.MessageToast.show('Cross-site request forgery detected');\n                                return;\n                            }\n\n                            // Request Access/Refresh Tokens \n                            AppCacheLogonAzure._getToken(authResponse);\n\n                        }\n\n                    }\n                });\n\n            });\n\n        }\n    },\n\n    GetTokenPopup: function (request) {\n        const me = this;\n        return me.msalObj.acquireTokenSilent(request).catch(function (error) {\n            if (error instanceof msal.InteractionRequiredAuthError) {\n                return me.msalObj.acquireTokenPopup(request).then(tokenResponse => {\n                    return tokenResponse;\n                }).catch(error => {\n                    appCacheError('Azure GetTokenPopup: ' + error);\n                });\n            } else {\n                appCacheError('Azure GetTokenPopup: ' + error);\n            }\n        });\n    },\n\n    Signout: function () {\n\n        localStorage.removeItem('p9azuretoken');\n        localStorage.removeItem('p9azuretokenv2');\n\n        if (AppCacheLogonAzure.options.azureSilentSignout) {\n            let signoutFrame = document.getElementById('azureSignout');\n            if (signoutFrame) signoutFrame.setAttribute('src', 'https://login.microsoftonline.com/common/oauth2/logout');\n        } else {\n\n            let signOut = window.open('https://login.microsoftonline.com/common/oauth2/logout', '_blank', 'location=no,width=5,height=5,left=-1000,top=3000');\n\n            signOut.blur();\n\n            signOut.onload = function () {\n                signOut.close();\n            };\n\n            setTimeout(function () {\n                signOut.close();\n            }, 1000);\n\n        }\n    },\n\n    Relog: function (refreshToken, process) {\n\n        let me = this;\n\n        me.options = me._getLogonData();\n\n        if (me.useMsal() && !me.msalObj) {\n            me.InitMsal().then(function () {\n                me._refreshToken(refreshToken, process);\n            });\n        } else {\n            me._refreshToken(refreshToken, process);\n        }\n\n    },\n\n    Logoff: function () {\n\n        // Logout Planet 9\n        if (navigator.onLine && AppCache.isOffline === false) {\n\n            AppCacheLogonAzure.Signout();\n\n            jsonRequest({\n                url: this.fullUri + '/user/logout',\n                success: function (data) {\n                    AppCache.clearCookies();\n                    appCacheLog('Azure Logon: Successfully logged out');\n                },\n                error: function (result, status) {\n                    sap.ui.core.BusyIndicator.hide();\n                    AppCache.clearCookies();\n                    appCacheLog('Azure Logon: Successfully logged out, in offline mode');\n                }\n            });\n        } else {\n            AppCache.clearCookies();\n        }\n    },\n\n    Init: function () {\n\n    },\n\n    useMsal: function () {\n        if (this.options.azureMSALv2 && !isCordova()) return true;\n    },\n\n    _loginMsal: function () {\n\n        let me = this;\n\n        me.InitMsal().then(function () {\n            me.msalObj.loginPopup({ scopes: me.loginScopes, prompt: 'select_account' }).then(function (response) {\n                AppCache.Auth = ModelData.genID();\n                AppCacheLogonAzure._loginP9(response.idToken);\n            }).catch(function (error) {\n                if (error && error.toString().indexOf('Failed to fetch') > -1) {\n                    sap.m.MessageToast.show('Failed to fetch token. Redirect URI in azure must be set to Single Page Application');\n                } else {\n                    sap.m.MessageToast.show(error.toString());\n                }\n            });\n        });\n    },\n\n    _getHashParams: function (token) {\n\n        if (!token) return null;\n        if (token.indexOf('?') > -1) token = token.split('?')[1];\n\n        let params = token.replace(/^(#|\\?)/, '');\n        let hashParams = {};\n        let e,\n            a = /\\+/g,\n            r = /([^&;=]+)=?([^&;]*)/g,\n            d = function (s) {\n                return decodeURIComponent(s.replace(a, ' '));\n            };\n        while (e = r.exec(params))\n            hashParams[d(e[1])] = d(e[2]);\n        return hashParams;\n    },\n\n    _getLogonData: function () {\n\n        let logonData;\n\n        if (!this.fullUri) this.fullUri = AppCache.Url || location.origin;\n\n        if (AppCache.userInfo && AppCache.userInfo.logonData && AppCache.userInfo.logonData.id) {\n            logonData = AppCache.userInfo.logonData;\n        } else {\n            logonData = AppCache.getLogonTypeInfo(AppCache_loginTypes.getSelectedKey());\n        }\n\n        return logonData;\n    },\n\n    _authUrl: function (endPoint) {\n        return 'https://login.microsoftonline.com/' + AppCacheLogonAzure.options.tenantId + '/oauth2/v2.0/' + endPoint + '?';\n    },\n\n    _loginUrl: function (loginHint) {\n        let data = {\n            client_id: AppCacheLogonAzure.options.clientID,\n            redirect_uri: this.fullUri + AppCacheLogonAzure.redirectUri,\n            scope: AppCacheLogonAzure.loginScopes.join(' '),\n            // nonce: ModelData.genID(),\n            state: this.state,\n            prompt: 'select_account',\n            response_type: 'code'\n        };\n\n        if (loginHint) data.login_hint = loginHint;\n\n        return this._authUrl('authorize') + serializeDataForQueryString(data);\n    },\n\n    _logoutUrl: function () {\n\n        let data = {\n            post_logout_redirect_uri: this.fullUri + AppCacheLogonAzure.redirectUri\n        };\n\n        return this._authUrl('logout') + serializeDataForQueryString(data);\n    },\n\n    _onTokenReadyMsal: function (data, resourceToken) {\n        // Old token format.\n        AppCache.userInfo.azureToken = {\n            access_token: data.accessToken,\n            expires_in: (data.expiresOn - new Date()) / 1000,\n            ext_expires_in: ((data.extExpiresOn - new Date()) / 1000),\n            id_token: data.idToken,\n            refresh_token: 'N/A',\n            scope: data.scopes.join(' '),\n            token_type: 'Bearer',\n        };\n        //New token format\n        AppCache.userInfo.v2azureToken = data;\n        AppCache.userInfo.azureUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.azureToken.idToken);\n\n        if (resourceToken) {\n            AppCache.userInfo.v2azureResourceToken = resourceToken;\n        }\n\n        const nextRelog = (data.expiresOn - new Date()) - 120000;\n        setTimeout(function () {\n            AppCacheLogonAzure.Relog(null, 'refresh');\n        }, nextRelog);\n    },\n\n    _onTokenReady: function (data, resourceToken) {\n\n        if (!data.expires_on) {\n            data.expires_on = new Date();\n            data.expires_on.setSeconds(data.expires_on.getSeconds() + data.expires_in);\n            data.expires_on = data.expires_on.getTime();\n        }\n\n        // Autorelogin \n        let expire_in_ms = (data.expires_in * 1000) - 120000;\n\n        AppCache.userInfo.azureToken = data;\n        AppCache.userInfo.azureUser = AppCacheLogonAzure._parseJwt(AppCache.userInfo.azureToken.id_token);\n\n\n        if (resourceToken) {\n            AppCache.userInfo.azureResourceToken = resourceToken;\n        }\n\n        if (AppCacheLogonAzure.autoRelog) {\n            clearInterval(AppCacheLogonAzure.autoRelog);\n            AppCacheLogonAzure.autoRelog = null;\n        }\n\n        AppCacheLogonAzure.autoRelog = setInterval(function () {\n            if (AppCache.isRestricted && !AppCache.inBackground) return;\n            AppCacheLogonAzure.Relog(data.refresh_token, 'refresh');\n        }, expire_in_ms);\n\n        appCacheLog('Azure Logon: User Data');\n        appCacheLog(AppCache.userInfo);\n\n        return;\n    },\n\n    _getToken: function (response) {\n        let url = this._authUrl('token');\n        let data = {\n            client_id: AppCacheLogonAzure.options.clientID,\n            redirect_uri: this.fullUri + AppCacheLogonAzure.redirectUri,\n            scope: AppCacheLogonAzure.loginScopes.join(' '),\n            code: response.code,\n            grant_type: 'authorization_code',\n        };\n\n        return request({\n            type: 'POST',\n            url: this.fullUri + '/user/logon/' + this.options.type + '/' + this.options.path + '/' + encodeURIComponent(url),\n            contentType: 'application/x-www-form-urlencoded',\n            data: data,\n            success: function (data) {\n\n                if (data && !data.refresh_token) {\n                    sap.m.MessageToast.show('Error getting refresh_token from Azure. Add scope offline_access in authentication configuration');\n                    appCacheError('Azure Logon: Error getting refresh_token. Add scope offline_access in authentication configuration');\n                    return;\n                }\n\n                appCacheLog('Azure Logon: Got tokens');\n                appCacheLog(data);\n\n                AppCache.Auth = data.refresh_token;\n\n                AppCacheLogonAzure._onTokenReady(data);\n                AppCacheLogonAzure._loginP9(data.id_token);\n            },\n            error: function (result, status) {\n\n                sap.ui.core.BusyIndicator.hide();\n\n                let errorText = 'Error getting token from Azure AD';\n\n                if (result.responseJSON && result.responseJSON.error_description) {\n                    errorText = result.responseJSON.error_description;\n                    errorCode = errorText.substr(0, 12);\n                }\n\n                sap.m.MessageToast.show(errorText);\n                appCacheLog(`${errorCode}: ${errorText}`);\n                AppCache.Logout();\n\n            }\n\n        });\n\n    },\n\n    _refreshTokenMsal: function (process) {\n        const me = this;\n        const account = this.msalObj.getAccountByUsername(AppCache.userInfo.username);\n\n        me.GetTokenPopup({ scopes: me.loginScopes, account }).then(function (azureToken) {\n            if (me.options.scope) {\n                me.GetTokenPopup({ scopes: me.options.scope.split(' '), account }).then(function (resourceToken) {\n                    AppCacheLogonAzure._onTokenReadyMsal(azureToken, resourceToken);\n                    AppCacheLogonAzure._loginP9(azureToken.idToken, process);\n                });\n            } else {\n                AppCacheLogonAzure._onTokenReadyMsal(azureToken);\n                AppCacheLogonAzure._loginP9(azureToken.idToken, process);\n            }\n        }).catch(function (error) {\n            let errorText = 'Error getting refreshToken from Azure AD';\n            let errorCode = '';\n\n            if (error && error.message && error.message.indexOf('AADSTS700082') > -1) {\n                NumPad.Clear();\n                AppCache.Logout();\n            }\n\n            if (process === 'pin') NumPad.Clear();\n\n            sap.m.MessageToast.show(errorText);\n            appCacheLog(`${errorCode}: ${errorText}`);\n        });\n    },\n\n    _getResourceToken: function (refreshToken, scope) {\n        const me = this;\n        let data = {\n            client_id: AppCacheLogonAzure.options.clientID,\n            scope: scope,\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n        }\n\n        return new Promise(function (resolve, reject) {\n            return request({\n                type: 'POST',\n                url: me.fullUri + '/user/logon/' + me.options.type + '/' + me.options.path + '/' + encodeURIComponent(me._authUrl('token')),\n                contentType: 'application/x-www-form-urlencoded',\n                data: data,\n                success: function (data) {\n                    resolve(data);\n                },\n                error: function (result, status) {\n                    sap.ui.core.BusyIndicator.hide();\n\n                    if (result.responseJSON && result.responseJSON.error_description) {\n                        errorText = result.responseJSON.error_description;\n                        errorCode = errorText.substr(0, 12);\n                        appCacheLog('Could not get resource token. Error:', errorText);\n                    }\n                    resolve();\n                }\n            });\n        });\n    },\n\n    _refreshToken: function (refreshToken, process) {\n        const me = this;\n\n        if (!process) process = 'pin';\n\n        if (this.msalObj) {\n            this._refreshTokenMsal(process);\n            return;\n        }\n\n        let url = this._authUrl('token');\n\n        let data = {\n            client_id: me.options.clientID,\n            scope: this.loginScopes.join(' '),\n            refresh_token: refreshToken,\n            grant_type: 'refresh_token',\n        };\n\n        // Get Tokens from Azure\n        return request({\n            type: 'POST',\n            url: this.fullUri + '/user/logon/' + this.options.type + '/' + this.options.path + '/' + encodeURIComponent(url),\n            contentType: 'application/x-www-form-urlencoded',\n            data: data,\n            success: function (data) {\n                appCacheLog(`Azure Logon: Got refresh_token: ${data.refresh_token}`);\n\n                if (me.options.scope) {\n                    me._getResourceToken(refreshToken, me.options.scope).then(function (resourceToken) {\n                        me._onTokenReady(data, resourceToken);\n                        me._loginP9(data.id_token, process);\n                    });\n                } else {\n                    me._onTokenReady(data);\n                    me._loginP9(data.id_token, process);\n                }\n            },\n            error: function (result, status) {\n\n                sap.ui.core.BusyIndicator.hide();\n\n                let errorText = 'Error getting refreshToken from Azure AD';\n                let errorCode = '';\n\n                if (result.responseJSON && result.responseJSON.error_description) {\n\n                    errorText = result.responseJSON.error_description;\n                    errorCode = errorText.substr(0, 12);\n\n                    switch (errorCode) {\n\n                        case 'AADSTS700082':\n                            NumPad.Clear();\n                            AppCache.Logout();\n                            break;\n\n                    }\n                }\n\n                if (process === 'pin') NumPad.Clear();\n\n                sap.m.MessageToast.show(errorText);\n                appCacheLog(`${errorCode}: ${errorText}`);\n            }\n        });\n    },\n\n    _loginP9: function (idToken, process) {\n\n        return request({\n            type: 'POST',\n            url: AppCache.Url + '/user/logon/' + AppCacheLogonAzure.options.type + '/' + AppCacheLogonAzure.options.path + AppCache._getLoginQuery(),\n            headers: { 'Authorization': 'Bearer ' + idToken },\n            success: function (data) {\n                setSelectedLoginType(AppCacheLogonAzure.options.type);\n\n                switch (process) {\n\n                    case 'pin':\n                        appCacheLog(`Azure Logon: Successfully logged on to P9. Starting process: ${process}`);\n\n                        // Start App\n                        NumPad.numPasscode = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n                        AppCache.Encrypted = '';\n                        if (AppCache.isMobile) AppCache.Update();\n                        break;\n\n                    case 'refresh':\n                        appCacheLog(`Azure Logon: Successfully logged on to P9. Starting process: ${process}`);\n                        break;\n\n                    default:\n                        appCacheLog('Azure Logon: Successfully logged on to P9. Starting process: Get User Info');\n                        AppCache.getUserInfo();\n                        break;\n\n                }\n\n            },\n            error: function (result, status) {\n                sap.ui.core.BusyIndicator.hide();\n                let errorText = 'Error logging on P9, or P9 not online';\n                if (result.responseJSON && result.responseJSON.status) errorText = result.responseJSON.status;\n                appCacheLog(errorText);\n                if (result.status === 0) onOffline();\n            }\n        });\n    },\n\n    _waitForPopupDesktop: function (popupWin, onClose) {\n        let url = '';\n        let winCheckTimer = setInterval(function () {\n\n            try {\n                url = popupWin.location.href || '';\n            } catch (e) {\n\n            }\n\n            if (url.indexOf('code=') > -1 || url.indexOf('error=') > -1) {\n                clearInterval(winCheckTimer);\n                popupWin.close();\n                onClose(url);\n            }\n        }, 100);\n    },\n\n    _parseJwt: function (token) {\n        try {\n            return JSON.parse(atob(token.split('.')[1]));\n        } catch (e) {\n            return null;\n        }\n    },\n\n    _openPopup: function (url, popUpWidth, popUpHeight) {\n\n        popUpWidth = popUpWidth || 483;\n        popUpHeight = popUpHeight || 600;\n\n        let winLeft = window.screenLeft ? window.screenLeft : window.screenX;\n        let winTop = window.screenTop ? window.screenTop : window.screenY;\n\n        let width = window.innerWidth || document.documentElement.clientWidth || document.body.clientWidth;\n        let height = window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight;\n\n        let left = ((width / 2) - (popUpWidth / 2)) + winLeft;\n        let top = ((height / 2) - (popUpHeight / 2)) + winTop;\n\n        return window.open(url, '_blank', 'location=no,width=' + popUpWidth + ',height=' + popUpHeight + ',left=' + left + ',top=' + top);\n    }\n\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"1bb2a08c-3ea5-43ea-d54b-d2d3e45acdcc","fieldName":"NumPad","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":585,"fieldType":"neptune.Script","script":"function isPincodeValid(v) {\n    const validity = {\n        isValid: true,\n        errorMessage: ''\n    };\n\n    // Enhancement\n    if (sap.n.Enhancement.PinCodeValidation) {\n        try {\n            sap.n.Enhancement.PinCodeValidation(v, validity);\n        } catch (e) {\n            appCacheError('Enhancement PinCodeValidation ' + e);\n        }\n    }\n\n    const { isValid, errorMessage } = validity;\n\n    return {\n        isValid: isValid && /^[0-9]+$/.test(v) && v.length === AppCache.passcodeLength,\n        errorMessage: isValid ? '' : errorMessage\n    };\n}\n\nfunction sanitizePincode(v) {\n    return v.replace(/[^0-9]/g, '');\n}\n\nfunction pincodeEntryErrs() {\n    const len = AppCache.passcodeLength;\n    const criteria = `Valid pin is numeric and consists of only ${len} digits.`;\n    return {\n        setPin: `Set Pin is invalid. ${criteria}`,\n        repeatPin: `Repeat Pin is invalid. ${criteria}`,\n        newPasscode: AppCache_tEnterNewPasscode.getText(),\n        repeatPasscode: AppCache_tEnterRepeatPasscode.getText(),\n        passcodeTooShort: `${AppCache_tPasscodeToShort.getText()} (${len})`,\n        passcodeNoMatch: AppCache_tNoPasscodeMatch.getText(),\n    };\n}\n\nfunction showPincodeError(msg, input = null) {\n    if (input) input.setValueState('Error');\n    sap.m.MessageToast.show(msg, {\n        onClose: function () {\n            if (input) input.setValueState('None');\n        }\n    });\n}\n\nfunction onPasscode1Submit() {\n    if (!isPincodeValid(AppCache_inPasscode1.getValue()).isValid) {\n        const customError = isPincodeValid(AppCache_inPasscode1.getValue()).errorMessage;\n        return showPincodeError(customError || pincodeEntryErrs().setPin, AppCache_inPasscode1);\n    }\n\n    AppCache_inPasscode1.setValueState('None');\n    AppCache_inPasscode2.focus();\n}\n\nfunction onPasscode2Submit() {\n    if (!isPincodeValid(AppCache_inPasscode2.getValue()).isValid) {\n        const customError = isPincodeValid(AppCache_inPasscode2.getValue()).errorMessage;\n        return showPincodeError(customError || pincodeEntryErrs().repeatPin, AppCache_inPasscode2);\n    }\n\n    AppCache_inPasscode2.setValueState('None');\n    return AppCache_butPasscode.firePress();\n}\n\nconst NumPad = {\n    numValue: '',\n    Verify: false,\n    numPasscode: 0,\n\n    ref: function () {\n        return document.getElementById('AppCache_boxPasscodeEntry');\n    },\n\n    addEvent: function (type, fn) {\n        const el = this.ref();\n        if (!el) return;\n\n        el.addEventListener(type, fn);\n    },\n\n    removeEvent: function (type, fn) {\n        const el = this.ref();\n        if (!el) return;\n\n        el.removeEventListener(type, fn);\n    },\n\n    keydown: function (evt) {\n        const { key } = evt;\n        if (['Delete', 'Backspace'].includes(key)) {\n            butNumpadClear.firePress();\n            return;\n        }\n\n        if (Number.isNaN(Number.parseInt(key))) {\n            return;\n        }\n\n        NumPad.enterKey(key);\n    },\n\n    KeypressHandlerSet: function () {\n        this.addEvent('keydown', NumPad.keydown);\n    },\n\n    KeypressHandlerRemove: function () {\n        this.removeEvent('keydown', NumPad.keydown);\n    },\n\n    enterKey: function (keyValue) {\n        // only purpose of these checkboxes is to keep count\n        // on how many characters have been entered\n        const checkboxes = [\n            Passcode1, Passcode2, Passcode3, Passcode4,\n            Passcode5, Passcode6, Passcode7, Passcode8,\n        ];\n\n        let checked = 0;\n        for (const cb of checkboxes) {\n            if (cb.getSelected() === true) {\n                checked += 1;\n                continue;\n            }\n\n            if (cb.getSelected() === false) {\n                cb.setSelected(true);\n                checked += 1;\n\n                NumPad.numValue += keyValue;\n\n                // possible keycode length can be 4, 6 or 8 characters\n                if (checked === AppCache.passcodeLength) {\n                    setTimeout(function () {\n                        NumPad.Logon();\n                    }, 50);\n                    NumPad.setPasscodeBusy(true);\n                }\n\n                return;\n            }\n        }\n    },\n\n    setPasscodeBusy: function (enabled) {\n        if (!enabled) {\n            sap.ui.core.BusyIndicator.hide();\n        } else {\n            sap.ui.core.BusyIndicator.show(0);\n        }\n    },\n\n    Clear: function () {\n        NumPad.numValue = '';\n\n        [\n            Passcode1, Passcode2, Passcode3, Passcode4,\n            Passcode5, Passcode6, Passcode7, Passcode8,\n        ].forEach(function (cb) {\n            cb.setSelected(false);\n        });\n\n        if (typeof window.cordova !== 'undefined' && !window.navigator.simulator && AppCache.biometricAuthentication) {\n            butNumpadLogin.setEnabled(AppCache.biometricAuthentication);\n        }\n    },\n\n    Logon: function () {\n        appCacheLog(`NumPad.Logon: Starting with auth ${AppCache.Encrypted}`);\n\n        if (!AppCache.Encrypted) {\n            appCacheLog('NumPad.Logon: No auth found');\n            appCacheLog(AppCache.userInfo);\n\n            if (AppCache.userInfo.auth) {\n                AppCache.Encrypted = AppCache.userInfo.auth;\n            } else {\n                NumPad.Clear();\n                AppCache.Logout();\n                sap.m.MessageToast.show(AppCache_tNoUserInfo.getText());\n                sap.ui.core.BusyIndicator.hide();\n                return;\n            }\n        }\n\n        // Decrypt with Passcode\n        let auth = '';\n        try {\n            const key = generatePBKDF2Key(NumPad.numValue, AppCache.deviceID);\n            auth = decryptAES(AppCache.Encrypted, key.toString());\n        } catch (err) {\n            appCacheLog('NumPad.Logon: decryption error');\n        }\n\n        if (auth === '') {\n            NumPad.Clear();\n\n            if (parseInt(AppCache.numPasscode) === NumPad.numPasscode) {\n                NumPad.numPasscode = 0;\n                NumPad.setPasscodeBusy(false);\n                AppCache.Logout();\n                AppCache.RemoveAllCache();\n                return;\n            }\n\n            if (navigator.notification && navigator.notification.vibrate) navigator.notification.vibrate(250);\n            boxNumpad02.addStyleClass('animated shake');\n\n            sap.m.MessageBox.error('Wrong Pin Code!', {\n                onClose: () => {\n                    butNumpad1.focus();\n                },\n            });\n\n            setTimeout(function () {\n                boxNumpad02.removeStyleClass('animated shake');\n            }, 500);\n\n            NumPad.setPasscodeBusy(false);\n            NumPad.numPasscode++;\n            return;\n        }\n\n        appCacheLog('NumPad.Logon: PIN Code OK');\n\n        AppCache.userInfo.authDecrypted = auth;\n        sap.ui.core.BusyIndicator.show(0);\n\n        // Re-Logon \n        if (AppCache.isOffline) {\n            appCacheLog('NumPad.Logon: Starting in offline mode');\n\n            // Clear\n            NumPad.numPasscode = 0;\n            NumPad.Clear();\n            NumPad.Verify = true;\n\n            // Start App\n            AppCache.Encrypted = '';\n            AppCache.Update();\n\n        } else {\n            appCacheLog('NumPad.Logon: Starting in online mode');\n\n            // SAML \n            if (AppCache.userInfo.logonData.type === 'saml') {\n                AppCacheLogonSaml.Relog(auth)\n                return;\n            }\n\n            // OIDC \n            if (AppCache.userInfo.logonData.type === 'openid-connect') {\n                AppCacheLogonOIDC.Relog(auth)\n                return;\n            }\n\n            // Azure\n            if (AppCache.userInfo.logonData.type === 'azure-bearer') {\n                AppCacheLogonAzure.Relog(auth)\n                return;\n            }\n\n            // LDAP/Local\n            const action = [];\n            switch (AppCache.userInfo.logonData.type) {\n                case 'local':\n                    action.push(AppCacheLogonLocal.Relog(auth));\n                    break;\n\n                case 'ldap':\n                    action.push(AppCacheLogonLdap.Relog(auth));\n                    break;\n\n                case 'sap':\n                    action.push(AppCacheLogonSap.Relog(auth));\n                    break;\n            }\n\n            // Build Data\n            Promise\n                .all(action)\n                .then(function (values) {\n                    // Check if OK \n                    if (values[0] === 'OK') {\n                        // Clear\n                        NumPad.numPasscode = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = true;\n\n                        // Start App\n                        AppCache.Encrypted = '';\n                        AppCache.Update();\n                    } else {\n                        NumPad.numPasscode = 0;\n                        NumPad.Clear();\n                        NumPad.Verify = false;\n\n                        sap.m.MessageToast.show(AppCache_tWrongUserNamePass.getText());\n                        AppCache.Logout();\n                    }\n                });\n        }\n    }\n};","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"54700f86-7223-451a-c36a-8db02024123b","fieldName":"Init","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":586,"fieldType":"neptune.Script","script":"// Globals\nlet dataSet = 'Launchpad';\nlet currFav = [];\nlet currTiles = [];\nlet currCategory = [];\nlet currCategoryChild = [];\nlet deviceType;\nlet parentObject;\nlet cacheLoaded = 0;\nlet searchCancelItemPress = false;\nlet navBarTimeout;\nlet screenSplit = 1300;\nlet enableFavDnD = false;\n\n// Get URL Parameters\nlet params = {};\nif (location.search) {\n    let parts = location.search.substring(1).split('&');\n    for (let i = 0; i < parts.length; i++) {\n        let nv = parts[i].split('=');\n        if (!nv[0]) continue;\n        params[nv[0]] = nv[1];\n    }\n}\n\n// TNT Icons\nsap.ui.core.IconPool.registerFont({\n    collectionName: 'tnt',\n    fontFamily: 'SAP-icons-TNT',\n    fontURI: sap.ui.require.toUrl('sap/tnt/themes/base/fonts'),\n    lazy: false\n});\n\n// Wrapper for OnInit Event\nsap.ui.getCore().attachInit(function () {\n    sap.ui.core.BusyIndicator.hide();\n\n    // Enhancement\n    if (params['getEnhancement'] === 'true') sap.n.Enhancement.getSpots();\n\n    // New IOS devices detected as Mac\n    if (isCordova() && sap.ui.Device.os.name === 'mac') sap.ui.Device.os.name === 'iOS';\n\n    // Load Library\n    try {\n        [\n            'sap.ui.core.format.DateFormat',\n            'sap.ui.core.format.NumberFormat',\n            'sap.ui.core.format.FileSizeFormat',\n            'sap.m.MessageBox',\n            'sap.ui.thirdparty.jqueryui.jquery-ui-core',\n            'sap.ui.thirdparty.jqueryui.jquery-ui-sortable',\n        ].forEach(function (name) {\n            jQuery.sap.require(name);\n        });\n    } catch (e) { }\n\n    // Hash Navigation - Clear topmenu/sections\n    if (isSection(location.hash)) location.hash = '';\n\n    // Detect URL Parameters \n    if (params['isMobile'] === 'true') AppCache.isMobile = true;\n    if (params['mobileClient']) AppCache.mobileClient = params['mobileClient'];\n\n    // Add Check for Opera \n    sap.ui.Device.browser.BROWSER.OPERA = \"op\";\n    if (navigator.userAgent.indexOf('Opera') > -1 || navigator.userAgent.indexOf('OPR') > -1) sap.ui.Device.browser.name = 'op';\n\n    // Check for Layout from localStorage\n    let newLayout = localStorage.getItem(AppCache.AppID + '.layout');\n\n    if (newLayout) {\n        try {\n            AppCache.layout = JSON.parse(newLayout);\n        } catch (e) {\n            console.error('Error parsing layout');\n        }\n    }\n\n    // UI Settings Mobile/Desktop\n    if (sap.n.Launchpad.isPhone()) {\n        AppCacheDiaSettings.setStretch(true);\n        diaText.setStretch(true);\n    }\n\n    // Event When changing Theme\n    sap.n.Launchpad.applyThemeMode();\n\n    sap.ui.getCore().attachThemeChanged(function () {\n        sap.n.Launchpad.applyThemeMode();\n    });\n\n    sap.ui.Device.resize.attachHandler(function (mParams) {\n        if (mParams.width < sap.n.Launchpad.verticalMenuLimit) launchpadContentMenu.setWidth('0px');\n        sap.n.Launchpad.setLaunchpadContentWidth();\n    });\n\n    launchpadOverflowClickArea.attachBrowserEvent('click', function (e) {\n        sap.n.Launchpad.overflowMenuClose();\n    });\n    launchpadSettingsClickArea.attachBrowserEvent('click', function (e) {\n        sap.n.Launchpad.settingsMenuClose();\n    });\n\n    toolVerticalMenuFilter.onAfterRendering = function () {\n        const input = toolVerticalMenuFilter.getInputElement();\n\n        if (input) {\n            const attr = input.getAttribute('placeholder');\n            const placeholder = toolVerticalMenuFilter.getPlaceholder() || attr;\n            input.setAttribute('title', placeholder);\n            input.setAttribute('label', placeholder);\n        }\n\n        this.__proto__.onAfterRendering.apply(this);\n    }\n\n    AppCachePageSideTab.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const input = dom.getElementsByTagName('input')[0];\n            if (input) {\n                input.title = 'Side App Select';\n            }\n        }\n\n        this.__proto__.onAfterRendering.apply(this);\n    }\n\n    AppCacheUsers.addEventDelegate({\n        onAfterRendering: () => {\n            if (AppCacheUsers.getItems().length) {\n                AppCacheUsers.getItems()[0].focus();\n            }\n        }\n    });\n\n    applyWCAGFixes();\n\n    setTimeout(function () {\n        // Browser Title \n        if (AppCache.launchpadTitle && AppCache.launchpadTitle !== 'null') document.title = AppCache.launchpadTitle;\n\n        // UI Settings w/StartApp\n        if (AppCache.StartApp) AppCacheShellMenu.setVisible(false);\n\n        // Sort Users\n        AppCacheUsers.getBinding('items').sort(new sap.ui.model.Sorter('username', false, false))\n\n        // Phone UI Handling\n        if (sap.n.Launchpad.isPhone()) {\n            [AppCache_boxLogonCenter, AppCache_boxLogonPasscode, AppCache_boxLogonUsers].forEach(function (i) {\n                i.setHeight('100%');\n                i.addStyleClass('nepFlexPhone');\n            });\n\n            AppCache_boxLogonPasscodeEntry.setHeight('100%');\n\n            [panLogon, panLogonPasscode, panLogonUsers, boxNumpadPanel].forEach(function (i) {\n                i.setWidth('100%');\n                i.setHeight('100%');\n                i.removeStyleClass('nepPanLogonBorder');\n            });\n\n            [panLinks, panLinksUsers, panLinksPass, panLinksPin].forEach(function (i) {\n                i.addStyleClass('nepLinks');\n            });\n        }\n\n        // Models \n        modelContentMenu.setSizeLimit(5000);\n\n        // Config \n        if (AppCache.config) {\n            const c = AppCache.config;\n            // Launchpad Simulate previous setup \n            if (!c.verticalMenu && !c.enableTopMenu && !c.activeAppsSide && !c.showAppTitle && !c.activeAppsTop) {\n                AppCache.config.verticalMenu = false;\n                AppCache.config.enableTopMenu = true;\n                AppCache.config.activeAppsSide = true;\n            }\n\n            // Settings\n            if (c.languages) sap.n.Launchpad.applyLanguages(AppCache.config.languages);\n            if (c.hideTopHeader && !AppCache.isMobile) topMenu.setHeight('0px');\n            if (c.hideLoginSelection) AppCache_loginTypes.setVisible(false);\n            if (\n                c.verticalMenu &&\n                sap.ui.Device.resize.width >= sap.n.Launchpad.verticalMenuLimit &&\n                !AppCache.isMobile\n            ) {\n                sap.n.Launchpad.overflowMenuOpen();\n            }\n\n            // Enhancement\n            if (c.enhancement) {\n                try {\n                    eval(c.enhancement);\n                } catch (e) {\n                    console.log(e);\n                }\n            }\n\n            // Paths\n            if (AppCache.config.ui5ModulePath) {\n                [\n                    'sap.viz', 'sap.chart', 'sap.me', 'sap.ui.comp', 'sap.ushell', 'sap.ui.fl',\n                    'sap.ui.commons', 'sap.ui.ux3', 'sap.suite.ui.microchart', 'sap.suite.ui.commons',\n                ].forEach(function (name) {\n                    const path = AppCache.config.ui5ModulePath + '/' + name.replace(/\\./g, '/');\n                    jQuery.sap.registerModulePath(name, path);\n                });\n            }\n        }\n\n        // Get Setting or Startup\n        if (AppCache.isMobile) {\n            if (!AppCache.enablePwa) {\n                location.hash = '';\n            }\n\n            inAppCacheFormSettingsBACK.setVisible(false);\n            AppCacheUserActionSettings.setVisible(false);\n\n            (function () {\n                function waitForCache() {\n                    if (sap.n.Phonegap.loaded) {\n                        getCacheDataSettings(true);\n                        AppCache.getSettings();\n                    } else {\n                        setTimeout(waitForCache, 50);\n                    }\n                }\n                waitForCache();\n            })();\n        } else {\n            // Get Users Settings\n            getCacheAppCacheDiaSettings(true);\n\n            // Layout\n            if (AppCache.layout) {\n                ModelData.Delete(AppCache.layout, 'active', false);\n\n                // Add to Settings\n                AppCache.layout.forEach(function (data) {\n                    inAppCacheFormSettingsTHEME.addItem(new sap.ui.core.Item({\n                        key: data.id,\n                        text: data.name\n                    }));\n                });\n\n                // Override theme from URL \n                if (params['nep-ui-layout']) modelAppCacheDiaSettings.oData.userTheme = params['nep-ui-layout'];\n\n                if (modelAppCacheDiaSettings.oData && modelAppCacheDiaSettings.oData.userTheme) {\n                    sap.n.Launchpad.applyUserTheme();\n                } else {\n                    sap.n.Launchpad.applyLayout(AppCache.layout[0]);\n                }\n            }\n\n            let logonType = localStorage.getItem('selectedLoginType');\n            if (logonType === 'local') AppCacheUserActionPassword.setVisible(true);\n\n            // Startup\n            AppCache.Startup();\n        }\n\n        // UI Settings\n        topShell.setAppWidthLimited(AppCache.limitWidth);\n\n        // Connect external Tools\n        setTimeout(function () {\n            AppCache.enableExternalTools();\n        }, 500);\n\n        // Blackout tile message\n        sap.n.Adaptive.editor(descBlackout, { editable: false, buttonList: [] });\n\n    }, 100);\n});\n\n// Sorter Function\nlet sort_by = function (field, reverse, primer) {\n    let key = primer ?\n        function (x) {\n            return primer(x[field])\n        } :\n        function (x) {\n            return x[field]\n        };\n    reverse = !reverse ? 1 : -1;\n    return function (a, b) {\n        return a = key(a), b = key(b), reverse * ((a > b) - (b > a));\n    }\n}\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"484846cb-0160-4dbf-e545-78367e13b2f2","fieldName":"GlobalAjaxError","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":587,"fieldType":"neptune.Script","script":"// jQuery's global ajax error event handler - https://api.jquery.com/Ajax_Events/\njQuery(document).ajaxError(function (_event, request, _settings) {\n    sap.ui.core.BusyIndicator.hide();\n    if (AppCache.hideGlobalAjaxError) return;\n\n    const code = request.status;\n    if (code === 401) {\n        // Not logged in -> Exit\n        if (AppCache.isRestricted) return;\n\n        // handling based on authentication method\n        const r = 'refresh';\n        const u = AppCache.userInfo;\n        if (u && u.logonData && u.logonData.type) {\n            const t = u.logonData.type;\n            const decrypted = u.authDecrypted;\n\n            if (t === 'saml') AppCacheLogonSaml.Relog(decrypted, r);\n            else if (t === 'azure-bearer') AppCacheLogonAzure.Relog(decrypted, r);\n            else if (t === 'openid-connect') AppCacheLogonOIDC.Relog(decrypted, r);\n            else if (t === 'local') AppCacheLogonLocal.Relog(decrypted, r);\n            else if (t === 'ldap') AppCacheLogonLdap.Relog(decrypted, r);\n            else if (t === 'sap') AppCacheLogonSap.Relog(decrypted, r);\n        }\n\n        // AutoLogin\n        if (AppCache.enableAutoLogin) AppCacheLogonLocal.Relog(decrypted, r);\n    } else if ([0, 400, 404, 500].includes(code)) {\n    } else {\n        if (!AppCache.isOffline) sap.m.MessageToast.show(`${request.status} - ${request.statusText}`);\n    }\n});","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"5d8d3b28-67d9-4a51-cdda-16ddc3a989bd","fieldName":"CBOR","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":588,"fieldType":"neptune.Script","script":"/*\r\n * The MIT License (MIT)\r\n *\r\n * Copyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n(function (global, undefined) {\r\n    \"use strict\";\r\n    var POW_2_24 = 5.960464477539063e-8,\r\n        POW_2_32 = 4294967296,\r\n        POW_2_53 = 9007199254740992;\r\n\r\n    function encode(value) {\r\n        var data = new ArrayBuffer(256);\r\n        var dataView = new DataView(data);\r\n        var lastLength;\r\n        var offset = 0;\r\n\r\n        function prepareWrite(length) {\r\n            var newByteLength = data.byteLength;\r\n            var requiredLength = offset + length;\r\n            while (newByteLength < requiredLength)\r\n                newByteLength <<= 1;\r\n            if (newByteLength !== data.byteLength) {\r\n                var oldDataView = dataView;\r\n                data = new ArrayBuffer(newByteLength);\r\n                dataView = new DataView(data);\r\n                var uint32count = (offset + 3) >> 2;\r\n                for (var i = 0; i < uint32count; ++i)\r\n                    dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\r\n            }\r\n\r\n            lastLength = length;\r\n            return dataView;\r\n        }\r\n        function commitWrite() {\r\n            offset += lastLength;\r\n        }\r\n        function writeFloat64(value) {\r\n            commitWrite(prepareWrite(8).setFloat64(offset, value));\r\n        }\r\n        function writeUint8(value) {\r\n            commitWrite(prepareWrite(1).setUint8(offset, value));\r\n        }\r\n        function writeUint8Array(value) {\r\n            var dataView = prepareWrite(value.length);\r\n            for (var i = 0; i < value.length; ++i)\r\n                dataView.setUint8(offset + i, value[i]);\r\n            commitWrite();\r\n        }\r\n        function writeUint16(value) {\r\n            commitWrite(prepareWrite(2).setUint16(offset, value));\r\n        }\r\n        function writeUint32(value) {\r\n            commitWrite(prepareWrite(4).setUint32(offset, value));\r\n        }\r\n        function writeUint64(value) {\r\n            var low = value % POW_2_32;\r\n            var high = (value - low) / POW_2_32;\r\n            var dataView = prepareWrite(8);\r\n            dataView.setUint32(offset, high);\r\n            dataView.setUint32(offset + 4, low);\r\n            commitWrite();\r\n        }\r\n        function writeTypeAndLength(type, length) {\r\n            if (length < 24) {\r\n                writeUint8(type << 5 | length);\r\n            } else if (length < 0x100) {\r\n                writeUint8(type << 5 | 24);\r\n                writeUint8(length);\r\n            } else if (length < 0x10000) {\r\n                writeUint8(type << 5 | 25);\r\n                writeUint16(length);\r\n            } else if (length < 0x100000000) {\r\n                writeUint8(type << 5 | 26);\r\n                writeUint32(length);\r\n            } else {\r\n                writeUint8(type << 5 | 27);\r\n                writeUint64(length);\r\n            }\r\n        }\r\n\r\n        function encodeItem(value) {\r\n            var i;\r\n\r\n            if (value === false)\r\n                return writeUint8(0xf4);\r\n            if (value === true)\r\n                return writeUint8(0xf5);\r\n            if (value === null)\r\n                return writeUint8(0xf6);\r\n            if (value === undefined)\r\n                return writeUint8(0xf7);\r\n\r\n            switch (typeof value) {\r\n                case \"number\":\r\n                    if (Math.floor(value) === value) {\r\n                        if (0 <= value && value <= POW_2_53)\r\n                            return writeTypeAndLength(0, value);\r\n                        if (-POW_2_53 <= value && value < 0)\r\n                            return writeTypeAndLength(1, -(value + 1));\r\n                    }\r\n                    writeUint8(0xfb);\r\n                    return writeFloat64(value);\r\n\r\n                case \"string\":\r\n                    var utf8data = [];\r\n                    for (i = 0; i < value.length; ++i) {\r\n                        var charCode = value.charCodeAt(i);\r\n                        if (charCode < 0x80) {\r\n                            utf8data.push(charCode);\r\n                        } else if (charCode < 0x800) {\r\n                            utf8data.push(0xc0 | charCode >> 6);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        } else if (charCode < 0xd800) {\r\n                            utf8data.push(0xe0 | charCode >> 12);\r\n                            utf8data.push(0x80 | (charCode >> 6) & 0x3f);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        } else {\r\n                            charCode = (charCode & 0x3ff) << 10;\r\n                            charCode |= value.charCodeAt(++i) & 0x3ff;\r\n                            charCode += 0x10000;\r\n\r\n                            utf8data.push(0xf0 | charCode >> 18);\r\n                            utf8data.push(0x80 | (charCode >> 12) & 0x3f);\r\n                            utf8data.push(0x80 | (charCode >> 6) & 0x3f);\r\n                            utf8data.push(0x80 | charCode & 0x3f);\r\n                        }\r\n                    }\r\n\r\n                    writeTypeAndLength(3, utf8data.length);\r\n                    return writeUint8Array(utf8data);\r\n\r\n                default:\r\n                    var length;\r\n                    if (Array.isArray(value)) {\r\n                        length = value.length;\r\n                        writeTypeAndLength(4, length);\r\n                        for (i = 0; i < length; ++i)\r\n                            encodeItem(value[i]);\r\n                    } else if (value instanceof Uint8Array) {\r\n                        writeTypeAndLength(2, value.length);\r\n                        writeUint8Array(value);\r\n                    } else {\r\n                        var keys = Object.keys(value);\r\n                        length = keys.length;\r\n                        writeTypeAndLength(5, length);\r\n                        for (i = 0; i < length; ++i) {\r\n                            var key = keys[i];\r\n                            encodeItem(key);\r\n                            encodeItem(value[key]);\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n\r\n        encodeItem(value);\r\n\r\n        if (\"slice\" in data)\r\n            return data.slice(0, offset);\r\n\r\n        var ret = new ArrayBuffer(offset);\r\n        var retView = new DataView(ret);\r\n        for (var i = 0; i < offset; ++i)\r\n            retView.setUint8(i, dataView.getUint8(i));\r\n        return ret;\r\n    }\r\n\r\n    function decode(data, tagger, simpleValue) {\r\n        var dataView = new DataView(data);\r\n        var offset = 0;\r\n\r\n        if (typeof tagger !== \"function\")\r\n            tagger = function (value) { return value; };\r\n        if (typeof simpleValue !== \"function\")\r\n            simpleValue = function () { return undefined; };\r\n\r\n        function commitRead(length, value) {\r\n            offset += length;\r\n            return value;\r\n        }\r\n        function readArrayBuffer(length) {\r\n            return commitRead(length, new Uint8Array(data, offset, length));\r\n        }\r\n        function readFloat16() {\r\n            var tempArrayBuffer = new ArrayBuffer(4);\r\n            var tempDataView = new DataView(tempArrayBuffer);\r\n            var value = readUint16();\r\n\r\n            var sign = value & 0x8000;\r\n            var exponent = value & 0x7c00;\r\n            var fraction = value & 0x03ff;\r\n\r\n            if (exponent === 0x7c00)\r\n                exponent = 0xff << 10;\r\n            else if (exponent !== 0)\r\n                exponent += (127 - 15) << 10;\r\n            else if (fraction !== 0)\r\n                return (sign ? -1 : 1) * fraction * POW_2_24;\r\n\r\n            tempDataView.setUint32(0, sign << 16 | exponent << 13 | fraction << 13);\r\n            return tempDataView.getFloat32(0);\r\n        }\r\n        function readFloat32() {\r\n            return commitRead(4, dataView.getFloat32(offset));\r\n        }\r\n        function readFloat64() {\r\n            return commitRead(8, dataView.getFloat64(offset));\r\n        }\r\n        function readUint8() {\r\n            return commitRead(1, dataView.getUint8(offset));\r\n        }\r\n        function readUint16() {\r\n            return commitRead(2, dataView.getUint16(offset));\r\n        }\r\n        function readUint32() {\r\n            return commitRead(4, dataView.getUint32(offset));\r\n        }\r\n        function readUint64() {\r\n            return readUint32() * POW_2_32 + readUint32();\r\n        }\r\n        function readBreak() {\r\n            if (dataView.getUint8(offset) !== 0xff) return false;\r\n            offset += 1;\r\n            return true;\r\n        }\r\n        function readLength(additionalInformation) {\r\n            if (additionalInformation < 24) return additionalInformation;\r\n            if (additionalInformation === 24) return readUint8();\r\n            if (additionalInformation === 25) return readUint16();\r\n            if (additionalInformation === 26) return readUint32();\r\n            if (additionalInformation === 27) return readUint64();\r\n            if (additionalInformation === 31) return -1;\r\n            throw \"Invalid length encoding\";\r\n        }\r\n        function readIndefiniteStringLength(majorType) {\r\n            var initialByte = readUint8();\r\n            if (initialByte === 0xff)\r\n                return -1;\r\n            var length = readLength(initialByte & 0x1f);\r\n            if (length < 0 || (initialByte >> 5) !== majorType)\r\n                throw \"Invalid indefinite length element\";\r\n            return length;\r\n        }\r\n\r\n        function appendUtf16Data(utf16data, length) {\r\n            for (var i = 0; i < length; ++i) {\r\n                var value = readUint8();\r\n                if (value & 0x80) {\r\n                    if (value < 0xe0) {\r\n                        value = (value & 0x1f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 1;\r\n                    } else if (value < 0xf0) {\r\n                        value = (value & 0x0f) << 12\r\n                            | (readUint8() & 0x3f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 2;\r\n                    } else {\r\n                        value = (value & 0x0f) << 18\r\n                            | (readUint8() & 0x3f) << 12\r\n                            | (readUint8() & 0x3f) << 6\r\n                            | (readUint8() & 0x3f);\r\n                        length -= 3;\r\n                    }\r\n                }\r\n\r\n                if (value < 0x10000) {\r\n                    utf16data.push(value);\r\n                } else {\r\n                    value -= 0x10000;\r\n                    utf16data.push(0xd800 | (value >> 10));\r\n                    utf16data.push(0xdc00 | (value & 0x3ff));\r\n                }\r\n            }\r\n        }\r\n\r\n        function decodeItem() {\r\n            var initialByte = readUint8();\r\n            var majorType = initialByte >> 5;\r\n            var additionalInformation = initialByte & 0x1f;\r\n            var i;\r\n            var length;\r\n\r\n            if (majorType === 7) {\r\n                switch (additionalInformation) {\r\n                    case 25:\r\n                        return readFloat16();\r\n                    case 26:\r\n                        return readFloat32();\r\n                    case 27:\r\n                        return readFloat64();\r\n                }\r\n            }\r\n\r\n            length = readLength(additionalInformation);\r\n            if (length < 0 && (majorType < 2 || 6 < majorType)) throw \"Invalid length\";\r\n\r\n            switch (majorType) {\r\n                case 0:\r\n                    return length;\r\n                case 1:\r\n                    return -1 - length;\r\n                case 2:\r\n                    if (length < 0) {\r\n                        var elements = [];\r\n                        var fullArrayLength = 0;\r\n                        while ((length = readIndefiniteStringLength(majorType)) >= 0) {\r\n                            fullArrayLength += length;\r\n                            elements.push(readArrayBuffer(length));\r\n                        }\r\n                        var fullArray = new Uint8Array(fullArrayLength);\r\n                        var fullArrayOffset = 0;\r\n                        for (i = 0; i < elements.length; ++i) {\r\n                            fullArray.set(elements[i], fullArrayOffset);\r\n                            fullArrayOffset += elements[i].length;\r\n                        }\r\n                        return fullArray;\r\n                    }\r\n                    return readArrayBuffer(length);\r\n                case 3:\r\n                    var utf16data = [];\r\n                    if (length < 0) {\r\n                        while ((length = readIndefiniteStringLength(majorType)) >= 0)\r\n                            appendUtf16Data(utf16data, length);\r\n                    } else\r\n                        appendUtf16Data(utf16data, length);\r\n                    return String.fromCharCode.apply(null, utf16data);\r\n                case 4:\r\n                    var retArray;\r\n                    if (length < 0) {\r\n                        retArray = [];\r\n                        while (!readBreak())\r\n                            retArray.push(decodeItem());\r\n                    } else {\r\n                        retArray = new Array(length);\r\n                        for (i = 0; i < length; ++i)\r\n                            retArray[i] = decodeItem();\r\n                    }\r\n                    return retArray;\r\n                case 5:\r\n                    var retObject = {};\r\n                    for (i = 0; i < length || length < 0 && !readBreak(); ++i) {\r\n                        var key = decodeItem();\r\n                        retObject[key] = decodeItem();\r\n                    }\r\n                    return retObject;\r\n                case 6:\r\n                    return tagger(decodeItem(), length);\r\n                case 7:\r\n                    switch (length) {\r\n                        case 20:\r\n                            return false;\r\n                        case 21:\r\n                            return true;\r\n                        case 22:\r\n                            return null;\r\n                        case 23:\r\n                            return undefined;\r\n                        default:\r\n                            return simpleValue(length);\r\n                    }\r\n            }\r\n        }\r\n\r\n        var ret = decodeItem();\r\n        if (offset !== data.byteLength)\r\n            throw \"Remaining bytes\";\r\n        return ret;\r\n    }\r\n\r\n    var obj = { encode: encode, decode: decode };\r\n    window.CBOR = obj;\r\n\r\n})(this);\r\n","customComponent":false,"request":[],"response":[],"attributes":[]},{"fieldNo":"7dde1e17-3273-4811-de56-7767ae8a36a3","fieldName":"WCAG","fieldParent":"00323fe3-7d1a-4da1-a549-5fc51fb40e6a","fieldPos":589,"fieldType":"neptune.Script","script":"// Based upon code from https://github.com/LordOfTheStack/UI5-WCAG-HELPER\n// Removed jQuery usage\n\n// MIT License\n\n// Copyright (c) 2020 Lord Phillip Smith\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction applyWCAGFixes() {\n    const panelAfterRender = sap.m.Panel.prototype.onAfterRendering;\n    sap.m.Panel.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n        if (dom && !this.getHeaderText()) {\n            dom.removeAttribute('aria-labelledby');\n        }\n\n        panelAfterRender.apply(this);\n    }\n\n    const buttonAfterRender = sap.m.Button.prototype.onAfterRendering;\n    sap.m.Button.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n        if (!this.getText() && dom) {\n            const tooltip = dom.getAttribute(\"title\");\n\n            if (tooltip) {\n                dom.setAttribute(\"aria-label\", tooltip);\n            }\n        }\n\n        buttonAfterRender.apply(this);\n    }\n\n    const checkboxAfterRender = sap.m.CheckBox.prototype.onAfterRendering;\n    sap.m.CheckBox.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const input = dom.getElementsByTagName('input')[0];\n            const ariaLabel = dom.getAttribute('aria-labelledby');\n\n            if (ariaLabel) {\n                const splitLabel = ariaLabel.split(' ');\n\n                if (splitLabel && splitLabel.length) {\n                    const formLabel = document.getElementById(splitLabel[0]);\n\n                    if (formLabel) {\n                        formLabel.setAttribute('for', input.id);\n                    }\n                }\n            }\n\n            if (input && ariaLabel) {\n                input.setAttribute('aria-labelledby', ariaLabel);\n            }\n\n            const text = this.getText();\n            if (input && !ariaLabel) {\n                input.setAttribute('aria-label', text);\n            }\n        }\n\n        checkboxAfterRender.apply(this);\n    }\n\n    const selectAfterRender = sap.m.Select.prototype.onAfterRendering;\n    sap.m.Select.prototype.onAfterRendering = function () {\n        const dom = this.getDomRef();\n\n        if (dom) {\n            const labels = dom.getElementsByTagName('label');\n\n            if (labels && labels.length) { \n                for (const label of labels) {\n                    label.outerHTML = label.outerHTML.replaceAll('label', 'span');\n                }\n            }\n        }\n\n        selectAfterRender.apply(this);\n    }\n}","customComponent":false,"request":[],"response":[],"attributes":[]}],"ui5_chart":false,"ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_bootstrap":false,"ui5_ionic":false,"libHighchart":false,"libHighmap":false}}