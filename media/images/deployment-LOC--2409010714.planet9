{"Adaptive":[{"id":"2544d0e1-e557-4056-aaf2-9cec200e2eaa","createdAt":"2023-10-12T19:28:23.248Z","updatedAt":"2024-06-25T22:13:32.006Z","createdBy":"playwright","changedBy":"playwright","settings":{"properties":{"report":{"showIcon":true,"actionButtonLeft":false,"iconButtonClose":"","textButtonClose":"Close","typeButtonClose":"Transparent","iconButtonSave":"","textButtonSave":"Save","textToastSave":"Saved","typeButtonSave":"Emphasized","iconButtonDelete":"","textButtonDelete":"Delete","textToastDelete":"Deleted","typeButtonDelete":"Reject","iconButtonAttachment":"","textButtonAttachment":"Add Attachment","typeButtonAttachment":"Transparent","tab0Text":"General","tabAText":"Attachment","tab1Text":"Tab 1","tab2Text":"Tab 2","tab3Text":"Tab 3","tab4Text":"Tab 4","tab5Text":"Tab 5","enableClose":true,"enableSave":true,"enableDelete":false,"enableAttachment":false,"enableTab1":false,"enableTab2":false,"enableTab3":false,"enableTab4":false,"enableTab5":false,"enableUppercase":false,"enablePadding":true,"title":"","avatarBackgroundColor":"Accent1","dynamicTitle":"City","dynamicSubTitle":"","subTitle":"Sample","textConfirmDelete":"Do you want to delete this entry ? ","titleConfirmDelete":"Delete ","requiredFieldsToast":"Please fill in all the required fields","confirmationCheckCreate":true,"confirmationCheckUpdate":true,"titleConfirmCreate":"Create record","textConfirmCreate":"Are you sure you want to create this entry?","titleConfirmUpdate":"Update record","textConfirmUpdate":"Are you sure you want to update this entry?"},"form":{"enableCompact":false,"enableCentered":true},"table":{}},"fieldCatalog":[{"name":"Code","label":"Code","type":"text","usage":"BOTH"},{"name":"City","label":"City","type":"text","usage":"BOTH"},{"name":"Json","label":"Json","type":"json","usage":"BOTH"},{"name":"Population","label":"Population","type":"bigint","usage":"BOTH"},{"name":"uuid","label":"uuid","type":"uuid","usage":"BOTH"},{"name":"updatedAt","label":"Updated At","type":"timestamp","usage":"BOTH"},{"name":"createdAt","label":"Created At","type":"timestamp","usage":"BOTH"},{"name":"updatedBy","label":"Updated By","type":"text","usage":"BOTH"},{"name":"createdBy","label":"Created By","type":"text","usage":"BOTH"}],"fieldsSel":[{"inputFormatter":"","editable":true,"visible":true,"name":"Code","text":"Code","fieldPos":1,"required":true,"visibleFieldName":"City","visibleCondition":"isEmpty","visibleFixedValue":"BXU","visibleSystemValue":"","visibleInverse":false,"type":"Input","lookupTable":"auto-increment","lookupFieldKey":"id","lookupFieldText":"test"},{"inputFormatter":"","editable":true,"visible":true,"name":"City","text":"City","fieldPos":2,"visibleFieldName":"Code","visibleCondition":"===","visibleFixedValue":"test","visibleInverse":true,"type":"MultiSelectLookup","lookupTable":"city_copy","lookupFieldKey":"id","lookupFieldText":"Code","lookupShowOnlyText":true,"scriptSelect":"f8a3565c-9111-4d4a-b0f8-64f46c9e2fb1"},{"inputFormatter":"","editable":true,"visible":true,"name":"Json","text":"Json","fieldPos":3,"type":"JSON","required":true},{"inputFormatter":"","editable":true,"visible":true,"name":"Population","text":"Population","fieldPos":4,"inputType":"Number","visibleFieldName":"","type":"Input"},{"inputFormatter":"","editable":true,"visible":true,"name":"updatedAt","text":"Updated At","fieldPos":5,"type":"Display"}],"fieldsRun":[],"defaultVariant":{"id":"fd0eb795-cb26-466f-bf07-50ffd0923232","colOrder":"key_a_to_z","rowOrder":"key_a_to_z","row":[],"column":[],"val":[],"inclusions":{},"exclusions":{}},"translation":{"BG":{"report":{"title":"","subTitle":"Пример","textUnique":"","textButtonClose":"Затвори","textButtonSave":"Запази","textToastSave":"Запазено","textButtonDelete":"Изтрий","textToastDelete":"Изтрито","textButtonAttachment":"Добави приложение","tab0Text":"Общ","tabAText":"Приложение","tab1Text":"Раздел 1","tab2Text":"Раздел 2","tab3Text":"Раздел 3","tab4Text":"Раздел 4","tab5Text":"Раздел 5"},"form":{},"table":{},"fieldCatalog":{"City":"Град","Code":"Код","createdAt":"Създадено на","createdBy":"Създадено от","Json":"Json","updatedAt":"Обновено на","updatedBy":"Обновено от"}}}},"name":"CITY_ADAPTIVE_APP_edit","description":"","group":"","type":"C","connectorid":"3531472e-c241-4ac7-8681-e2a9348421d4","scriptSel":null,"scriptRun":null,"tableid":null,"ver":"24.06.25.2213","disabled":false,"appType":"A","application":"planet9_adaptive_edit","package":null,"roles":[]},{"id":"18d083d8-5507-4df5-9f1e-6a0de094022e","createdAt":"2024-05-07T14:14:43.888Z","updatedAt":"2024-09-01T17:12:16.418Z","createdBy":"playwright","changedBy":"playwright","settings":{"properties":{"report":{"showIcon":true,"actionButtonLeft":false,"iconButtonClose":"","textButtonClose":"Close","typeButtonClose":"Transparent","iconButtonCreate":"sap-icon://fas/frog","textButtonCreate":"Create","typeButtonCreate":"Reject","iconButtonExport":"sap-icon://excel-attachment","textButtonExport":"","typeButtonExport":"Accept","iconButtonImport":"sap-icon://nep/import","textButtonImport":"Import","typeButtonImport":"Transparent","iconButtonMultiSelect":"","textButtonMultiSelect":"MultiSelect","typeButtonMultiSelect":"Emphasized","iconButtonRun":"","textButtonRun":"Update","typeButtonRun":"Emphasized","enableRun":true,"enableCreate":true,"enableClose":false,"enableDelete":true,"enableExport":true,"enableImport":true,"enableMultiSelect":false,"enableVariant":true,"autoRun":true,"autoRunFocus":false,"searchLabel":"Search","searchPlaceholder":"","hideHeader":false,"_navigationItemPress":{"destinationType":"F","openAs":"S","butType":"Accept","destinationTargetF":"2544d0e1-e557-4056-aaf2-9cec200e2eaa","keyField":[],"dialogResize":true,"dialogIcon":"sap-icon://fas/1","fieldType":"Navigation","displayResponse":false,"dialogHeader":true,"dialogTitle":"Sample Title"},"_navigationCreate":{"destinationType":"F","openAs":"D","butType":"Accept","destinationTargetF":"2544d0e1-e557-4056-aaf2-9cec200e2eaa","keyField":[]},"requiredFieldsToast":"Please fill in all required fields","textConfirmDelete":"Do you want to delete this entry ? ","titleConfirmDelete":"Delete","odataValueList":"Field does not have any OData ValueList reference","avatarIcon":"","title":"Sample","paginationRows":10,"updateTime":0},"form":{"enableCompact":false,"headerExpanded":true,"headerPreserveState":false,"filterExpandable":true,"showFilter":false,"enableSearchWildcard":true},"table":{"enablePagination":false,"paginationShowSelection":false,"paginationRows":"1000","showSeparators":"All","alternateRowColors":false,"fixedLayout":false,"inset":false,"enableCompact":false,"enableAction1":false,"enableAction2":false,"enableAction3":false,"enableAction4":false,"enableAction5":false,"action1Text":"","action1Type":"Transparent","action2Text":"","action2Type":"Transparent","action3Text":"","action3Type":"Transparent","action4Text":"","action4Type":"Transparent","action5Text":"","action5Type":"Transparent","enableAutoPopin":false}},"fieldCatalog":[{"name":"Code","label":"Code","type":"text","usage":"BOTH"},{"name":"City","label":"City","type":"text","usage":"BOTH"},{"name":"Json","label":"Json","type":"json","usage":"BOTH"},{"name":"Population","label":"Population","type":"bigint","usage":"BOTH"},{"name":"uuid","label":"uuid","type":"uuid","usage":"BOTH"},{"name":"Link","label":"Link","type":"text","usage":"BOTH"},{"name":"updatedAt","label":"Updated At","type":"timestamp","usage":"BOTH"},{"name":"createdAt","label":"Created At","type":"timestamp","usage":"BOTH"},{"name":"updatedBy","label":"Updated By","type":"text","usage":"BOTH"},{"name":"createdBy","label":"Created By","type":"text","usage":"BOTH"}],"fieldsSel":[{"visible":true,"name":"Code","text":"Code","fieldPos":1}],"fieldsRun":[{"buttonType":"Transparent","popinDisplay":"Block","enableFilter":true,"enableSort":true,"visible":true,"name":"Code","text":"Code","fieldPos":2,"type":"","_navigation":{"destinationType":"F","openAs":"P","butType":"Default"},"linkHrefType":""},{"buttonType":"Transparent","popinDisplay":"Block","enableFilter":false,"enableSort":true,"visible":true,"name":"City","text":"City","fieldPos":3},{"buttonType":"Transparent","popinDisplay":"Inline","enableFilter":false,"enableSort":true,"visible":true,"name":"Population","text":"Population","fieldPos":4,"type":"ObjectNumber","formatter":"number00"},{"buttonType":"Transparent","popinDisplay":"Inline","enableFilter":true,"enableSort":true,"visible":true,"name":"Json","text":"Json","fieldPos":5,"type":"JSON"}],"defaultVariant":{"id":"a847b56c-824d-45b8-e4d9-dc66e2fea626","colOrder":"key_a_to_z","rowOrder":"key_a_to_z","row":[],"column":[],"val":[],"inclusions":{},"exclusions":{}}},"name":"city_adaptive_app_2","description":"","group":"","type":"C","connectorid":"3531472e-c241-4ac7-8681-e2a9348421d4","scriptSel":null,"scriptRun":null,"tableid":null,"ver":"24.09.01.1712","disabled":false,"appType":"A","application":"planet9_adaptive_list","package":null,"roles":[]}],"Application":[{"id":"c68e1624-ec29-48bc-a7e0-109f9b54fd66","createdAt":"2022-02-04T15:46:43.863Z","updatedAt":"2024-08-30T18:28:34.152Z","createdBy":"luuk.wosten@neptune-software.com","changedBy":"system","objects":[{"fieldNo":"703de203-7d98-415e-a701-39fb51fb99fa","fieldName":"oApp","fieldParent":0,"fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"defaultTransitionName","grouping":"Properties","value":"show","script":"","translation":[]},{"attribute":"busyIndicatorDelay","grouping":"Properties","value":"0","script":"","translation":[]}],"fieldPos":1},{"fieldNo":"34b08b06-7d84-4896-b488-b87695b927cd","fieldName":"oPage","fieldParent":"703de203-7d98-415e-a701-39fb51fb99fa","fieldType":"sap.f.DynamicPage","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"preserveHeaderStateOnScroll","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"toggleHeaderOnTitleClick","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDynamicPage","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":2},{"fieldNo":"21fdd8a5-cc9b-4e5d-e496-e23103436b96","fieldName":"oPageTitle","fieldParent":"34b08b06-7d84-4896-b488-b87695b927cd","fieldType":"sap.f.DynamicPageTitle","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepFlexWrap","script":"","translation":[]}],"fieldPos":3},{"fieldNo":"b1ec60cb-5cc2-43d8-b49b-7f3075d3fe3c","fieldName":"oPageContentHeader","fieldParent":"21fdd8a5-cc9b-4e5d-e496-e23103436b96","fieldType":"neptune.DynamicPageTitleContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setHeading","script":"","translation":[]}],"fieldPos":4},{"fieldNo":"ea2b3d0f-87d3-4746-ee9e-5100fcab0261","fieldName":"oPageHeaderBox","fieldParent":"b1ec60cb-5cc2-43d8-b49b-7f3075d3fe3c","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":5},{"fieldNo":"603a4061-dd40-440c-b914-7726ad48f1fb","fieldName":"oPageHeaderIcon","fieldParent":"ea2b3d0f-87d3-4746-ee9e-5100fcab0261","fieldType":"sap.f.Avatar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/showIcon}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"{AppConfig>/settings/properties/report/avatarIcon}","script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]}],"fieldPos":6},{"fieldNo":"09991c15-3133-47f8-a7f5-31eba7ff8eaf","fieldName":"oPageHeaderIconMobile","fieldParent":"ea2b3d0f-87d3-4746-ee9e-5100fcab0261","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/showIcon}","script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiVisibleOnlyOnPhone","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"{AppConfig>/settings/properties/report/icon}","script":"","translation":[]}],"fieldPos":7},{"fieldNo":"3703179d-7bf4-4019-9d93-5fbcc8674d14","fieldName":"oPageHeaderVBox","fieldParent":"ea2b3d0f-87d3-4746-ee9e-5100fcab0261","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBegin","script":"","translation":[]}],"fieldPos":8},{"fieldNo":"3c0ce6ef-43e6-4cce-91ae-9e5e1d6fa8d5","fieldName":"oPageHeaderTitle","fieldParent":"3703179d-7bf4-4019-9d93-5fbcc8674d14","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginEnd","script":"","translation":[]},{"attribute":"level","grouping":"Properties","value":"H1","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":9},{"fieldNo":"f42caedf-0413-4c29-ba47-5800c2d70d2f","fieldName":"oPageHeaderSubTitle","fieldParent":"3703179d-7bf4-4019-9d93-5fbcc8674d14","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]}],"fieldPos":10},{"fieldNo":"fc9d89ea-1ada-447f-fe33-672a58bdb137","fieldName":"oPageContentAction","fieldParent":"21fdd8a5-cc9b-4e5d-e496-e23103436b96","fieldType":"neptune.DynamicPageTitleContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"addNavigationAction","script":"","translation":[]}],"fieldPos":11},{"fieldNo":"d59217bc-860a-413b-eaa8-d55b973154f7","fieldName":"toolHeaderSave","fieldParent":"fc9d89ea-1ada-447f-fe33-672a58bdb137","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableSave}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonSave}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/textButtonSave}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonSave}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const existingEntry = modelAppData.getData().id;\n\nconst settings = modelAppConfig.getData().settings.properties.report;\n\nconst shouldCheckCreate = !existingEntry && settings.confirmationCheckCreate;\nconst shouldCheckUpdate = existingEntry && settings.confirmationCheckUpdate;\nconst shouldCheck = shouldCheckCreate || shouldCheckUpdate;\n\nif (shouldCheck) {\n    const propertyMessage = existingEntry ? 'textConfirmUpdate' : 'textConfirmCreate';\n    const propertyTitle = existingEntry ? 'titleConfirmUpdate' : 'titleConfirmCreate';\n\n    const message = neptune.Adaptive.translateProperty('report', propertyMessage, modelAppConfig.getData());\n\n    sap.m.MessageBox.confirm(message, {\n        title: neptune.Adaptive.translateProperty('report', propertyTitle, modelAppConfig.getData()),\n        onClose: function (oAction) {\n            if (oAction === 'OK') {\n                report.save();\n            }\n        }\n    })\n} else {\n    report.save();\n}\n","language":"javascript","translation":[]}],"fieldPos":12},{"fieldNo":"ae26bab8-56c9-4385-f3ab-7bdc8060fac1","fieldName":"toolHeaderDelete","fieldParent":"fc9d89ea-1ada-447f-fe33-672a58bdb137","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{= ${AppConfig>/settings/properties/report/enableDelete} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonDelete}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/textButtonDelete}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonDelete}","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"report.delete();","script":"report.delete();","translation":[]}],"fieldPos":13},{"fieldNo":"014a2cf3-ddc9-43eb-80af-3738d54891cd","fieldName":"toolHeaderBack","fieldParent":"fc9d89ea-1ada-447f-fe33-672a58bdb137","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableClose}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonClose}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/textButtonClose}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonClose}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const { openAs } = (modelAppConfig.oData.settings?.navigation || {});\n\nif (openAs === 'S') {\n    const tabKey = oApp.getParent().getParent().getProperty('key');\n    sap.n.Shell.closeSidepanelTab(tabKey);\n} else {\n    // 'D' = Dialog or 'F' = Fullscreen\n    report.close();\n}","language":"javascript","translation":[]}],"fieldPos":14},{"fieldNo":"19fc2edd-d1ef-42ed-d3d1-3f984943ee10","fieldName":"oPageContent","fieldParent":"34b08b06-7d84-4896-b488-b87695b927cd","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepNoRadiusTop","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":15},{"fieldNo":"d872a18c-5393-45db-9c4a-b73ca76c98a5","fieldName":"panMain","fieldParent":"19fc2edd-d1ef-42ed-d3d1-3f984943ee10","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":16},{"fieldNo":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldName":"barEdit","fieldParent":"19fc2edd-d1ef-42ed-d3d1-3f984943ee10","fieldType":"sap.m.IconTabBar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"upperCase","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableUppercase}","script":"","translation":[]},{"attribute":"stretchContentHeight","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"headerMode","grouping":"Properties","value":"Inline","script":"","translation":[]},{"attribute":"expandable","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"applyContentPadding","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enablePadding}","script":"","translation":[]}],"fieldPos":17},{"fieldNo":"a5008e0f-5db7-4a92-f4dd-9d549d72cd61","fieldName":"barEditItemMain","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab0Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab0Icon}","script":"","translation":[]}],"fieldPos":18},{"fieldNo":"c468d10a-3dc5-478b-9d01-2f13e372e4c2","fieldName":"panItemMain","fieldParent":"a5008e0f-5db7-4a92-f4dd-9d549d72cd61","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":19},{"fieldNo":"3b8a7093-e143-4087-fe64-473143feab84","fieldName":"barEditItemA","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableAttachment}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tabAText}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tabAIcon}","script":"","translation":[]}],"fieldPos":20},{"fieldNo":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldName":"tabAttachment","fieldParent":"3b8a7093-e143-4087-fe64-473143feab84","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"mode","grouping":"Properties","value":"Delete","script":"","translation":[]},{"attribute":"fixedLayout","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"updateFinished","grouping":"Events","value":"Anonymous Function","script":"let binding = tabAttachment.getBinding('items');\nbarEditItemA.setCount(binding.getLength());","language":"javascript","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"var deleteItem = oEvent.getParameter(\"listItem\");\nvar context = deleteItem.getBindingContext();\nvar file = context.getObject();\n\nsap.m.MessageBox.show('Do you want to delete this file ? ', {\n    title: 'Delete',\n    icon: sap.m.MessageBox.Icon.ERROR,\n    actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n    onClose: function (oAction) {\n\n        if (oAction === 'YES') {\n\n            $.ajax({\n                type: \"POST\",\n                contentType: \"application/json\",\n                url: \"/api/functions/Gos/Delete\",\n                data: JSON.stringify(file),\n                success: function (data) {\n                    ModelData.Delete(tabAttachment, \"id\", file.id);\n                },\n                error: function (data) {\n                    console.log(data);\n                }\n            });\n\n        }\n\n    }\n});\n\n","translation":[]}],"fieldPos":21},{"fieldNo":"2a36ab9b-1f8a-4b32-aca3-e16413954e92","fieldName":"toolAttachment","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":22},{"fieldNo":"4212eefa-cc63-4f25-c0b1-c656d408fe99","fieldName":"toolAttachmentTitle","fieldParent":"2a36ab9b-1f8a-4b32-aca3-e16413954e92","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Attachments","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Bold","script":"","translation":[]}],"fieldPos":23},{"fieldNo":"3f056f7c-ad46-45f9-8ef1-970038a15dc4","fieldName":"toolAttachmentSpacer","fieldParent":"2a36ab9b-1f8a-4b32-aca3-e16413954e92","fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":24},{"fieldNo":"e3522ae8-4dd2-4a53-f205-cc4ae06caf0d","fieldName":"toolAttachmentAdd","fieldParent":"2a36ab9b-1f8a-4b32-aca3-e16413954e92","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableAttachment}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonAttachment}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/textButtonAttachment}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonAttachment}","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"{= ${AppData>/id} ? true:false}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.uploadFieldAfterRender();\n$(\"#_editUploader\").click();","language":"javascript","translation":[]}],"fieldPos":25},{"fieldNo":"ef966339-89a7-4821-a3f6-a71c0e9561c4","fieldName":"coltabAttachmentname","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":26},{"fieldNo":"9df58b6c-a8b8-4d44-d078-46aa3c42f90e","fieldName":"colHtabAttachmentname","fieldParent":"ef966339-89a7-4821-a3f6-a71c0e9561c4","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Name","script":"","translation":[]}],"fieldPos":27},{"fieldNo":"c5f83173-8e97-4661-ace6-6fd809688000","fieldName":"coltabAttachmentfileSize","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":28},{"fieldNo":"1e31752d-0f0d-4a33-e36d-6a516d4e285d","fieldName":"colHtabAttachmentfileSize","fieldParent":"c5f83173-8e97-4661-ace6-6fd809688000","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Size","script":"","translation":[]}],"fieldPos":29},{"fieldNo":"dcada9ac-33d9-4411-e1e3-af269a9b5c81","fieldName":"coltabAttachmentupdatedAt","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":30},{"fieldNo":"537518b8-0c17-451c-82d1-d052d65aa9cb","fieldName":"colHtabAttachmentupdatedAt","fieldParent":"dcada9ac-33d9-4411-e1e3-af269a9b5c81","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Uploaded At","script":"","translation":[]}],"fieldPos":31},{"fieldNo":"9b24bb15-99ee-4f09-a459-034f3df85e0c","fieldName":"coltabAttachmentchangedBy","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":32},{"fieldNo":"df8cdfa9-ccfe-49ca-a780-d16a0ef54ddd","fieldName":"colHtabAttachmentchangedBy","fieldParent":"9b24bb15-99ee-4f09-a459-034f3df85e0c","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Uploaded By","script":"","translation":[]}],"fieldPos":33},{"fieldNo":"c6fff815-901b-43d6-c815-9ff6e27486f6","fieldName":"colItemtabAttachment","fieldParent":"ffe0616e-50bc-4ed0-ab18-ff367c4a69c7","fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"var context = oEvent.oSource.getBindingContext();\nvar file = context.getObject();\n\n$.ajax({\n    type: \"POST\",\n    contentType: \"application/json\",\n    url: \"/api/functions/Gos/Get\",\n    data: JSON.stringify(file),\n    success: function (data) {\n\n        // Mobile \n        if (isCordova()) {\n            var fileData = data.content.split(\",\");\n            attachmentNativeOpen(fileData[1], file.fileType, file.name);\n        } else {\n            // Download Browser\n            if (window.navigator.msSaveOrOpenBlob) {\n                var fileData = [data.content];\n                var blobObject = new Blob(fileData);\n                window.navigator.msSaveOrOpenBlob(blobObject, file.name);\n            } else {\n                a = document.createElement('a');\n                a.setAttribute(\"href\", data.content);\n                a.setAttribute(\"download\", file.name);\n                a.click();\n            }\n\n        }\n\n    },\n    error: function (data) {\n        console.log(data);\n    }\n});\n","translation":[]}],"fieldPos":34},{"fieldNo":"ed9bb966-2526-48e8-c8e4-b3ecbdb1c6b5","fieldName":"txttabAttachmentname","fieldParent":"c6fff815-901b-43d6-c815-9ff6e27486f6","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{name}","script":"","translation":[]}],"fieldPos":35},{"fieldNo":"59f86cbf-7308-4ae4-d539-c0be664aabd6","fieldName":"txttabAttachmentfileSize","fieldParent":"c6fff815-901b-43d6-c815-9ff6e27486f6","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{fileSize}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"Anonymous Function","script":"if (typeof fileSize === \"undefined\" || fileSize === null || fileSize === \"\") {\n    return;\n}\nreturn oFileSizeFormat.format(fileSize);if (typeof fileSize === \"undefined\" || fileSize === null || fileSize === \"\") {\n    return;\n}\nreturn oFileSizeFormat.format(fileSize);","translation":[]}],"fieldPos":36},{"fieldNo":"8ae641ed-60c9-4857-b490-99ec714bcc5f","fieldName":"txttabAttachmentupdatedAt","fieldParent":"c6fff815-901b-43d6-c815-9ff6e27486f6","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{updatedAt}","script":"","translation":[]},{"attribute":"text","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}],"fieldPos":37},{"fieldNo":"a284a672-e2aa-432e-b34b-541c95a49619","fieldName":"txttabAttachmentchangedBy","fieldParent":"c6fff815-901b-43d6-c815-9ff6e27486f6","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{changedBy}","script":"","translation":[]}],"fieldPos":38},{"fieldNo":"bd91bd43-dd30-43dd-8ca7-85bc66409cc8","fieldName":"barEditItem1","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableTab1}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab1Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab1Icon}","script":"","translation":[]}],"fieldPos":39},{"fieldNo":"8d7f5739-afa4-4b65-be9f-c860ef998be0","fieldName":"barEditItem2","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableTab2}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab2Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab2Icon}","script":"","translation":[]}],"fieldPos":40},{"fieldNo":"05111a31-faf5-473b-bab4-6c5866026232","fieldName":"barEditItem3","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableTab3}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab3Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab3Icon}","script":"","translation":[]}],"fieldPos":41},{"fieldNo":"f40b93b3-b712-4045-c92d-b8cf9f4febc4","fieldName":"barEditItem4","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableTab4}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab4Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab4Icon}","script":"","translation":[]}],"fieldPos":42},{"fieldNo":"afb6bf58-f4f4-44f6-938f-5dadf7dcc4d9","fieldName":"barEditItem5","fieldParent":"346959a6-7977-45fb-fc05-964e4dc7d546","fieldType":"sap.m.IconTabFilter","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableTab5}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab5Text}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/tab5Icon}","script":"","translation":[]}],"fieldPos":43},{"fieldNo":"a15db919-2091-41f5-e1c2-72ff3998fea7","fieldName":"oHTMLUpload","fieldParent":"19fc2edd-d1ef-42ed-d3d1-3f984943ee10","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"afterRendering","grouping":"Events","value":"report.uploadFieldAfterRender();","script":"report.uploadFieldAfterRender();","translation":[]}],"fieldPos":44},{"fieldNo":"f0ab1706-4918-4e6b-a69f-f3ea20b75932","fieldName":"oHTML","fieldParent":"a15db919-2091-41f5-e1c2-72ff3998fea7","fieldType":"neptune.Html","script":"<input name='_editUploader' accept='*' id='_editUploader' type='file' style='display:none;' value='' />","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":45},{"fieldNo":"51058dd9-2a76-4053-f6d2-c761840765a5","fieldName":"Dialogs","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":46},{"fieldNo":"96e5a2d4-aed3-4535-ccd3-c0d26b0a4ec6","fieldName":"diaJSONSave","fieldParent":"51058dd9-2a76-4053-f6d2-c761840765a5","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"OK","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"try {\n    const newValue = editorJSON.getValue().trim();\n    const newJson = !newValue.length ? \"\" : JSON.parse(newValue);\n    modelAppData.getData()[editorData.fieldName] = newJson;\n    modelAppData.refresh(true);\n    diaJSON.close();\n} catch (e) {\n    sap.m.MessageToast.show(\"Error: Not valid json. \" + e.message);\n    return;\n}\n","translation":[]}],"fieldPos":47},{"fieldNo":"c96c9e13-f715-4fa3-bc67-590179999567","fieldName":"diaJSON","fieldParent":"51058dd9-2a76-4053-f6d2-c761840765a5","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"1280px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"880px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"Anonymous Function","script":"//@ts-ignore\nconst editable = !editorData.readOnly;\n//@ts-ignore\nconst hasMonaco = typeof monaco !== \"undefined\";\ndiaJSONSave.setVisible(editable && hasMonaco);\nif (editable && !hasMonaco) {\n    messageJSON.setVisible(true);\n    messageJSON.setText(\"Monaco is missing, JSON editing is disabled. Please contact your system administrator.\");\n}\n","language":"javascript","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"Anonymous Function","script":"if (textAreaJSON.getVisible()) {\n    //@ts-ignore\n    if (!editorData.content) editorData.content = \"\";\n\n    //@ts-ignore\n    const editorContent = typeof editorData.content === \"object\" ? JSON.stringify(editorData.content, null, 4) : editorData.content;\n    textAreaJSON.setValue(editorContent);\n}\n","language":"typescript","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"Anonymous Function","script":"//@ts-ignore\nif (typeof editorJSON !== 'undefined') {\n    //@ts-ignore\n    editorJSON.dispose();\n}\ntextAreaJSON.setValue('');\nmessageJSON.setVisible(false);\nmessageJSON.setText('')","language":"javascript","translation":[]},{"attribute":"beginButton","grouping":"Associations","value":"diaJSONSave","script":"","translation":[]}],"fieldPos":48},{"fieldNo":"a8631606-8ec5-4e4b-9a01-7fd719b93cfd","fieldName":"subHeader","fieldParent":"c96c9e13-f715-4fa3-bc67-590179999567","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":49},{"fieldNo":"2cd4c26b-268e-4b69-8fb3-c0b8cb57fcae","fieldName":"Right","fieldParent":"a8631606-8ec5-4e4b-9a01-7fd719b93cfd","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":50},{"fieldNo":"9e92c85b-e4af-42b8-f974-5b218a259adc","fieldName":"diaJSONClose","fieldParent":"2cd4c26b-268e-4b69-8fb3-c0b8cb57fcae","fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaJSON.close();","script":"diaJSON.close();","translation":[]}],"fieldPos":51},{"fieldNo":"3c1f17f7-d9b1-4ab4-c045-013bacab88c0","fieldName":"diaJSONScroller","fieldParent":"c96c9e13-f715-4fa3-bc67-590179999567","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"wholeHeight","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":52},{"fieldNo":"b4eea8d8-00e8-4b66-9ef2-5c581be49d04","fieldName":"messageJSON","fieldParent":"3c1f17f7-d9b1-4ab4-c045-013bacab88c0","fieldType":"sap.m.MessageStrip","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Information","script":"","translation":[]}],"fieldPos":53},{"fieldNo":"c4041811-6505-46c5-9c43-5ba932abd3f4","fieldName":"textAreaJSON","fieldParent":"3c1f17f7-d9b1-4ab4-c045-013bacab88c0","fieldType":"sap.m.TextArea","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"calc(100% - 35px)","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":54},{"fieldNo":"f85f9c71-3ce5-4fa3-f7f0-1edc2129e8b9","fieldName":"htmlContentJSON","fieldParent":"3c1f17f7-d9b1-4ab4-c045-013bacab88c0","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"content","grouping":"Properties","value":"<div id='editorAdaptiveEdit' style='height:calc(100% - 25px);width:100%;'></div>","script":"","translation":[]},{"attribute":"afterRendering","grouping":"Events","value":"Anonymous Function","script":"if (!editorData.content) editorData.content = \"\";\n\nconst editorContent = typeof editorData.content === \"object\" ? JSON.stringify(editorData.content, null, 4) : editorData.content;\n\nif ([\"sap_horizon_dark\", \"neptune_horizon_dark\"].includes(sap.ui.getCore().getConfiguration().getTheme())) {\n    monaco.editor.setTheme(\"neptune-dark\");\n} else {\n    monaco.editor.setTheme();\n}\n\neditorJSON = monaco.editor.create(document.getElementById(\"editorAdaptiveEdit\"), {\n    value: editorContent,\n    readOnly: editorData.readOnly,\n    language: \"json\",\n});\n\neditorJSON.revealLineInCenter(1);\n","translation":[]}],"fieldPos":55},{"fieldNo":"af5567ee-6a2b-47d1-e75b-f786d1f63ed4","fieldName":"Texts","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":56},{"fieldNo":"059b99f5-295e-4423-ea5f-4f072467b267","fieldName":"toastSaved","fieldParent":"af5567ee-6a2b-47d1-e75b-f786d1f63ed4","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":57},{"fieldNo":"acc220e7-5a51-47c0-a1fd-0a6e4a830287","fieldName":"toastDelete","fieldParent":"af5567ee-6a2b-47d1-e75b-f786d1f63ed4","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":58},{"fieldNo":"326c943b-7679-4056-cc35-794ee3168f3f","fieldName":"Adaptive","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":59},{"fieldNo":"880c81ef-d15c-4d78-8598-a588ed9985a1","fieldName":"AppData","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":60},{"fieldNo":"cfb1fb41-3474-438f-c170-8c4bc02e243a","fieldName":"AppConfig","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","dataModel":{},"request":[],"response":[],"attributes":[],"fieldPos":61},{"fieldNo":"ac61ae2c-26da-4510-c0aa-50bf1d371cd1","fieldName":"helpers","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.Script","script":"jQuery.sap.require(\"sap.ui.core.format.FileSizeFormat\");\n\nvar oFileSizeFormat = sap.ui.core.format.FileSizeFormat.getInstance({\n    binaryFilesize: false,\n    decimals: 2,\n});\n\nfunction isCordova() {\n    if (window.hasOwnProperty(\"cordova\") || typeof cordova == \"object\") {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nconst mKeyToText = {\n    MultiSelectLookup: \"MultiSelect Lookup\",\n    MultiSelectScript: \"MultiSelect Script\",\n    SingleSelectLookup: \"SingleSelect Lookup\",\n    SingleSelectScript: \"SingleSelect Script\",\n};\n\nfunction keyToText(k) {\n    return mKeyToText[k] !== undefined ? mKeyToText[k] : k;\n}\n\nfunction distinctValuesToKeyText(values) {\n    return values.map(function ([key, text]) {\n        return { key, text };\n    });\n}\n\nfunction valuesToKeyText(values) {\n    return values.map(function (v) {\n        if (v.includes(\"|\")) {\n            const [key, text] = v.split(\"|\");\n            return { key, text };\n        }\n\n        return { key: v, text: keyToText(v) };\n    });\n}\n\nfunction getAdaptiveEditorPreviewLanguage() {\n    // poSettings is the custom component popover settings introduced in 22-LTS\n    if (typeof poSettings !== \"undefined\" && typeof poSettings.getPreviewLanguage !== \"undefined\") {\n        return poSettings.getPreviewLanguage();\n    }\n\n    if (typeof toolMenuTranslation !== \"undefined\") {\n        // toolMenuTranslation was the drop inside AdaptiveDesigner which got replaced with poSettings above\n        return toolMenuTranslation.getSelectedKey();\n    }\n\n    return false;\n}\n\nfunction sortObjects(objArray, properties) {\n    var primers = arguments[2] || {};\n\n    properties = properties.map(function (prop) {\n        if (!(prop instanceof Array)) {\n            prop = [prop, \"asc\"];\n        }\n        if (prop[1].toLowerCase() == \"desc\") {\n            prop[1] = -1;\n        } else {\n            prop[1] = 1;\n        }\n        return prop;\n    });\n\n    function valueCmp(x, y) {\n        return x > y ? 1 : x < y ? -1 : 0;\n    }\n\n    function arrayCmp(a, b) {\n        var arr1 = [],\n            arr2 = [];\n        properties.forEach(function (prop) {\n            var aValue = a[prop[0]],\n                bValue = b[prop[0]];\n            if (typeof primers[prop[0]] != \"undefined\") {\n                aValue = primers[prop[0]](aValue);\n                bValue = primers[prop[0]](bValue);\n            }\n            arr1.push(prop[1] * valueCmp(aValue, bValue));\n            arr2.push(prop[1] * valueCmp(bValue, aValue));\n        });\n        return arr1 < arr2 ? -1 : 1;\n    }\n\n    objArray.sort(function (a, b) {\n        return arrayCmp(a, b);\n    });\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":62},{"fieldNo":"6e22e3b3-0bfc-4c70-b6ae-7bfe2383a87f","fieldName":"metadata","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.Script","script":"const vb = {\n    reportEnableTab1: \"{= ${appData>/settings/properties/report/enableTab1} ? true : false }\",\n    reportEnableTab2: \"{= ${appData>/settings/properties/report/enableTab2} ? true : false }\",\n    reportEnableTab3: \"{= ${appData>/settings/properties/report/enableTab3} ? true : false }\",\n    reportEnableTab4: \"{= ${appData>/settings/properties/report/enableTab4} ? true : false }\",\n    reportEnableTab5: \"{= ${appData>/settings/properties/report/enableTab5} ? true : false }\",\n\n    reportEnableDelete: \"{= ${appData>/settings/properties/report/enableDelete} ? true : false }\",\n    reportEnableSave: \"{= ${appData>/settings/properties/report/enableSave} ? true : false }\",\n    reportEnableClose: \"{= ${appData>/settings/properties/report/enableClose} ? true : false }\",\n    reportEnableAttachment: \"{= ${appData>/settings/properties/report/enableAttachment} ? true : false }\",\n\n    enableTab0:\n        \"{= ${appData>/settings/properties/report/enableTab1} || ${appData>/settings/properties/report/enableTab2} || ${appData>/settings/properties/report/enableTab3} || ${appData>/settings/properties/report/enableTab4} || ${appData>/settings/properties/report/enableTab5} ? true : false }\",\n\n    buttonTypes: [\"Accept\", \"Attention\", \"Critical\", \"Back\", \"Default\", \"Emphasized\", \"Ghost\", \"Neutral\", \"Reject\", \"Transparent\", \"Unstyled\", \"Up\"],\n\n    typeCustomNumberFormat: \"{= ${/formatter} === 'numberCustom' ? true : false }\",\n\n    input: \"{= !${/type} || ${/type} === 'Input' ? true : false }\",\n    editor: \"{= ${/type} === 'Editor' ? true : false }\",\n    textArea: \"{= ${/type} === 'TextArea' ? true : false }\",\n    valueHelp: \"{= ${/type} === 'ValueHelp' ? true : false }\",\n    stepInput: \"{= ${/type} === 'StepInput' ? true : false }\",\n    dateTimePicker: \"{= ${/type} === 'DateTimePicker' ? true : false }\",\n    multiOrSingleSelectLookup: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true : false }\",\n    typeMultiOrSingleSelectScript: \"{= ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectScript' ? true : false }\",\n    placeholder:\n        \"{= ${/type} === 'CheckBox'  || ${/type} === 'DatePicker' || ${/type} === 'DateTimePicker' || ${/type} === 'Editor' || ${/type} === 'Switch' || ${/type} === 'StepInput' || ${/type} === 'JSON' ? false : true }\",\n};\n\nconst metadata = {\n    properties: {\n        docLink: \"https://community.neptune-software.com/documentation/adaptive-template-edit\",\n        enableForm: true,\n        enableTable: true,\n        titleForm: \"Form\",\n        titleTable: \"Field Mapping\",\n        iconForm: typeof getIconURL !== \"undefined\" ? \"form.svg\" : \"/public/icons/s_vwform.gif\",\n        iconTable: typeof getIconURL !== \"undefined\" ? \"link.svg\" : \"/public/icons/s_psrela.gif\",\n\n        report: {\n            titleGeneral: { type: \"Title\", label: \"General\" },\n            title: { type: \"Input\", label: \"Title\", translate: true },\n            subTitle: { type: \"Input\", label: \"Subtitle\", translate: true },\n            avatarIcon: { type: \"Icon\", label: \"Icon\" },\n            avatarBackgroundColor: {\n                type: \"SingleSelect\",\n                label: \"Icon Color\",\n                items: valuesToKeyText([\"\", \"Accent1\", \"Accent2\", \"Accent3\", \"Accent4\", \"Accent5\", \"Accent6\", \"Accent7\", \"Accent8\", \"Accent9\", \"Accent10\", \"Random\"]),\n            },\n            showIcon: { type: \"CheckBox\", label: \"Icon Visible\", default: true },\n            actionButtonLeft: { type: \"CheckBox\", label: \"Action Button Left\", default: false },\n\n            titleDynamicTitle: { type: \"Title\", label: \"Dynamic Title\" },\n            dynamicTitle: { type: \"TableFieldLocal\", label: \"Title\" },\n            dynamicSubTitle: { type: \"TableFieldLocal\", label: \"Subtitle\" },\n\n            textGeneral: { type: \"Title\", label: \"Texts\" },\n            textUnique: { type: \"Input\", label: \"Unique Error\", translate: true },\n\n            titleButtonClose: {\n                type: \"Title\",\n                label: \"Close Button\",\n                visible: vb.reportEnableClose,\n            },\n            iconButtonClose: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableClose,\n            },\n            textButtonClose: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Close\",\n                translate: true,\n                visible: vb.reportEnableClose,\n            },\n            typeButtonClose: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.reportEnableClose,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonSave: { type: \"Title\", label: \"Save Button\", visible: vb.reportEnableSave },\n            iconButtonSave: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableSave,\n            },\n            textButtonSave: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Save\",\n                translate: true,\n                visible: vb.reportEnableSave,\n            },\n            textToastSave: {\n                type: \"Input\",\n                label: \"Message\",\n                default: \"Saved\",\n                translate: true,\n                visible: vb.reportEnableSave,\n            },\n            typeButtonSave: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Emphasized\",\n                visible: vb.reportEnableSave,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            confirmationCheckCreate: {\n                type: \"CheckBox\",\n                label: \"Confirm on New\",\n                default: false,\n                visible: vb.reportEnableSave,\n            },\n            confirmationCheckUpdate: {\n                type: \"CheckBox\",\n                label: \"Confirm on Update\",\n                default: false,\n                visible: vb.reportEnableSave,\n            },\n            titleButtonDelete: {\n                type: \"Title\",\n                label: \"Delete Button\",\n                visible: vb.reportEnableDelete,\n            },\n            iconButtonDelete: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableDelete,\n            },\n            textButtonDelete: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Delete\",\n                translate: true,\n                visible: vb.reportEnableDelete,\n            },\n            textToastDelete: {\n                type: \"Input\",\n                label: \"Message\",\n                default: \"Deleted\",\n                translate: true,\n                visible: vb.reportEnableDelete,\n            },\n            typeButtonDelete: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Reject\",\n                visible: vb.reportEnableDelete,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonAttachment: {\n                type: \"Title\",\n                label: \"Attachment Button\",\n                visible: vb.reportEnableAttachment,\n            },\n            iconButtonAttachment: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableAttachment,\n            },\n            textButtonAttachment: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Add Attachment\",\n                translate: true,\n                visible: vb.reportEnableAttachment,\n            },\n            typeButtonAttachment: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.reportEnableAttachment,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleTab0: { type: \"Title\", label: \"Main Tab\", visible: vb.enableTab0 },\n            tab0Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"General\",\n                visible: vb.enableTab0,\n                translate: true,\n            },\n            tab0Icon: { type: \"Icon\", label: \"Icon\", visible: vb.enableTab0 },\n\n            titleTabA: {\n                type: \"Title\",\n                label: \"Attachment Tab\",\n                visible: vb.reportEnableAttachment,\n            },\n            tabAText: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Attachment\",\n                visible: vb.reportEnableAttachment,\n                translate: true,\n            },\n            tabAIcon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableAttachment },\n\n            titleTab1: { type: \"Title\", label: \"Tab 1\", visible: vb.reportEnableTab1 },\n            tab1Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Tab 1\",\n                visible: vb.reportEnableTab1,\n                translate: true,\n            },\n            tab1Icon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableTab1 },\n            tab1Nav: { type: \"NavigationChild\", label: \"Child\", visible: vb.reportEnableTab1 },\n\n            titleTab2: { type: \"Title\", label: \"Tab 2\", visible: vb.reportEnableTab2 },\n            tab2Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Tab 2\",\n                visible: vb.reportEnableTab2,\n                translate: true,\n            },\n            tab2Icon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableTab2 },\n            tab2Nav: { type: \"NavigationChild\", label: \"Child\", visible: vb.reportEnableTab2 },\n\n            titleTab3: { type: \"Title\", label: \"Tab 3\", visible: vb.reportEnableTab3 },\n            tab3Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Tab 3\",\n                visible: vb.reportEnableTab3,\n                translate: true,\n            },\n            tab3Icon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableTab3 },\n            tab3Nav: { type: \"NavigationChild\", label: \"Child\", visible: vb.reportEnableTab3 },\n\n            titleTab4: { type: \"Title\", label: \"Tab 4\", visible: vb.reportEnableTab4 },\n            tab4Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Tab 4\",\n                visible: vb.reportEnableTab4,\n                translate: true,\n            },\n            tab4Icon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableTab4 },\n            tab4Nav: { type: \"NavigationChild\", label: \"Child\", visible: vb.reportEnableTab4 },\n\n            titleTab5: { type: \"Title\", label: \"Tab 5\", visible: vb.reportEnableTab5 },\n            tab5Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Tab 5\",\n                visible: vb.reportEnableTab5,\n                translate: true,\n            },\n            tab5Icon: { type: \"Icon\", label: \"Icon\", visible: vb.reportEnableTab5 },\n            tab5Nav: { type: \"NavigationChild\", label: \"Child\", visible: vb.reportEnableTab5 },\n\n            titleProperties: { type: \"Title\", label: \"Properties\" },\n            enableClose: { type: \"CheckBox\", label: \"Enable Close\", default: true },\n            enableSave: { type: \"CheckBox\", label: \"Enable Save\", default: true },\n            enableDelete: { type: \"CheckBox\", label: \"Enable Delete\", default: false },\n            enableAttachment: { type: \"CheckBox\", label: \"Enable Attachment\", default: false },\n            enableTab1: { type: \"CheckBox\", label: \"Enable Tab 1\", default: false },\n            enableTab2: { type: \"CheckBox\", label: \"Enable Tab 2\", default: false },\n            enableTab3: { type: \"CheckBox\", label: \"Enable Tab 3\", default: false },\n            enableTab4: { type: \"CheckBox\", label: \"Enable Tab 4\", default: false },\n            enableTab5: { type: \"CheckBox\", label: \"Enable Tab 5\", default: false },\n            enableUppercase: { type: \"CheckBox\", label: \"Enable Uppercase\", default: false },\n            enablePadding: { type: \"CheckBox\", label: \"Enable Padding\", default: true },\n\n            titleConfirmCreate: { default: \"Create entry\", translate: true, visible: false },\n            textConfirmCreate: { default: \"Are you sure you want to create this entry?\", translate: true, visible: false },\n            titleConfirmUpdate: { default: \"Update entry\", translate: true, visible: false },\n            textConfirmUpdate: { default: \"Are you sure you want to update this entry?\", translate: true, visible: false },\n            textConfirmDelete: { default: \"Do you want to delete this entry? \", translate: true, visible: false },\n            titleConfirmDelete: { default: \"Delete \", translate: true, visible: false },\n            requiredFieldsToast: { default: \"Please fill in all the required fields\", translate: true, visible: false },\n        },\n\n        form: {\n            titleLayout: { type: \"Title\", label: \"Layout\" },\n\n            formLayout: {\n                type: \"SingleSelect\",\n                label: \"Layout\",\n                items: valuesToKeyText([\"\", \"ColumnLayout\", \"GridLayout\", \"ResponsiveGridLayout\", \"ResponsiveLayout\"]),\n            },\n\n            columnsL: {\n                type: \"SingleSelect\",\n                label: \"Columns L\",\n                items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\"]),\n            },\n\n            columnsM: {\n                type: \"SingleSelect\",\n                label: \"Columns M\",\n                items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\"]),\n            },\n\n            labelSpanL: {\n                type: \"SingleSelect\",\n                label: \"LabelSpan L\",\n                items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]),\n            },\n\n            labelSpanM: {\n                type: \"SingleSelect\",\n                label: \"LabelSpan M\",\n                items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]),\n            },\n\n            titleLevel: {\n                type: \"SingleSelect\",\n                label: \"Title Size\",\n                items: valuesToKeyText([\"\", \"H1\", \"H2\", \"H3\", \"H4\", \"H5\", \"H6\"]),\n            },\n\n            titleProperties: { type: \"Title\", label: \"Properties\" },\n            enableCompact: { type: \"CheckBox\", label: \"Compact Mode\", default: false },\n            enableCentered: { type: \"CheckBox\", label: \"Centered Mode\", default: true },\n\n            title1ReadOnly: { type: \"Title\", label: \"Read-Only - Requirement 1\" },\n            field1ReadOnly: { type: \"TableFieldLocal\", label: \"Field\" },\n            operator1ReadOnly: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                ],\n            },\n            value1ReadOnly: { type: \"Input\", label: \"Fixed Value\" },\n            sysvar1ReadOnly: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n            },\n\n            title2ReadOnly: { type: \"Title\", label: \"Read-Only - Requirement 2\" },\n            field2ReadOnly: { type: \"TableFieldLocal\", label: \"Field\" },\n            operator2ReadOnly: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                ],\n            },\n\n            value2ReadOnly: { type: \"Input\", label: \"Fixed Value\" },\n            sysvar2ReadOnly: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n            },\n        },\n    },\n\n    fieldsSel: {\n        titleGeneral: { type: \"Title\", label: \"General\" },\n        text: { type: \"Input\", label: \"Label\" },\n        type: {\n            type: \"SingleSelect\",\n            label: \"Field Type\",\n            items: valuesToKeyText([\n                \"Input\",\n                \"CheckBox\",\n                \"DatePicker\",\n                \"DateTimePicker\",\n                \"Display\",\n                \"Editor\",\n                \"MultiSelect\",\n                \"MultiSelectLookup\",\n                \"MultiSelectScript\",\n                \"SingleSelect\",\n                \"SingleSelectLookup\",\n                \"SingleSelectScript\",\n                \"Switch\",\n                \"StepInput\",\n                \"Text\",\n                \"TextArea\",\n                \"ValueHelp\",\n                \"JSON\",\n            ]),\n        },\n\n        inputType: {\n            type: \"SingleSelect\",\n            label: \"Input Type\",\n            visible: vb.input,\n            items: valuesToKeyText([\"Email\", \"Number\", \"Password\", \"Tel\", \"|Text\", \"Url\"]),\n        },\n        mask: { type: \"Input\", label: \"Input Mask\", placeholder: \"999-999 or ***-*** or 999-***\", visible: vb.placeholder },\n        placeholder: { type: \"Input\", label: \"Placeholder\", visible: vb.placeholder },\n        description: { type: \"Input\", label: \"Description\" },\n\n        inputFormatter: {\n            type: \"SingleSelect\",\n            label: \"Formatter\",\n            default: \"Input\",\n            visible: vb.input,\n            items: [\n                { key: \"\", text: \"\" },\n                { key: \"condense\", text: \"No Space in Text\" },\n                { key: \"uppercase\", text: \"Uppercase\" },\n                { key: \"lowercase\", text: \"Lowercase\" },\n            ],\n        },\n\n        formatter: {\n            type: \"SingleSelect\",\n            label: \"Formatter\",\n            visible: \"{= ${/type} === 'Display' ? true : false }\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"date00\", \"Date Browser Format\"],\n                [\"date01\", \"Date (dd.mm.yyyy)\"],\n                [\"date02\", \"Date (mm-dd-yyyy)\"],\n                [\"date03\", \"Date (Month)\"],\n                [\"date04\", \"Date (Quarter)\"],\n                [\"date05\", \"Time (hh:mm)\"],\n                [\"sapdate01\", \"SAP Date (dd.mm.yyyy)\"],\n                [\"sapdate02\", \"SAP Date (mm-dd-yyyy)\"],\n                [\"zero\", \"Remove Leading Zero\"],\n                [\"uppercase\", \"Upper Case\"],\n                [\"lowercase\", \"Lower Case\"],\n                [\"number00\", \"Number Browser Format\"],\n                [\"number01\", \"Number Decimals 0\"],\n                [\"number02\", \"Number Decimals 1 Comma\"],\n                [\"number03\", \"Number Decimals 2 Comma\"],\n                [\"number04\", \"Number Decimals 3 Comma\"],\n                [\"number05\", \"Number Decimals 1 Point\"],\n                [\"number06\", \"Number Decimals 2 Point\"],\n                [\"number07\", \"Number Decimals 3 Point\"],\n                [\"numberCustom\", \"Number Custom Decimals\"],\n                [\"file\", \"File Size\"],\n            ]),\n        },\n        formatNumberDecimals: {\n            type: \"Input\",\n            label: \"Decimals\",\n            visible: vb.typeCustomNumberFormat,\n            placeholder: \"0\",\n        },\n\n        formatNumberSeparator: {\n            type: \"SingleSelect\",\n            label: \"Decimal Separator\",\n            visible: vb.typeCustomNumberFormat,\n            items: distinctValuesToKeyText([\n                [\"browserDefault\", \"Browser Default\"],\n                [\"comma\", \"Comma\"],\n                [\"point\", \"Point\"],\n            ]),\n        },\n\n        titleValueHelp: { type: \"Title\", label: \"ValueHelp Source\", visible: vb.valueHelp },\n        valueRequestKey: { type: \"Input\", label: \"Field to Return\", visible: vb.valueHelp },\n        navigation: { type: \"Navigation\", label: \"Open\", visible: vb.valueHelp },\n\n        dateTimePickerMinutesStep: {\n            type: \"Input\",\n            label: \"Step Minutes\",\n            visible: vb.dateTimePicker,\n        },\n        dateTimePickerSecondsStep: {\n            type: \"Input\",\n            label: \"Step Seconds\",\n            visible: vb.dateTimePicker,\n        },\n        dateTimePickerFormat: {\n            type: \"Input\",\n            label: \"Display Format\",\n            visible: vb.dateTimePicker,\n        },\n\n        stepInputMin: {\n            type: \"Input\",\n            label: \"Minimum\",\n            visible: vb.stepInput,\n            placeholder: \"Minimum Value\",\n        },\n        stepInputMax: {\n            type: \"Input\",\n            label: \"Maximum\",\n            visible: vb.stepInput,\n            placeholder: \"Maximum Value\",\n        },\n        stepInputStep: {\n            type: \"Input\",\n            label: \"Step\",\n            visible: vb.stepInput,\n            placeholder: \"1\",\n        },\n\n        stepInputTextAlign: {\n            type: \"SingleSelect\",\n            label: \"TextAlign\",\n            visible: vb.stepInput,\n            items: valuesToKeyText([\"\", \"Begin\", \"Center\", \"End\", \"Initial\", \"Left\", \"Right\"]),\n        },\n\n        textAreaRows: { type: \"Input\", label: \"Rows\", visible: vb.textArea },\n\n        editorHeight: { type: \"Input\", label: \"Height\", visible: vb.editor },\n\n        titleSelectScript: {\n            type: \"Title\",\n            label: \"Data Source\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n        scriptSelect: {\n            type: \"Script\",\n            label: \"Server Script\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n\n        lookupFieldGrouping2: {\n            type: \"CheckBox\",\n            label: \"Group by Add. Field\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n\n        titleLookup: { type: \"Title\", label: \"Data Source\", visible: vb.multiOrSingleSelectLookup },\n        lookupTable: { type: \"Table\", label: \"Table\", visible: vb.multiOrSingleSelectLookup },\n        lookupFieldKey: {\n            type: \"TableField\",\n            label: \"Key Field\",\n            visible: vb.multiOrSingleSelectLookup,\n        },\n        lookupFieldText: {\n            type: \"TableField\",\n            label: \"Text Field\",\n            visible: vb.multiOrSingleSelectLookup,\n        },\n        lookupFieldAdditional: {\n            type: \"TableField\",\n            label: \"Additional Text Field\",\n            visible: vb.multiOrSingleSelectLookup,\n        },\n        lookupFieldGrouping1: {\n            type: \"CheckBox\",\n            label: \"Group by Add. Field\",\n            visible: vb.multiOrSingleSelectLookup,\n        },\n        lookupShowOnlyText: {\n            type: \"CheckBox\",\n            label: \"Hide Key Field\",\n            visible: vb.multiOrSingleSelectLookup,\n        },\n\n        titleDefault: { type: \"Title\", label: \"Default Value\" },\n        default: { type: \"Input\", label: \"From Value\" },\n        scriptValue: { type: \"Script\", label: \"From Script\" },\n\n        titleLayout: { type: \"Title\", label: \"Layout\" },\n        columnLabel: { type: \"Input\", label: \"Column Title\" },\n        enableNewForm: { type: \"CheckBox\", label: \"Start New Form\" },\n\n        columnsL: {\n            type: \"SingleSelect\",\n            label: \"Columns L\",\n            visible: \"{= ${/enableNewForm} ? true: false }\",\n            items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\"]),\n        },\n\n        columnsM: {\n            type: \"SingleSelect\",\n            label: \"Columns M\",\n            visible: \"{= ${/enableNewForm} ? true: false }\",\n            items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\"]),\n        },\n\n        labelSpanL: {\n            type: \"SingleSelect\",\n            label: \"LabelSpan L\",\n            visible: \"{= ${/enableNewForm} ? true: false }\",\n            items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]),\n        },\n\n        labelSpanM: {\n            type: \"SingleSelect\",\n            label: \"LabelSpan M\",\n            visible: \"{= ${/enableNewForm} ? true: false }\",\n            items: valuesToKeyText([\"\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\"]),\n        },\n\n        titleSettings: { type: \"Title\", label: \"Properties\" },\n        editable: { type: \"CheckBox\", label: \"Editable\", default: true },\n        required: { type: \"CheckBox\", label: \"Required\", default: false },\n        visible: { type: \"CheckBox\", label: \"Visible\", default: true },\n        unique: { type: \"CheckBox\", label: \"Unique Value\", default: false },\n\n        titleVisibleCond: { type: \"Title\", label: \"Conditional Visibility\", visible: \"{/visible}\" },\n        visibleFieldName: { type: \"TableFieldLocal\", label: \"Field\", visible: \"{/visible}\" },\n        visibleCondition: {\n            type: \"SingleSelect\",\n            label: \"Operator\",\n            items: [\n                { key: \"\", text: \"\" },\n                { key: \"isEmpty\", text: \"Is Empty\" },\n                { key: \"===\", text: \"Equal\" },\n                { key: \"!==\", text: \"Not Equal\" },\n                { key: \">=\", text: \"Greater than or Equal To\" },\n                { key: \"<=\", text: \"Less than or Equal To\" },\n                { key: \">\", text: \"Greater Than\" },\n                { key: \"<\", text: \"Less Than\" },\n            ],\n            visible: \"{/visible}\",\n        },\n        visibleFixedValue: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: \"{= ${/visible} && ${/visibleCondition} !== 'isEmpty'}\",\n        },\n        visibleSystemValue: {\n            type: \"SingleSelect\",\n            label: \"System Variable\",\n            items: valuesToKeyText([\"\", \"UserName\"]),\n            visible: \"{= ${/visible} && ${/visibleCondition} !== 'isEmpty'}\",\n        },\n        visibleInverse: {\n            type: \"CheckBox\",\n            label: \"Invert Logic\",\n            visible: \"{/visible}\",\n        },\n    },\n\n    fieldsRun: {},\n};\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":63},{"fieldNo":"8e3a9be1-3739-4a10-81a2-c8a635704485","fieldName":"report","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.Script","script":"const report = {\n    metadata: metadata,\n    initId: null,\n    formObject: null,\n    pages: {},\n    __metadata: null,\n    uniqueKeyValue: null,\n    uniqueKeyField: null,\n\n    events: {\n        onChildBack: function () {\n            oApp.back();\n        },\n        onNavigatePage: function (page) {\n            if (!report.pages[page.sId]) oApp.addPage(page);\n            report.childPage = page;\n            report.pages[page.sId] = true;\n            oApp.to(page);\n        },\n        onScriptSuccess: function (data, navigation) {\n            if (navigation?.displayResponse) {\n                const responseTitle = data?.title || navigation.scriptSuccessTitle || \"Success\";\n                const responseMessage = data?.message || navigation.scriptSuccessMessage || \"Event completed successfully\";\n                sap.m.MessageBox.success(responseMessage, {\n                    title: responseTitle,\n                });\n            }\n        },\n        onScriptError: function (result, navigation) {\n            if (navigation?.displayResponse) {\n                const responseTitle = navigation.scriptErrorTitle || \"Error\";\n                const responseMessage = navigation.scriptErrorMessage || result?.responseJSON?.status;\n                sap.m.MessageBox.error(responseMessage, {\n                    title: responseTitle,\n                });\n            }\n        },\n    },\n\n    start: function () {\n        if (!neptune?.Adaptive) {\n            console.error(\"Neptune Adaptive Framework not found\");\n            return;\n        }\n\n        neptune.Adaptive.initApp(this);\n    },\n\n    init: function (config, runtime) {\n        // Set Default Values\n        neptune.Adaptive.setDefaultData(config, metadata);\n\n        // Reset when config changes\n        if (report.initId !== config.id) report.initId = config.id;\n\n        // Language\n        if (runtime) {\n            if (AppCache && AppCache.userInfo && AppCache.userInfo.language) config.language = AppCache.userInfo.language;\n        } else {\n            const language = getAdaptiveEditorPreviewLanguage();\n            if (language) {\n                config.language = language;\n            }\n        }\n\n        modelAppConfig.setData(config);\n        modelAppConfig.refresh();\n\n        oApp.setBusy(true);\n\n        if (typeof monaco !== \"undefined\") {\n            textAreaJSON.setVisible(false);\n            htmlContentJSON.setVisible(true);\n        }\n\n        if (config.settings.properties.report.avatarBackgroundColor) {\n            oPageHeaderIcon.setBackgroundColor(config.settings.properties.report.avatarBackgroundColor);\n        } else {\n            oPageHeaderIcon.setBackgroundColor();\n        }\n\n        // Compact Mode\n        if (config.settings.properties.form.enableCentered) {\n            panMain.addStyleClass(\"nepFormInput\");\n            panItemMain.addStyleClass(\"nepFormInput\");\n        } else {\n            panMain.removeStyleClass(\"nepFormInput\");\n            panItemMain.removeStyleClass(\"nepFormInput\");\n        }\n\n        // Avoid rounded cornes on attachment if no padding\n        if (config.settings.properties.report.enablePadding) {\n            tabAttachment.removeStyleClass(\"nepNoRadiusTop\");\n            tabAttachment.addStyleClass(\"nepRadiusTop\");\n            barEdit.addStyleClass(\"nepDynamicPageNoPadding\");\n        } else {\n            tabAttachment.removeStyleClass(\"nepRadiusTop\");\n            tabAttachment.addStyleClass(\"nepNoRadiusTop\");\n            barEdit.removeStyleClass(\"nepDynamicPageNoPadding\");\n        }\n\n        // Action Button Left\n        if (config.settings.properties.report.actionButtonLeft) {\n            oPageTitle.addStyleClass(\"nepFlexWrap nepFlexLeft\");\n            oPageHeaderBox.addStyleClass(\"sapUiSmallMarginBottom\");\n        } else {\n            oPageTitle.removeStyleClass(\"nepFlexWrap\");\n            oPageTitle.removeStyleClass(\"nepFlexLeft\");\n            oPageHeaderBox.removeStyleClass(\"sapUiSmallMarginBottom\");\n        }\n\n        // Translation - Properties\n        function syncTitle(targetModel) {\n            const config = targetModel.getData();\n            if (config.settings.properties.report.dynamicTitle) {\n                oPageHeaderTitle.bindProperty(\"text\", \"AppData>/\" + config.settings.properties.report.dynamicTitle);\n            } else {\n                oPageHeaderTitle.unbindProperty(\"text\");\n                oPageHeaderTitle.setText(neptune.Adaptive.translateProperty(\"report\", \"title\", config));\n            }\n        }\n\n        function syncSubTitle(targetModel) {\n            const config = targetModel.getData();\n            if (config.settings.properties.report.dynamicSubTitle) {\n                oPageHeaderSubTitle.bindProperty(\"text\", `AppData>/${config.settings.properties.report.dynamicSubTitle}`);\n            } else {\n                oPageHeaderSubTitle.unbindProperty(\"text\");\n                const text = neptune.Adaptive.translateProperty(\"report\", \"subTitle\", config);\n                if (!text) {\n                    oPageHeaderSubTitle.setVisible(false);\n                } else {\n                    oPageHeaderSubTitle.setText(text);\n                    oPageHeaderSubTitle.setVisible(true);\n                }\n            }\n        }\n\n        // Adaptive Designer: modelappData, Launchpad: modelAppConfig\n        const targetModel = typeof modelappData !== \"undefined\" ? modelappData : modelAppConfig;\n        syncTitle(targetModel);\n        syncSubTitle(targetModel);\n\n        targetModel.attachPropertyChange(function (prop) {\n            const path = prop.mParameters.path;\n            if ([\"/settings/properties/report/title\", \"/settings/properties/report/dynamicTitle\"].includes(path)) {\n                syncTitle(targetModel);\n            }\n\n            if ([\"/settings/properties/report/subTitle\", \"/settings/properties/report/dynamicSubTitle\"].includes(path)) {\n                syncSubTitle(targetModel);\n            }\n        });\n\n        toastSaved.setText(neptune.Adaptive.translateProperty(\"report\", \"textToastSave\", config));\n        toastDelete.setText(neptune.Adaptive.translateProperty(\"report\", \"textToastDelete\", config));\n        toolHeaderBack.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonClose\", config));\n        toolHeaderSave.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonSave\", config));\n        toolHeaderDelete.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonDelete\", config));\n\n        barEditItemMain.setText(neptune.Adaptive.translateProperty(\"report\", \"tab0Text\", config));\n        barEditItem1.setText(neptune.Adaptive.translateProperty(\"report\", \"tab1Text\", config));\n        barEditItem2.setText(neptune.Adaptive.translateProperty(\"report\", \"tab2Text\", config));\n        barEditItem3.setText(neptune.Adaptive.translateProperty(\"report\", \"tab3Text\", config));\n        barEditItem4.setText(neptune.Adaptive.translateProperty(\"report\", \"tab4Text\", config));\n        barEditItem5.setText(neptune.Adaptive.translateProperty(\"report\", \"tab5Text\", config));\n        barEditItemA.setText(neptune.Adaptive.translateProperty(\"report\", \"tabAText\", config));\n\n        // Init\n        neptune.Adaptive.init(modelAppConfig.oData)\n            .then(function (data) {\n                const s = modelAppConfig.oData.settings;\n                const r = s.properties.report;\n\n                if (runtime) {\n                    s.fieldsSel = data.fieldsSelection;\n                    s.fieldsRun = data.fieldsReport;\n\n                    // Fields Sorting\n                    if (s.fieldsSel) s.fieldsSel.sort(sort_by(\"fieldPos\"));\n                    if (s.fieldsRun) s.fieldsRun.sort(sort_by(\"fieldPos\"));\n                } else {\n                    s.fieldsSel.forEach(function (selField) {\n                        let selFieldRun = ModelData.FindFirst(data.fieldsSelection, \"name\", selField.name);\n                        if (selFieldRun && selFieldRun.items) selField.items = selFieldRun.items;\n                        if (selFieldRun && selFieldRun.default) selField.default = selFieldRun.default;\n                    });\n                }\n\n                // Form Fields\n                if (r.enableTab1 || r.enableTab2 || r.enableTab3 || r.enableTab4 || r.enableTab5 || r.enableAttachment) {\n                    barEdit.setSelectedItem(barEditItemMain);\n                    barEdit.setVisible(true);\n                    panMain.setVisible(false);\n                    report.buildForm(panItemMain, modelAppConfig.oData, {}, report.events);\n                    report.formObject = panItemMain.getContent();\n                } else {\n                    barEdit.setVisible(false);\n                    panMain.setVisible(true);\n                    report.buildForm(panMain, modelAppConfig.oData, {}, report.events);\n                    report.formObject = panMain.getContent();\n                }\n\n                // New Record ?\n                if (s.data && s.data._defaultData) {\n                    report.afterRun(s.data._defaultData);\n                } else {\n                    // Key Fields for GET Record\n                    if (s.navigation && s.navigation.keyField && s.navigation.keyField.length) {\n                        if (!s.data) s.data = {};\n                        s.data._keyField = s.navigation.keyField;\n\n                        // Fix before patch 4\n                        s.navigation.keyField.forEach(function (field) {\n                            if (field.valueKey) {\n                                s.data[field.fieldName] = field.valueKey;\n                                field.key = field.fieldName;\n                            }\n                        });\n                    }\n\n                    neptune.Adaptive.run(modelAppConfig.oData, s.data, \"Get\").then(function (data) {\n                        report.afterRun(data);\n                    });\n                }\n            })\n            .catch(function (data) {\n                if (data.responseJSON && data.responseJSON.status) {\n                    sap.m.MessageToast.show(data.responseJSON.status);\n                }\n\n                if (data.status === 0) {\n                    sap.m.MessageToast.show(\"No connection\");\n                }\n\n                oApp.setBusy(false);\n            });\n    },\n\n    delete: function () {\n        const s = modelAppConfig.oData.settings;\n        const data = modelAppData.oData;\n\n        const deleteMessage = neptune.Adaptive.translateProperty(\"report\", \"textConfirmDelete\", modelAppConfig.getData());\n        const deleteTitle = neptune.Adaptive.translateProperty(\"report\", \"titleConfirmDelete\", modelAppConfig.getData());\n\n        sap.m.MessageBox.show(deleteMessage, {\n            title: deleteTitle,\n            icon: sap.m.MessageBox.Icon.ERROR,\n            actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n            onClose: function (oAction) {\n                if (oAction === \"YES\") {\n                    const { id } = data;\n                    neptune.Adaptive.run(modelAppConfig.oData, { id, data }, \"Delete\").then(function (data) {\n                        // Message from Server Script\n                        if (data.message && data.message.text) {\n                            if (data.message.type) {\n                                sap.m.MessageBox[data.message.type](data.message.text);\n                            } else {\n                                sap.m.MessageBox.information(data.message.text);\n                            }\n                            return;\n                        }\n\n                        sap.m.MessageToast.show(toastDelete.getText());\n\n                        if (oApp.getParent() && oApp.getParent().getParent() && oApp.getParent().getParent().close) {\n                            oApp.getParent().getParent().close();\n                        }\n\n                        if (s.events && s.events.afterChildSave) s.events.afterChildSave();\n\n                        // const openedAsSidepanel = modelAppConfig.oData.settings.navigation.openAs === 'S';\n                        // if (openedAsSidepanel) {\n                        //     // a new record is being created in the sidepanel tab\n                        //     if (!saveData.id) {\n                        //         sap.n.Shell.closeSidepanelTab(sap.n.Shell.getTabKey('PLANET9_ADAPTIVE_EDIT', ''));\n                        //     }\n                        // } else {\n                        //     report.close();\n                        // }\n\n                        report.close();\n                    });\n                }\n            },\n        });\n    },\n\n    afterRun: function (data) {\n        // Message from Server Script\n        if (data?.message?.text) {\n            if (data.message.type) {\n                sap.m.MessageBox[data.message.type](data.message.text);\n            } else {\n                sap.m.MessageBox.information(data.message.text);\n            }\n            oApp.setBusy(false);\n            return;\n        }\n        if (!data) {\n            data = {};\n        }\n\n        // If no records are received -> New record with data from event config\n        if (!Object.keys(data).length && modelAppConfig.oData.settings?.data?._keyField) {\n            modelAppConfig.oData.settings.data._keyField.forEach(function (field) {\n                if (field.key) {\n                    data[field.fieldName] = modelAppConfig.oData.settings.data[field.key];\n                }\n                if (field.value) {\n                    data[field.fieldName] = field.value;\n                }\n            });\n        }\n\n        // Save OData Metadata Key\n        if (data.__metadata) {\n            report.__metadata = data.__metadata;\n        }\n\n        // Save ServiceNow Key\n        if (data[\"sys_id\"]) {\n            report.uniqueKeyField = \"sys_id\";\n            report.uniqueKeyValue = data[\"sys_id\"];\n        }\n\n        // Save SalesForce Key\n        if (data[\"Id\"]) {\n            report.uniqueKeyField = \"Id\";\n            report.uniqueKeyValue = data[\"Id\"];\n        }\n\n        // Delete Button - Only enabled if unique ID field data exists\n        const keysData = Object.keys(data);\n        if (modelAppConfig.oData.settings.properties.report.enableDelete && keysData.length > 0) {\n            toolHeaderDelete.setEnabled(true);\n        }\n\n        // Get Attachment\n        if (modelAppConfig.oData.settings.properties.report.enableAttachment) {\n            report.getAttachment(data);\n        }\n\n        // Open Dialog\n        if (oApp.getParent()?.getParent()?.open) {\n            oApp.getParent().getParent().open();\n        }\n\n        // Data Preprocessing\n        modelAppConfig.oData.settings.fieldsSel.forEach(function (field) {\n            const { name, type } = field;\n\n            // Editor\n            if (type === \"Editor\") {\n                field._editor.setData(data[name]);\n                field._editor.onChange = function (data) {\n                    modelAppData.oData[name] = data;\n                };\n            }\n\n            // Default Value\n            if (field.default && !data[name]) {\n                data[name] = [\"Switch\", \"CheckBox\"].includes(type) ? true : field.default;\n            }\n\n            // Date Format\n            if ([\"DatePicker\", \"DateTimePicker\"].includes(type) && data[name]) {\n                data[name] = neptune.Adaptive.getDate(data[name]);\n            }\n\n            // MultiSelect Parser\n            if ([\"MultiSelectLookup\", \"MultiSelectScript\"].includes(type)) {\n                try {\n                    const keyString = data[name];\n\n                    if (typeof keyString === \"string\") {\n                        if (keyString.startsWith(\"{\")) {\n                            const keyValues = keyString.substr(1, keyString.length - 2);\n                            const keyJSON = `[${keyValues}]`;\n                            const keyArray = JSON.parse(keyJSON);\n                            data[name] = keyArray;\n                        } else {\n                            const dataArray = data[name].split(\",\");\n                            data[name] = dataArray;\n                        }\n                    }\n                } catch (e) {\n                    console.error(e);\n                }\n            }\n        });\n\n        // Switch to readOnly if requirements are met\n        toolHeaderSave.setEnabled(true);\n\n        // Requirement 1\n        if (\n            modelAppConfig.oData.settings.properties.form?.field1ReadOnly &&\n            modelAppConfig.oData.settings.properties.form.operator1ReadOnly &&\n            modelAppConfig.oData.settings.properties.form.value1ReadOnly\n        ) {\n            if (\n                report.checkFieldsReadOnly(\n                    data[modelAppConfig.oData.settings.properties.form.field1ReadOnly],\n                    modelAppConfig.oData.settings.properties.form.operator1ReadOnly,\n                    modelAppConfig.oData.settings.properties.form.value1ReadOnly || modelAppConfig.oData.settings.properties.form.sysvar1ReadOnly\n                )\n            ) {\n                report.setFieldsReadOnly();\n                toolHeaderSave.setEnabled(false);\n                toolHeaderDelete.setEnabled(false);\n            }\n        }\n\n        // Requirement 2\n        if (\n            modelAppConfig.oData.settings.properties.form?.field2ReadOnly &&\n            modelAppConfig.oData.settings.properties.form.operator2ReadOnly &&\n            modelAppConfig.oData.settings.properties.form.value2ReadOnly\n        ) {\n            if (\n                report.checkFieldsReadOnly(\n                    data[modelAppConfig.oData.settings.properties.form.field2ReadOnly],\n                    modelAppConfig.oData.settings.properties.form.operator2ReadOnly,\n                    modelAppConfig.oData.settings.properties.form.value2ReadOnly || modelAppConfig.oData.settings.properties.form.sysvar2ReadOnly\n                )\n            ) {\n                report.setFieldsReadOnly();\n                toolHeaderSave.setEnabled(false);\n                toolHeaderDelete.setEnabled(false);\n            }\n        }\n\n        // If Save is not enabled\n        if (!modelAppConfig.oData.settings.properties.report.enableSave) {\n            report.setFieldsReadOnly();\n        }\n\n        modelAppData.setData(data);\n        modelAppData.refresh();\n\n        // Tabs\n        if (modelAppConfig.oData.settings.properties.report._tab1Nav) {\n            report.openChild(modelAppConfig.oData.settings.properties.report._tab1Nav, barEditItem1);\n        } else {\n            barEditItem1.destroyContent();\n            barEditItem1.setCount(0);\n        }\n\n        if (modelAppConfig.oData.settings.properties.report._tab2Nav) {\n            report.openChild(modelAppConfig.oData.settings.properties.report._tab2Nav, barEditItem2);\n        } else {\n            barEditItem2.destroyContent();\n            barEditItem2.setCount(0);\n        }\n\n        if (modelAppConfig.oData.settings.properties.report._tab3Nav) {\n            report.openChild(modelAppConfig.oData.settings.properties.report._tab3Nav, barEditItem3);\n        } else {\n            barEditItem3.destroyContent();\n            barEditItem3.setCount(0);\n        }\n\n        if (modelAppConfig.oData.settings.properties.report._tab4Nav) {\n            report.openChild(modelAppConfig.oData.settings.properties.report._tab4Nav, barEditItem4);\n        } else {\n            barEditItem4.destroyContent();\n            barEditItem4.setCount(0);\n        }\n\n        if (modelAppConfig.oData.settings.properties.report._tab5Nav) {\n            report.openChild(modelAppConfig.oData.settings.properties.report._tab5Nav, barEditItem5);\n        } else {\n            barEditItem5.destroyContent();\n            barEditItem5.setCount(0);\n        }\n\n        oApp.setBusy(false);\n    },\n\n    save: function () {\n        toolHeaderSave.setEnabled(false);\n\n        const s = modelAppConfig.oData.settings;\n\n        let formUnique = true;\n        let formValues = {};\n        let formValid = true;\n        let saveData = {};\n\n        if (modelAppData.oData && modelAppData.oData.id) saveData.id = modelAppData.oData.id;\n\n        s.fieldsSel.forEach(function (f) {\n            // Format Data for Boolean\n            if ([\"Switch\", \"CheckBox\"].includes(f.type)) {\n                if (!modelAppData.oData[f.name]) modelAppData.oData[f.name] = false;\n            }\n\n            saveData[f.name] = modelAppData.oData[f.name];\n\n            delete modelAppData.oData[f.name + \"ValueState\"];\n        });\n\n        // Required Validatation, if it's required, editable and visible\n        s.fieldsSel\n            .filter(function (f) {\n                return f.required && f.editable && f.visible;\n            })\n            .forEach(function (f) {\n                if (saveData[f.name] === null || saveData[f.name] === undefined || saveData[f.name] === \"\") {\n                    formValid = false;\n                    modelAppData.oData[f.name + \"ValueState\"] = \"Error\";\n                }\n            });\n\n        if (!formValid) {\n            const textRequiredFields = neptune.Adaptive.translateProperty(\"report\", \"requiredFieldsToast\", modelAppConfig.getData());\n            sap.m.MessageToast.show(textRequiredFields);\n            toolHeaderSave.setEnabled(true);\n            modelAppData.refresh();\n            return;\n        }\n\n        // Unique Validatation, if it's editable and visible\n        s.fieldsSel\n            .filter(function (f) {\n                return f.unique && f.editable && f.visible && saveData[f.name];\n            })\n            .forEach(function (f) {\n                const value = saveData[f.name];\n\n                if (formValues[value]) {\n                    formUnique = false;\n                } else {\n                    formValues[value] = 1;\n                }\n            });\n\n        if (!formUnique) {\n            s.fieldsSel\n                .filter(function (f) {\n                    return f.unique && f.editable && f.visible && saveData[f.name];\n                })\n                .forEach(function (f) {\n                    modelAppData.oData[f.name + \"ValueState\"] = \"Error\";\n                });\n\n            const textUniqueValues = neptune.Adaptive.translateProperty(\"report\", \"textUnique\", modelAppConfig.getData());\n            sap.m.MessageToast.show(textUniqueValues);\n            toolHeaderSave.setEnabled(true);\n            modelAppData.refresh();\n            return;\n        }\n\n        // Add navigation KeyFields to Save\n        if (report.__metadata) saveData.__metadata = report.__metadata;\n\n        // Add UniqueKey\n        if (report.uniqueKeyValue && report.uniqueKeyField) {\n            saveData[report.uniqueKeyField] = report.uniqueKeyValue;\n        }\n\n        neptune.Adaptive.run(modelAppConfig.oData, saveData, \"Save\")\n            .then(function (data) {\n                if (data.status && data.status === \"required\") {\n                    const textRequiredFields = neptune.Adaptive.translateProperty(\"report\", \"requiredFieldsToast\", modelAppConfig.getData());\n                    sap.m.MessageToast.show(textRequiredFields);\n                } else {\n                    // Message from Server Script\n                    if (data.message && data.message.text) {\n                        if (data.message.type) {\n                            sap.m.MessageBox[data.message.type](data.message.text);\n                        } else {\n                            sap.m.MessageBox.information(data.message.text);\n                        }\n                        return;\n                    }\n\n                    sap.m.MessageToast.show(toastSaved.getText());\n\n                    if (oApp.getParent() && oApp.getParent().getParent() && oApp.getParent().getParent().close) {\n                        oApp.getParent().getParent().close();\n                    }\n\n                    if (s.events && s.events.afterChildSave) s.events.afterChildSave();\n\n                    const openedAsSidepanel = modelAppConfig.oData.settings?.navigation?.openAs === \"S\";\n\n                    if (openedAsSidepanel) {\n                        // a new record is being created in the sidepanel tab\n                        if (!saveData.id) {\n                            sap.n.Shell.closeSidepanelTab(sap.n.Shell.getTabKey(\"PLANET9_ADAPTIVE_EDIT\", \"\"));\n                        }\n                    } else {\n                        report.close();\n                    }\n                }\n\n                modelAppData.refresh();\n            })\n            .catch(function (data) {\n                const j = data.responseJSON;\n                if (j && j.status) {\n                    if ((j.status.indexOf(\"UNIQUE constraint failed\") > -1 || j.status.indexOf(\"duplicate key value\") > -1) && s.properties.report.textUnique) {\n                        sap.m.MessageToast.show(neptune.Adaptive.translateProperty(\"report\", \"textUnique\", modelAppConfig.oData));\n                    } else {\n                        sap.m.MessageToast.show(j.status);\n                    }\n                }\n            })\n            .finally(function () {\n                setTimeout(function () {\n                    if (toolHeaderSave) toolHeaderSave.setEnabled(true);\n                }, 1000);\n            });\n    },\n\n    close: function () {\n        const isDialog = oApp.getParent() && oApp.getParent().getParent() && oApp.getParent().getParent().close;\n\n        if (isDialog) {\n            oApp.getParent().getParent().close();\n            return;\n        } else if (modelAppConfig.oData.settings.events && modelAppConfig.oData.settings.events.onChildBack) {\n            modelAppConfig.oData.settings.events.onChildBack();\n            return;\n        } else if (AppCache && AppCache.Back) {\n            AppCache.Back();\n            return;\n        }\n\n        if (sap.n.Shell && sap.n.Shell.closeAllSidepanelTabs) sap.n.Shell.closeAllSidepanelTabs();\n\n        if (!isDialog && sap.n.HashNavigation && sap.n.HashNavigation.deleteNavItem) {\n            sap.n.HashNavigation.deleteNavItem();\n        }\n    },\n\n    openChild: function (navigation, child) {\n        if (navigation.destinationType === \"F\") {\n            neptune.Adaptive.getConfig(navigation.destinationTargetF).then(function (config) {\n                if (!config) return;\n\n                config.settings.navigation = navigation;\n                config.settings.data = modelAppData.oData;\n\n                if (config.settings.data && navigation.keyField) {\n                    config.settings.data._keyField = navigation.keyField;\n                }\n\n                if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.sourceTarget) {\n                    config.settings.navigation.sourceTarget = modelAppConfig.oData.settings.navigation.sourceTarget;\n                }\n\n                AppCache.Load(config.application, {\n                    appGUID: ModelData.genID(),\n                    startParams: config,\n                    parentObject: child,\n                });\n            });\n        } else {\n            let startParams = {};\n\n            if (modelAppData.oData) {\n                startParams.data = JSON.parse(JSON.stringify(modelAppData.oData));\n            }\n\n            AppCache.Load(navigation.destinationTargetA, {\n                appGUID: ModelData.genID(),\n                startParams: startParams,\n                parentObject: child,\n            });\n        }\n    },\n\n    buildForm: function (parent, config, appdata, events) {\n        try {\n            parent.destroyContent();\n\n            var form = new sap.ui.layout.form.SimpleForm({\n                layout: config.settings.properties.form.formLayout || \"ResponsiveGridLayout\",\n                editable: true,\n                backgroundDesign: \"Transparent\",\n                columnsL: parseInt(config.settings.properties.form.columnsL) || 2,\n                columnsM: parseInt(config.settings.properties.form.columnsM) || 1,\n                labelSpanL: parseInt(config.settings.properties.form.labelSpanL) || 4,\n                labelSpanM: parseInt(config.settings.properties.form.labelSpanM) || 2,\n            });\n\n            form.addStyleClass(\"sapUiMediumMarginTop\");\n\n            // Compact\n            if (config.settings.properties.form.enableCompact) {\n                form.addStyleClass(\"sapUiSizeCompact\");\n            } else {\n                form.removeStyleClass(\"sapUiSizeCompact\");\n            }\n\n            // Selection Fields\n            $.each(config.settings.fieldsSel, function (i, field) {\n                // Trigger new form\n                if (field.enableNewForm) {\n                    parent.addContent(form);\n\n                    form = new sap.ui.layout.form.SimpleForm({\n                        layout: config.settings.properties.form.formLayout || \"ResponsiveGridLayout\",\n                        editable: true,\n                        backgroundDesign: \"Transparent\",\n                        columnsL: parseInt(field.columnsL) || 2,\n                        columnsM: parseInt(field.columnsM) || 1,\n                        labelSpanL: parseInt(field.labelSpanL) || 4,\n                        labelSpanM: parseInt(field.labelSpanM) || 2,\n                    });\n\n                    // Compact\n                    if (config.settings.properties.form.enableCompact) {\n                        form.addStyleClass(\"sapUiSizeCompact\");\n                    } else {\n                        form.removeStyleClass(\"sapUiSizeCompact\");\n                    }\n                }\n\n                if (field.columnLabel)\n                    form.addContent(\n                        new sap.ui.core.Title({\n                            text: field.columnLabel,\n                            level: config.settings.properties.form.titleLevel || \"Auto\",\n                        })\n                    );\n\n                // Create Fields\n                switch (field.type) {\n                    case \"Editor\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.FlexBox({\n                            height: field.editorHeight || \"400px\",\n                            renderType: \"Bare\",\n                            width: \"100%\",\n                            visible: field.visible,\n                        });\n\n                        try {\n                            neptune.Adaptive.editor(newField, {});\n                        } catch (e) {\n                            console.log(e);\n                        }\n\n                        field._editor = newField.editor;\n                        field._editor.setEditable(field.editable);\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        if (field.default) newField.setState(field.default);\n                        break;\n\n                    case \"JSON\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.Input({\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            visible: report.buildVisibleProp(field),\n                            editable: true,\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            showValueHelp: true,\n                            valueHelpOnly: true,\n                            valueHelpRequest: function () {\n                                const inputData = modelAppData.getData()[field.name];\n                                editorData = { fieldName: field.name, content: inputData, readOnly: !field.editable };\n                                diaJSON.open();\n                            },\n                        });\n\n                        newField.bindProperty(\"value\", {\n                            parts: [{ path: \"AppData>/\" + field.name }],\n                            formatter: function (value) {\n                                if (!value) return;\n                                if (typeof value === \"object\") {\n                                    try {\n                                        return JSON.stringify(value);\n                                    } catch (e) {\n                                        return \"Error parsing json data: \" + e.message;\n                                    }\n                                }\n                                return value;\n                            },\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"DatePicker\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.DatePicker({\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"DateTimePicker\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.DateTimePicker({\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            secondsStep: parseInt(field.dateTimePickerSecondsStep) || 1,\n                            minutesStep: parseInt(field.dateTimePickerMinutesStep) || 1,\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.dateTimePickerFormat) newField.setDisplayFormat(field.dateTimePickerFormat);\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"CheckBox\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.CheckBox({\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            selected: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"Switch\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.Switch({\n                            visible: report.buildVisibleProp(field),\n                            enabled: field.editable,\n                            state: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"StepInput\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        let options = {\n                            visible: report.buildVisibleProp(field),\n                            enabled: field.editable,\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                        };\n\n                        if (field.stepInputMin) options.min = parseInt(field.stepInputMin);\n                        if (field.stepInputMax) options.max = parseInt(field.stepInputMax);\n                        if (field.stepInputStep) options.step = parseInt(field.stepInputStep);\n                        if (field.stepInputTextAlign) options.textAlign = field.stepInputTextAlign;\n\n                        var newField = new sap.m.StepInput(options);\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"MultiSelect\":\n                    case \"MultiSelectLookup\":\n                    case \"MultiSelectScript\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        newField = new sap.m.MultiComboBox({\n                            width: \"100%\",\n                            visible: report.buildVisibleProp(field),\n                            selectedKeys: \"{AppData>/\" + field.name + \"}\",\n                            placeholder: field.placeholder || \"\",\n                            showSelectAll: true,\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            showSecondaryValues: true,\n                        });\n\n                        if (field.items) {\n                            if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                sortObjects(field.items, [\"additionalText\", \"text\"]);\n                            } else {\n                                field.items.sort(sort_by(\"text\"));\n                            }\n\n                            let lastGroup = \"\";\n\n                            $.each(field.items, function (i, item) {\n                                if ((field.lookupFieldGrouping1 || field.lookupFieldGrouping2) && lastGroup !== item.additionalText) {\n                                    newField.addItem(new sap.ui.core.SeparatorItem({ text: item.additionalText }));\n                                    lastGroup = item.additionalText;\n                                }\n\n                                if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                    newField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text }));\n                                } else {\n                                    newField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text, additionalText: item.additionalText }));\n                                }\n                            });\n                        }\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"SingleSelect\":\n                    case \"SingleSelectLookup\":\n                    case \"SingleSelectScript\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.ComboBox({\n                            width: \"100%\",\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            placeholder: field.placeholder || \"\",\n                            selectedKey: \"{AppData>/\" + field.name + \"}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            showSecondaryValues: true,\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        // Items\n                        newField.addItem(new sap.ui.core.Item({ key: \"\", text: \"\" }));\n\n                        if (field.items) {\n                            if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                sortObjects(field.items, [\"additionalText\", \"text\"]);\n                            } else {\n                                field.items.sort(sort_by(\"text\"));\n                            }\n\n                            let lastGroup = \"\";\n\n                            $.each(field.items, function (i, item) {\n                                if ((field.lookupFieldGrouping1 || field.lookupFieldGrouping2) && lastGroup !== item.additionalText) {\n                                    newField.addItem(new sap.ui.core.SeparatorItem({ text: item.additionalText }));\n                                    lastGroup = item.additionalText;\n                                }\n\n                                if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                    newField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text }));\n                                } else {\n                                    newField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text, additionalText: item.additionalText }));\n                                }\n                            });\n                        }\n                        break;\n\n                    case \"TextArea\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.TextArea({\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            rows: parseInt(field.textAreaRows) || 2,\n                            placeholder: field.placeholder || \"\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            width: \"100%\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"Text\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.Text({\n                            visible: report.buildVisibleProp(field),\n                            text: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"ValueHelp\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.Input({\n                            visible: report.buildVisibleProp(field),\n                            editable: field.editable,\n                            type: field.inputType || \"Text\",\n                            placeholder: field.placeholder || \"\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            showValueHelp: true,\n                            valueHelpRequest: function (oEvent) {\n                                events.valueRequest = true;\n                                events.valueRequestField = newField.sId;\n                                events.valueRequestKey = field.valueRequestKey;\n                                neptune.Adaptive.navigation(field._navigation, modelAppData.oData, events);\n                            },\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        break;\n\n                    case \"Display\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        var newField = new sap.m.Input({\n                            visible: report.buildVisibleProp(field),\n                            editable: false,\n                            placeholder: field.placeholder || \"\",\n                            value: \"{AppData>/\" + field.name + \"}\",\n                        });\n\n                        if (field.description) {\n                            form.addContent(report.buildInputDescription(newField, field));\n                        } else {\n                            form.addContent(newField);\n                        }\n\n                        if (field.formatter) {\n                            newField.bindProperty(\"value\", {\n                                parts: [{ path: \"AppData>/\" + field.name }],\n                                formatter: function (fieldName) {\n                                    if (typeof fieldName === \"undefined\" || fieldName === null) return;\n                                    return neptune.Adaptive.formatter(fieldName, field.formatter, field.formatNumberDecimals, field.formatNumberSeparator);\n                                },\n                            });\n                        }\n                        break;\n\n                    default:\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                                design: \"Bold\",\n                            })\n                        );\n\n                        if (field.mask) {\n                            var newField = new sap.m.MaskInput({\n                                visible: report.buildVisibleProp(field),\n                                editable: field.editable,\n                                mask: field.mask,\n                                placeholder: field.placeholder || \"\",\n                                valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                                value: \"{AppData>/\" + field.name + \"}\",\n                                liveChange: function (oEvent) {\n                                    if (field.inputFormatter) {\n                                        let newValue = this.getValue();\n\n                                        switch (field.inputFormatter) {\n                                            case \"condense\":\n                                                newValue = newValue.replace(/\\s+/g, \"\");\n                                                break;\n\n                                            case \"uppercase\":\n                                                newValue = newValue.toUpperCase();\n                                                break;\n\n                                            case \"lowercase\":\n                                                newValue = newValue.toLowerCase();\n                                                break;\n\n                                            default:\n                                                break;\n                                        }\n\n                                        this.setValue(newValue);\n                                    }\n                                },\n                            });\n\n                            // Mask Rule if Not only Numbers\n                            if (field.mask.indexOf(\"*\") > -1) {\n                                newField.addRule(\n                                    new sap.m.MaskInputRule({\n                                        regex: \"[a-zA-Z0-9]\",\n                                    })\n                                );\n                            }\n\n                            if (field.description) {\n                                form.addContent(report.buildInputDescription(newField, field));\n                            } else {\n                                form.addContent(newField);\n                            }\n                        } else {\n                            var newField = new sap.m.Input({\n                                visible: report.buildVisibleProp(field),\n                                editable: field.editable,\n                                type: field.inputType || \"Text\",\n                                placeholder: field.placeholder || \"\",\n                                valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                                value: \"{AppData>/\" + field.name + \"}\",\n                                liveChange: function (oEvent) {\n                                    if (field.inputFormatter) {\n                                        let newValue = this.getValue();\n\n                                        switch (field.inputFormatter) {\n                                            case \"condense\":\n                                                newValue = newValue.replace(/\\s+/g, \"\");\n                                                break;\n\n                                            case \"uppercase\":\n                                                newValue = newValue.toUpperCase();\n                                                break;\n\n                                            case \"lowercase\":\n                                                newValue = newValue.toLowerCase();\n                                                break;\n\n                                            default:\n                                                break;\n                                        }\n\n                                        this.setValue(newValue);\n                                    }\n                                },\n                            });\n\n                            if (field.description) {\n                                form.addContent(report.buildInputDescription(newField, field));\n                            } else {\n                                form.addContent(newField);\n                            }\n                        }\n                }\n            });\n\n            parent.addContent(form);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    buildVisibleProp: function (field) {\n        const conditionalValue = field.visibleFixedValue ?? field.visibleSystemValue ?? \"\";\n        const visibleStatement = field.visibleInverse ? \"false : true\" : \"true : false\";\n        const operator = field.visibleCondition;\n\n        function isNumber(value) {\n            return value !== \"\" && !isNaN(Number(value));\n        }\n\n        const fieldPath = `\\${AppData>/${field.visibleFieldName}}`;\n\n        let visibleCondition = field.visible;\n        if (visibleCondition && field.visibleFieldName && operator) {\n            if (operator === \"isEmpty\") {\n                visibleCondition = field.visibleInverse ? `{= !!${fieldPath}}` : `{= !${fieldPath}}`;\n            } else if (isNumber(conditionalValue)) {\n                visibleCondition = `{= parseInt(${fieldPath}) ${operator} ${conditionalValue} ? ${visibleStatement}}`;\n            } else {\n                visibleCondition = `{= ${fieldPath}.toString() ${operator} '${conditionalValue}' ? ${visibleStatement}}`;\n            }\n        }\n\n        return visibleCondition;\n    },\n\n    buildInputDescription: function (newField, field) {\n        var newVBox = new sap.m.VBox({\n            visible: report.buildVisibleProp(field),\n        });\n\n        var newDesc = new sap.m.Label({\n            text: field.description,\n            wrapping: true,\n        });\n\n        newDesc.addStyleClass(\"sapUiSmallMarginBottom nepInputDescription\");\n\n        newVBox.addItem(newField);\n        newVBox.addItem(newDesc);\n\n        return newVBox;\n    },\n\n    setFieldsReadOnly: function () {\n        let fields = report.formObject[0].getContent();\n\n        if (fields) {\n            fields.forEach(function (field) {\n                // Input Fields\n                if (field.setEditable) {\n                    field.setEditable(false);\n                } else if (field.setEnabled) {\n                    field.setEnabled(false);\n                }\n\n                // VBox\n                if (field.getItems) {\n                    let items = field.getItems();\n\n                    items.forEach(function (item) {\n                        if (item.setEditable) {\n                            item.setEditable(false);\n                        } else if (item.setEnabled) {\n                            item.setEnabled(false);\n                        }\n                    });\n                }\n            });\n        }\n    },\n\n    checkFieldsReadOnly: function (fieldValue, operator, dataValue) {\n        // Symbols\n        if (dataValue === \"UserName\") {\n            if (AppCache.userInfo && AppCache.userInfo.username) {\n                dataValue = AppCache.userInfo.username;\n            } else {\n                dataValue = systemSettings.user.username;\n            }\n        }\n\n        let isReadOnly = false;\n\n        switch (operator) {\n            case \"===\":\n                if (fieldValue === dataValue) isReadOnly = true;\n                break;\n\n            case \"!==\":\n                if (fieldValue !== dataValue) isReadOnly = true;\n                break;\n\n            case \">=\":\n                if (fieldValue >= dataValue) isReadOnly = true;\n                break;\n\n            case \"<=\":\n                if (fieldValue <= dataValue) isReadOnly = true;\n                break;\n\n            case \">\":\n                if (fieldValue > dataValue) isReadOnly = true;\n                break;\n\n            case \"<\":\n                if (fieldValue < dataValue) isReadOnly = true;\n                break;\n\n            default:\n                break;\n        }\n\n        return isReadOnly;\n    },\n\n    uploadFieldAfterRender: () => {\n        const elm = document.getElementById(\"_editUploader\");\n        if (elm) {\n            elm.removeEventListener(\"change\", report.uploadFileChangeEvent);\n            elm.addEventListener(\"change\", report.uploadFileChangeEvent);\n        }\n    },\n\n    uploadFileChangeEvent: (event) => {\n        report.uploadFile(event, modelAppData.oData.id);\n    },\n\n    uploadFile: function (event, objectKey) {\n        $.each(event.target.files, function (i, data) {\n            var file = {\n                name: data.name,\n                description: \"\",\n                objectKey: objectKey,\n                objectType: \"ADAPTIVE\",\n                fileType: data.type,\n                fileSize: data.size,\n            };\n\n            try {\n                var fileReader = new FileReader();\n\n                fileReader.onload = function (fileData) {\n                    file.content = fileData.target.result;\n\n                    $.ajax({\n                        type: \"POST\",\n                        contentType: \"application/json\",\n                        url: \"/api/functions/Gos/Save\",\n                        data: JSON.stringify(file),\n                        success: function (data) {\n                            ModelData.Add(tabAttachment, data);\n                        },\n                        error: function (data) {\n                            console.log(data);\n                        },\n                    });\n\n                    document.getElementById(\"_editUploader\").value = \"\";\n                };\n                fileReader.readAsDataURL(data);\n            } catch (e) {\n                try {\n                } catch (e) {}\n            }\n        });\n    },\n\n    getAttachment: function (data) {\n        if (!data.id) return;\n\n        $.ajax({\n            type: \"POST\",\n            contentType: \"application/json\",\n            url: \"/api/functions/Gos/List\",\n            data: JSON.stringify({\n                objectKey: data.id,\n                objectType: \"ADAPTIVE\",\n            }),\n            success: function (data) {\n                modeltabAttachment.setData(data);\n            },\n            error: function (data) {\n                console.log(data);\n            },\n        });\n    },\n\n    formatAttachment: async function (file) {\n        if (file.fileType.indexOf(\"image/\") > -1) {\n            return await report.previewAttachment(file);\n        }\n    },\n\n    previewAttachment: async function (file) {\n        return new Promise(function (resolve) {\n            $.ajax({\n                type: \"POST\",\n                contentType: \"application/json\",\n                url: \"/api/functions/Gos/Get\",\n                data: JSON.stringify(file),\n                success: function (data) {\n                    resolve(data.content);\n                },\n                error: function (data) {\n                    resolve(\"\");\n                },\n            });\n        });\n    },\n};\n\nreport.start();\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":64},{"fieldNo":"022e25d0-6e32-4fec-b468-002a5b3a4fe6","fieldName":"editor","fieldParent":"326c943b-7679-4056-cc35-794ee3168f3f","fieldType":"neptune.Script","script":"if (typeof monaco !== \"undefined\") {\n    sap.ui.getCore().attachThemeChanged(function () {\n        const theme = poSettings.getMonacoTheme();\n        monaco?.editor.setTheme(theme);\n    });\n}\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":65}],"componentInterface":[],"ver":"24.05.27.0950","application":"planet9_adaptive_edit","title":"Adaptive Edit","description":"Adaptive Edit","enableFileStorage":true,"enableManifest":false,"enableStylesheet":true,"enableObfuscate":false,"onlyRunLaunchpad":true,"disabled":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"appType":"F","ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_chart":false,"ui5_theme":"sap_fiori_3","ui5_version":"1.120","ui5_language":null,"ui5_url":"","cus_theme":"","css":".nepDynamicPageNoPadding .sapMIBar-CTX.sapMFooter-CTX {\n    border-radius: 8px;\n    bottom: 20px;\n}\n\n.nepDynamicPage .sapFDynamicPageTitle {\n    padding: 0.5rem 0.8rem !important;\n}\n\n.nepDynamicPage .sapFDynamicPageHeader.sapFDynamicPageHeaderWithContent {\n    padding: 0 !important;\n}\n\n.nepDynamicPage .sapMITBContent {\n    border-bottom: none !important;\n}\n\n.nepRadiusTop .sapMListHdr {\n    border-top-left-radius: 0.75rem !important;\n    border-top-right-radius: 0.75rem !important;\n}\n\n.nepNoRadiusTop {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n\n.nepNoRadiusTop .sapMListHdr {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n}\n\n.nepNoRadius {\n    border-radius: 0;\n}\n\n.nepInputDescription {\n    color: #475566;\n}\n\n.nepFlexWrap .sapFDynamicPageTitleMain {\n    flex-wrap: wrap !important;\n}\n\n.nepFlexLeft .sapFDynamicPageTitleMainInner {\n    width: 100% !important;\n}\n\n.sapMDialog > .sapMDialogTitle .sapMDialogTitleGroup:focus::after {\n    border: none;\n}\n\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH1,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH2,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH3,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH4,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH5,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH6 {\n    height: 0 !important;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH1 {\n    font-size: 3rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH2 {\n    font-size: 2rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH3 {\n    font-size: 1.5rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH4 {\n    font-size: 1.25rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH5 {\n    font-size: 1rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH6 {\n    font-size: 0.875rem;\n}\n\n.wholeHeight > * {\n  height: 100%;\n}\n\n.nepFormInput .sapUiFormResGrid {\n  margin-bottom: none;\n  border: none;\n}","compiledCss":".nepDynamicPageNoPadding .sapMIBar-CTX.sapMFooter-CTX {\n  border-radius: 8px;\n  bottom: 20px;\n}\n\n.nepDynamicPage .sapFDynamicPageTitle {\n  padding: 0.5rem 0.8rem !important;\n}\n\n.nepDynamicPage .sapFDynamicPageHeader.sapFDynamicPageHeaderWithContent {\n  padding: 0 !important;\n}\n\n.nepDynamicPage .sapMITBContent {\n  border-bottom: none !important;\n}\n\n.nepRadiusTop .sapMListHdr {\n  border-top-left-radius: 0.75rem !important;\n  border-top-right-radius: 0.75rem !important;\n}\n\n.nepNoRadiusTop {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nepNoRadiusTop .sapMListHdr {\n  border-top-left-radius: 0;\n  border-top-right-radius: 0;\n}\n\n.nepNoRadius {\n  border-radius: 0;\n}\n\n.nepInputDescription {\n  color: #475566;\n}\n\n.nepFlexWrap .sapFDynamicPageTitleMain {\n  flex-wrap: wrap !important;\n}\n\n.nepFlexLeft .sapFDynamicPageTitleMainInner {\n  width: 100% !important;\n}\n\n.sapMDialog > .sapMDialogTitle .sapMDialogTitleGroup:focus::after {\n  border: none;\n}\n\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH1,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH2,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH3,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH4,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH5,\n.nepTitleZero .sapUiFormContainerTitle > .sapUiFormTitleH6 {\n  height: 0 !important;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH1 {\n  font-size: 3rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH2 {\n  font-size: 2rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH3 {\n  font-size: 1.5rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH4 {\n  font-size: 1.25rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH5 {\n  font-size: 1rem;\n}\n\n.nepDynamicPage .sapUiFormContainerTitle > .sapUiFormTitleH6 {\n  font-size: 0.875rem;\n}\n\n.wholeHeight > * {\n  height: 100%;\n}\n\n.nepFormInput .sapUiFormResGrid {\n  margin-bottom: none;\n  border: none;\n}","header":"","manifest":"","globalScript":"","deleted":false,"libHighchart":false,"libHighmap":false,"publicAccess":false,"ui5_bootstrap":false,"ui5_ionic":false,"useV2AppHandler":false,"compilerTarget":3,"tabWidth":null,"printWidth":200,"generateVersionOnActivation":false,"activationHistoryCount":0,"package":"9a22f09f-1c13-ed11-bd6e-000d3ab1d9ff","apis":[],"customComponents":[]},{"id":"77d5d812-f861-4044-ba75-3e7a268a4d14","createdAt":"2022-02-04T15:46:44.966Z","updatedAt":"2024-08-30T18:28:34.284Z","createdBy":"luuk.wosten@neptune-software.com","changedBy":"system","objects":[{"fieldNo":"8db38342-83bc-4e8d-fbc9-ae83b9d85a66","fieldName":"oApp","fieldParent":0,"fieldType":"sap.m.App","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"defaultTransitionName","grouping":"Properties","value":"show","script":"","translation":[]},{"attribute":"autoFocus","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":1},{"fieldNo":"1009d86b-3585-42a1-dcf3-021ef4ec1f0f","fieldName":"oPageDynamic","fieldParent":"8db38342-83bc-4e8d-fbc9-ae83b9d85a66","fieldType":"sap.f.DynamicPage","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"preserveHeaderStateOnScroll","grouping":"Properties","value":"{AppConfig>/settings/properties/form/headerPreserveState}","script":"","translation":[]},{"attribute":"headerExpanded","grouping":"Properties","value":"{AppConfig>/settings/properties/form/headerExpanded}","script":"","translation":[]},{"attribute":"showFooter","grouping":"Properties","value":"{= ${AppConfig>/settings/properties/table/enablePagination} ? true:false}","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepDynamicPage","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":2},{"fieldNo":"50cd8d28-5207-48ca-aceb-aaf126cf7ba2","fieldName":"oPageTitle","fieldParent":"1009d86b-3585-42a1-dcf3-021ef4ec1f0f","fieldType":"sap.f.DynamicPageTitle","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepFlexWrap","script":"","translation":[]}],"fieldPos":3},{"fieldNo":"d5963d9e-ae1d-41e5-9c98-e541aeca822d","fieldName":"oPageContentHeader","fieldParent":"50cd8d28-5207-48ca-aceb-aaf126cf7ba2","fieldType":"neptune.DynamicPageTitleContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setHeading","script":"","translation":[]}],"fieldPos":4},{"fieldNo":"39b8bc01-9ba7-4a8b-ff9f-91d7e5656d95","fieldName":"oPageHeaderBox","fieldParent":"d5963d9e-ae1d-41e5-9c98-e541aeca822d","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"fitContainer","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":5},{"fieldNo":"7b8754dd-28f6-4108-de25-c4f92d5d6d1f","fieldName":"oPageHeaderIcon","fieldParent":"39b8bc01-9ba7-4a8b-ff9f-91d7e5656d95","fieldType":"sap.f.Avatar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/showIcon}","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"{AppConfig>/settings/properties/report/avatarIcon}","script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]}],"fieldPos":6},{"fieldNo":"6997926f-74fa-4473-b274-e27250fbbfd1","fieldName":"oPageHeaderVBox","fieldParent":"39b8bc01-9ba7-4a8b-ff9f-91d7e5656d95","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":7},{"fieldNo":"28081b72-6b01-4a2d-c868-dae695a35a02","fieldName":"oPageHeaderHBoxTitle","fieldParent":"6997926f-74fa-4473-b274-e27250fbbfd1","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":8},{"fieldNo":"e3dce007-6758-4791-f3e2-7dcb1c93ee9a","fieldName":"oPageHeaderTitle","fieldParent":"28081b72-6b01-4a2d-c868-dae695a35a02","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBeginEnd","script":"","translation":[]},{"attribute":"level","grouping":"Properties","value":"H1","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":9},{"fieldNo":"4ce4661b-3d17-48d1-b2fb-0e0df5c9ca0f","fieldName":"oPageHeaderNumber","fieldParent":"28081b72-6b01-4a2d-c868-dae695a35a02","fieldType":"sap.m.ObjectNumber","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"number","grouping":"Properties","value":"(0)","script":"","translation":[]},{"attribute":"emphasized","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":10},{"fieldNo":"07d2d128-0c69-40a9-a026-00ab0c213521","fieldName":"oPageHeaderHBoxSubTitle","fieldParent":"6997926f-74fa-4473-b274-e27250fbbfd1","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{= !!${AppConfig>/settings/properties/report/subTitle}}","script":"","translation":[]}],"fieldPos":11},{"fieldNo":"04541624-51ad-44c0-8b53-7972cfce5721","fieldName":"oPageHeaderSubTitle","fieldParent":"07d2d128-0c69-40a9-a026-00ab0c213521","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{= !!${AppConfig>/settings/properties/report/subTitle}}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"{AppConfig>/settings/properties/report/subTitle}","script":"","translation":[]},{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":12},{"fieldNo":"3b3c3081-be08-4ea2-c534-c0a6e7ae3cae","fieldName":"oPageHeaderHBoxVariant","fieldParent":"6997926f-74fa-4473-b274-e27250fbbfd1","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableVariant}","script":"","translation":[]}],"fieldPos":13},{"fieldNo":"fa4c08ce-2e6b-4538-a9b7-441e24d1633f","fieldName":"oPageHeaderVariant","fieldParent":"3b3c3081-be08-4ea2-c534-c0a6e7ae3cae","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Ghost","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiNoMargin","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepVariant","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://nep/table-filter","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const currentFilter = modelAppData.getData();\nconst selectedVariant = modelVariants.getData().find((item) => item.selected);\n\nconst activeFilters = Object.entries(currentFilter).map(([key, value]) => ({\n    field: key,\n    filter: value,\n}));\n\nmodeltabActiveFilters.setData(activeFilters);\n\n[butVariantApply, butVariantBack, butVariantSave, butVariantUpdateApply, butVariantDelete, butVariantCancel].forEach((btn) => btn.setVisible(false));\n[butVariantClear, butVariantNew].forEach((btn) => btn.setVisible(true));\n\ndiaVariant.open();\n","translation":[]}],"fieldPos":14},{"fieldNo":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldName":"oPageContentAction","fieldParent":"50cd8d28-5207-48ca-aceb-aaf126cf7ba2","fieldType":"neptune.DynamicPageTitleContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"addNavigationAction","script":"","translation":[]}],"fieldPos":15},{"fieldNo":"02fabe8f-fc78-4651-d0f7-2e1294e9a0cd","fieldName":"oPageExport","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableExport}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonExport}","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Export","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonExport}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelformExportImport.setData({\n    export: true,\n    title: 'Export values',\n    valuesIndex: 0,\n    csvDelimiterIndex: 0\n});\ndiaExportImportData.setBeginButton(btnExportData);\ndiaExportImportData.open();","language":"typescript","translation":[]}],"fieldPos":16},{"fieldNo":"6150ff5d-b151-477a-cf5b-924e7fe64906","fieldName":"oPageImport","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableImport}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonImport}","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Import","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonImport}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelformExportImport.setData({\n    export: false,\n    title: 'Import values',\n    valuesIndex: 0,\n    csvDelimiterIndex: 0\n});\ndiaExportImportData.setBeginButton(btnImportData);\ndiaExportImportData.open();","language":"javascript","translation":[]}],"fieldPos":17},{"fieldNo":"7cf579dd-da9e-4a7f-aed2-2db0c7048afe","fieldName":"oPageMultiSelect","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableMultiSelect}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonMultiSelect}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonMultiSelect}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"report.multiselect();","script":"report.multiselect();","translation":[]}],"fieldPos":18},{"fieldNo":"51e11144-5387-4608-f79f-6e93ea47423b","fieldName":"oPageCreate","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableCreate}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonCreate}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonCreate}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"report.create();","script":"report.create();","translation":[]}],"fieldPos":19},{"fieldNo":"5a5ca2f7-0c17-44a7-af8f-f63531a19e91","fieldName":"oPageUpdate","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableRun}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonRun}","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonRun}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"report.run();","script":"report.run();","translation":[]}],"fieldPos":20},{"fieldNo":"188d2c39-0325-41ef-bd57-deb83769af81","fieldName":"oPageClose","fieldParent":"b333b340-2dce-4035-dd18-eef91bd12e07","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/report/enableClose}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"{AppConfig>/settings/properties/report/typeButtonClose}","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginEnd","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"{AppConfig>/settings/properties/report/iconButtonClose}","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"report.close();","script":"report.close();","translation":[]}],"fieldPos":21},{"fieldNo":"a291ad47-2206-4bd4-dc96-e8a24b402c22","fieldName":"oPageHeader","fieldParent":"1009d86b-3585-42a1-dcf3-021ef4ec1f0f","fieldType":"sap.f.DynamicPageHeader","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"pinnable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}],"fieldPos":22},{"fieldNo":"d6f94faa-72a9-46f3-b087-4c07e748a79e","fieldName":"oPanFilter","fieldParent":"a291ad47-2206-4bd4-dc96-e8a24b402c22","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":23},{"fieldNo":"8296c227-ba75-47b9-808d-0f21a835df53","fieldName":"scrollTab","fieldParent":"1009d86b-3585-42a1-dcf3-021ef4ec1f0f","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":24},{"fieldNo":"d7e955cb-6766-4f84-baa7-64759c660ec7","fieldName":"tabData","fieldParent":"8296c227-ba75-47b9-808d-0f21a835df53","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showSeparators","grouping":"Properties","value":"{AppConfig>/settings/properties/table/showSeparators}","script":"","translation":[]},{"attribute":"modeAnimationOn","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"inset","grouping":"Properties","value":"{AppConfig>/settings/properties/table/inset}","script":"","translation":[]},{"attribute":"growingThreshold","grouping":"Properties","value":"100","script":"","translation":[]},{"attribute":"growingScrollToLoad","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"growing","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"fixedLayout","grouping":"Properties","value":"{AppConfig>/settings/properties/table/fixedLayout}","script":"","translation":[]},{"attribute":"delete","grouping":"Events","value":"Anonymous Function","script":"let deleteItem = oEvent.getParameter('listItem');\nlet context = deleteItem.getBindingContext();\nlet data = context.getObject();\nreport.delete(data);\n","translation":[]},{"attribute":"busyIndicatorDelay","grouping":"Properties","value":"250","script":"","translation":[]},{"attribute":"alternateRowColors","grouping":"Properties","value":"{AppConfig>/settings/properties/table/alternateRowColors}","script":"","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]},{"attribute":"setSizeLimit","grouping":"Model","value":"10000","script":"","translation":[]},{"attribute":"contextualWidth","grouping":"Properties","value":"Auto","script":"","translation":[]}],"fieldPos":25},{"fieldNo":"f515e0d1-caed-4415-a0b7-5789427a1c46","fieldName":"oPageFooter","fieldParent":"1009d86b-3585-42a1-dcf3-021ef4ec1f0f","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"setFooter","script":"","translation":[]}],"fieldPos":27},{"fieldNo":"64b9abdc-554b-4543-e9f0-ce8cc59833fe","fieldName":"Left","fieldParent":"f515e0d1-caed-4415-a0b7-5789427a1c46","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentLeft","script":"","translation":[]}],"fieldPos":28},{"fieldNo":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldName":"toolPagination","fieldParent":"64b9abdc-554b-4543-e9f0-ce8cc59833fe","fieldType":"sap.m.Toolbar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"toolPagination","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"HeaderToolbar","script":"","translation":[]}],"fieldPos":29},{"fieldNo":"886420a5-5c18-49f3-8a3a-e4044b682394","fieldName":"toolPaginationTextShowItems","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/table/paginationShowSelection}","script":"","translation":[]},{"attribute":"textAlign","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Items per page","script":"","translation":[]}],"fieldPos":30},{"fieldNo":"c280fabb-49cd-4514-929a-b739967029d5","fieldName":"toolPaginationShowItems","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Select","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100px","script":"","translation":[]},{"attribute":"visible","grouping":"Properties","value":"{AppConfig>/settings/properties/table/paginationShowSelection}","script":"","translation":[]},{"attribute":"selectedKey","grouping":"Properties","value":"{AppConfig>/settings/properties/table/paginationRows}","script":"","translation":[]},{"attribute":"change","grouping":"Events","value":"Anonymous Function","script":"if (modelAppConfig.oData.settings.properties.table.paginationRows) {\n    report.pagination.take = parseInt(modelAppConfig.oData.settings.properties.table.paginationRows);\n}\n\nreport.pagination.index = 0;\nreport.run(true);\nreport.handlePagination();","language":"javascript","translation":[]}],"fieldPos":31},{"fieldNo":"7c6361d2-1c36-4d1d-df20-59a880be1b5b","fieldName":"toolPaginationItemDefault","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":32},{"fieldNo":"e1f737df-fc79-4016-deaa-194b535a863b","fieldName":"toolPaginationItem10","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"10","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"10","script":"","translation":[]}],"fieldPos":33},{"fieldNo":"0b732dda-a328-4238-cf62-49d1e4f1c171","fieldName":"toolPaginationItem25","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"25","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"25","script":"","translation":[]}],"fieldPos":34},{"fieldNo":"74521348-c109-4440-f595-9d0b70fdb0ce","fieldName":"toolPaginationItem50","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"50","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"50","script":"","translation":[]}],"fieldPos":35},{"fieldNo":"4ede02e7-df34-4d83-9a81-65ee1986529d","fieldName":"toolPaginationItem100","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"100","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"100","script":"","translation":[]}],"fieldPos":36},{"fieldNo":"c3a82c6d-57c6-4137-f203-14a8c49ce408","fieldName":"toolPaginationItem250","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"250","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"250","script":"","translation":[]}],"fieldPos":37},{"fieldNo":"b249df0c-f3b3-4c41-b11c-10dbd1db24c8","fieldName":"toolPaginationItem500","fieldParent":"c280fabb-49cd-4514-929a-b739967029d5","fieldType":"sap.ui.core.ListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"500","script":"","translation":[]},{"attribute":"key","grouping":"Properties","value":"500","script":"","translation":[]}],"fieldPos":38},{"fieldNo":"636aa2e2-7644-4ece-c3ae-462d6a857fd2","fieldName":"oToolbarSpacer","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.ToolbarSpacer","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":39},{"fieldNo":"d1a1f160-8450-4d94-a20f-84609a2ef4fd","fieldName":"toolPaginationFirst","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/angle-double-left","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.pagination.index = 0;\nreport.run(true);\nreport.handlePagination();","translation":[]}],"fieldPos":40},{"fieldNo":"85498663-ba5b-482f-e156-cb65478e6930","fieldName":"toolPaginationPrev","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/angle-left","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.pagination.index--;\nreport.run(true);\nreport.handlePagination();","translation":[]}],"fieldPos":41},{"fieldNo":"3da3fab2-ef21-4a08-fd21-f34c05bdc2dc","fieldName":"toolPaginationPages","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.SegmentedButton","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassVisibility","grouping":"Properties","value":"sapUiHideOnPhone","script":"","translation":[]},{"attribute":"selectionChange","grouping":"Events","value":"Anonymous Function","script":"report.pagination.index = parseInt(this.getSelectedKey());\nreport.run(true);","translation":[]}],"fieldPos":42},{"fieldNo":"29f14997-2e55-4cec-c613-f40e109d6a09","fieldName":"toolPaginationText","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"textAlign","grouping":"Properties","value":"Center","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"0/0","script":"","translation":[]}],"fieldPos":43},{"fieldNo":"65b24073-49fc-482b-e80f-11ee7ed1427c","fieldName":"toolPaginationNext","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/angle-right","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.pagination.index++;\nreport.run(true);\nreport.handlePagination();","translation":[]}],"fieldPos":44},{"fieldNo":"94086ae7-46b1-4236-f90a-2c10f4079aa8","fieldName":"toolPaginationLast","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-solid/angle-double-right","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"let maxIndex = (report.pagination.count / report.pagination.take);\nmaxIndex = Math.ceil(maxIndex);\n\nreport.pagination.index = maxIndex - 1;\nreport.run(true);\nreport.handlePagination();","translation":[]}],"fieldPos":45},{"fieldNo":"303528d8-15f8-466f-d5e9-a7316cdd0ff5","fieldName":"toolPaginationSep","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.ToolbarSeparator","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":46},{"fieldNo":"99f246de-9f28-46b0-ebfa-45dccde25969","fieldName":"toolPaginationTitle","fieldParent":"724d057a-24bc-461b-873e-5bfdb4228e20","fieldType":"sap.m.ObjectNumber","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBeginEnd","script":"","translation":[]}],"fieldPos":47},{"fieldNo":"fb9dd892-4c3f-4add-ab56-1c6cbf4653c4","fieldName":"oHTMLUpload","fieldParent":"8db38342-83bc-4e8d-fbc9-ae83b9d85a66","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":48},{"fieldNo":"60f91af3-7c13-488f-db66-2a3e79305a0e","fieldName":"oHTMLCode","fieldParent":"fb9dd892-4c3f-4add-ab56-1c6cbf4653c4","fieldType":"neptune.Html","script":"<input\n    id=\"adaptiveListImport\"\n    name=\"adaptiveListImport\"\n    type=\"file\"\n    accept=\".csv\"\n    onchange=\"adaptiveListImport(event)\"\n    style=\"display: none;\"\n    value=\"\"\n/>","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":49},{"fieldNo":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldName":"Dialogs","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":50},{"fieldNo":"68d6ac51-325d-40e7-a50f-6d53358b7552","fieldName":"diaJSON","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"1280px","script":"","translation":[]},{"attribute":"contentHeight","grouping":"Properties","value":"880px","script":"","translation":[]},{"attribute":"afterOpen","grouping":"Events","value":"Anonymous Function","script":"if (textAreaJSON.getVisible()) {\n    //@ts-ignore\n    if (!editorData.content) editorData.content = \"\";\n\n    //@ts-ignore\n    const editorContent = typeof editorData.content === \"object\" ? JSON.stringify(editorData.content, null, 4) : editorData.content;\n    textAreaJSON.setValue(editorContent);\n}\n","translation":[]},{"attribute":"afterClose","grouping":"Events","value":"Anonymous Function","script":"//@ts-ignore\nif (typeof editorJSON !== 'undefined') {\n    //@ts-ignore\n    editorJSON.dispose();\n}\ntextAreaJSON.setValue('');","language":"typescript","translation":[]}],"fieldPos":51},{"fieldNo":"0917004c-d6db-4c07-df7d-d1f47eb16370","fieldName":"subHeader","fieldParent":"68d6ac51-325d-40e7-a50f-6d53358b7552","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":52},{"fieldNo":"5150e2e8-02e9-42b2-eaeb-3fb507f21a62","fieldName":"Right","fieldParent":"0917004c-d6db-4c07-df7d-d1f47eb16370","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":53},{"fieldNo":"ffbb33cf-a359-4b96-e1bd-f902ef4f8ef7","fieldName":"diaJSONClose","fieldParent":"5150e2e8-02e9-42b2-eaeb-3fb507f21a62","fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaJSON.close();","script":"diaJSON.close();","translation":[]}],"fieldPos":54},{"fieldNo":"80e7e504-3f71-44c2-ea9f-9691ed3c13d2","fieldName":"diaJSONScroller","fieldParent":"68d6ac51-325d-40e7-a50f-6d53358b7552","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"wholeHeight","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":55},{"fieldNo":"ee5250d7-ceef-497f-ac82-7bdcfd3e48c2","fieldName":"textAreaJSON","fieldParent":"80e7e504-3f71-44c2-ea9f-9691ed3c13d2","fieldType":"sap.m.TextArea","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":56},{"fieldNo":"f5734002-2940-4447-deb5-77ba37c958fd","fieldName":"htmlContentJSON","fieldParent":"80e7e504-3f71-44c2-ea9f-9691ed3c13d2","fieldType":"sap.ui.core.HTML","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"content","grouping":"Properties","value":"<div id='editorAdaptiveEdit' style='height:calc(100% - 25px);width:100%;'></div>","script":"","translation":[]},{"attribute":"afterRendering","grouping":"Events","value":"Anonymous Function","script":"if (!editorData.content) editorData.content = \"\";\n\nconst editorContent = typeof editorData.content === \"object\" ? JSON.stringify(editorData.content, null, 4) : editorData.content;\n\nif ([\"sap_horizon_dark\", \"neptune_horizon_dark\"].includes(sap.ui.getCore().getConfiguration().getTheme())) {\n    monaco.editor.setTheme(\"neptune-dark\");\n} else {\n    monaco.editor.setTheme();\n}\n\neditorJSON = monaco.editor.create(document.getElementById(\"editorAdaptiveEdit\"), {\n    value: editorContent,\n    readOnly: true,\n    language: \"json\",\n});\n\neditorJSON.revealLineInCenter(1);\n","translation":[]}],"fieldPos":57},{"fieldNo":"96c14769-0ab6-4677-ebb4-068220e74123","fieldName":"diaVariant","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"1024px","script":"","translation":[]},{"attribute":"beforeOpen","grouping":"Events","value":"navVariant.to(pageVariantList);","script":"navVariant.to(pageVariantList);","translation":[]}],"fieldPos":58},{"fieldNo":"245f9947-b61d-44c0-b80c-42d30bb9a0d1","fieldName":"subHeader1","fieldParent":"96c14769-0ab6-4677-ebb4-068220e74123","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":59},{"fieldNo":"f246785f-9903-464b-ce88-3b02038e29ad","fieldName":"Right1","fieldParent":"245f9947-b61d-44c0-b80c-42d30bb9a0d1","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":60},{"fieldNo":"8bf14aa3-fffb-4c60-b63a-c843fdf3dbe3","fieldName":"diaVariantClos","fieldParent":"f246785f-9903-464b-ce88-3b02038e29ad","fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaVariant.close();","script":"diaVariant.close();","translation":[]}],"fieldPos":61},{"fieldNo":"1ff7d655-0b3e-4128-e95d-371cc3194701","fieldName":"oPageVariantHeader","fieldParent":"96c14769-0ab6-4677-ebb4-068220e74123","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}],"fieldPos":62},{"fieldNo":"dce91006-96c5-4861-cbe7-f76f74d891a4","fieldName":"oPageVariantBox","fieldParent":"1ff7d655-0b3e-4128-e95d-371cc3194701","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBeginEnd","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100px","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":63},{"fieldNo":"27c8a6bc-f4c6-4787-90c9-dcb671c9ee54","fieldName":"oPageVariantIcon","fieldParent":"dce91006-96c5-4861-cbe7-f76f74d891a4","fieldType":"sap.ui.core.Icon","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"noTabStop","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"styleClass","grouping":"Properties","value":"nepCockpitIcon","script":"","translation":[]},{"attribute":"src","grouping":"Properties","value":"sap-icon://nep/variant","script":"","translation":[]}],"fieldPos":64},{"fieldNo":"c4e3c71e-43df-499b-d619-150ac7735c97","fieldName":"oPageVariantVBox","fieldParent":"dce91006-96c5-4861-cbe7-f76f74d891a4","fieldType":"sap.m.VBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":65},{"fieldNo":"14f15705-d80b-4936-cfd5-00420e0d520f","fieldName":"oPageVariantHBoxTitle","fieldParent":"c4e3c71e-43df-499b-d619-150ac7735c97","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":66},{"fieldNo":"32a4502c-608b-49da-9013-7af708a2544e","fieldName":"oPageVariantTitle","fieldParent":"14f15705-d80b-4936-cfd5-00420e0d520f","fieldType":"sap.m.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"titleStyle","grouping":"Properties","value":"H3","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Variant","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginEnd","script":"","translation":[]},{"attribute":"wrapping","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":67},{"fieldNo":"c2f9d09b-f637-4f59-ea8c-792943463ab8","fieldName":"oPageVariantSubTitle","fieldParent":"c4e3c71e-43df-499b-d619-150ac7735c97","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"wrapping","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Save your filter settings to reuse the same settings and easily switch between filters","script":"","translation":[]}],"fieldPos":68},{"fieldNo":"8efa3213-f8a7-4c81-d0d9-3613ae54fa88","fieldName":"navVariant","fieldParent":"96c14769-0ab6-4677-ebb4-068220e74123","fieldType":"sap.m.NavContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"600px","script":"","translation":[]},{"attribute":"defaultTransitionName","grouping":"Properties","value":"show","script":"","translation":[]}],"fieldPos":69},{"fieldNo":"5ca90bcf-5f7f-4d5f-f410-d8f591e41f5e","fieldName":"pageVariantList","fieldParent":"8efa3213-f8a7-4c81-d0d9-3613ae54fa88","fieldType":"sap.m.Page","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableScrolling","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":70},{"fieldNo":"afbd043a-ab1a-476e-cb9e-84282e4389f8","fieldName":"panelActiveFilters","fieldParent":"5ca90bcf-5f7f-4d5f-f410-d8f591e41f5e","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginBottom","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":71},{"fieldNo":"ff6aee40-3070-4070-b89b-3b9b9d82e11f","fieldName":"tabActiveFilters","fieldParent":"afbd043a-ab1a-476e-cb9e-84282e4389f8","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showNoData","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"rememberSelections","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"fixedLayout","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]},{"attribute":"headerText","grouping":"Properties","value":"Active Filters","script":"","translation":[]},{"attribute":"noDataText","grouping":"Properties","value":"No Active Filters","script":"","translation":[]}],"fieldPos":72},{"fieldNo":"af3eb0b1-f51e-48bc-8849-d7d15d00921f","fieldName":"coltabVariantNField","fieldParent":"ff6aee40-3070-4070-b89b-3b9b9d82e11f","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":73},{"fieldNo":"22b69bf9-d9a0-4cbd-8876-899e5efbcf39","fieldName":"colHtabFilterField","fieldParent":"af3eb0b1-f51e-48bc-8849-d7d15d00921f","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Field","script":"","translation":[]}],"fieldPos":74},{"fieldNo":"1adbf388-7d59-42fe-bad5-c59677f97383","fieldName":"coltabFilter","fieldParent":"ff6aee40-3070-4070-b89b-3b9b9d82e11f","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":75},{"fieldNo":"6c9a59c5-ee6f-4166-d8e0-6ea9942900ee","fieldName":"colHtabFilter","fieldParent":"1adbf388-7d59-42fe-bad5-c59677f97383","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Filter","script":"","translation":[]}],"fieldPos":76},{"fieldNo":"8e67b70e-fcc6-428b-ae0c-2437359481ba","fieldName":"colItemtabFilter","fieldParent":"ff6aee40-3070-4070-b89b-3b9b9d82e11f","fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":77},{"fieldNo":"9e36a460-b958-44f6-c6d5-80879d573514","fieldName":"txttabVariantFieldActive","fieldParent":"8e67b70e-fcc6-428b-ae0c-2437359481ba","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{field}","script":"","translation":[]}],"fieldPos":78},{"fieldNo":"af345148-cb52-4f1e-f748-c203250468c0","fieldName":"txttabVariantFilterActive","fieldParent":"8e67b70e-fcc6-428b-ae0c-2437359481ba","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{filter}","script":"","translation":[]}],"fieldPos":79},{"fieldNo":"d7f6d264-82f2-4f33-e675-7cd149557189","fieldName":"panelVariants","fieldParent":"5ca90bcf-5f7f-4d5f-f410-d8f591e41f5e","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":80},{"fieldNo":"35fc7165-5bd1-4006-8d05-5a2cb14dda87","fieldName":"scrollVariantList","fieldParent":"d7f6d264-82f2-4f33-e675-7cd149557189","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]}],"fieldPos":81},{"fieldNo":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldName":"tabVariant","fieldParent":"35fc7165-5bd1-4006-8d05-5a2cb14dda87","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingType":"h","bindingSource":"DataModel","bindingParentID":"ac602687-7eb8-4428-d360-48adc75264b1","modelPath":"Variants>/","request":[],"response":[],"attributes":[{"attribute":"showNoData","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"rememberSelections","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"SingleSelectMaster","script":"","translation":[]},{"attribute":"fixedLayout","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"itemPress","grouping":"Events","value":"Anonymous Function","script":"const variant = tabVariant.getSelectedItem()?.getBindingContext(\"Variants\")?.getObject();\nif (!variant) {\n    return;\n}\n\nlet variantContent = JSON.parse(JSON.stringify(variant.content));\nfor (let key in variantContent) {\n    const field = ModelData.FindFirst(modelAppConfig.oData.settings.fieldsSel, \"name\", key);\n\n    if (field.type === \"DateRange\") {\n        variantContent[key] = new Date(variantContent[key]);\n        variantContent[key + \"_end\"] = new Date(variantContent[key + \"_end\"]);\n    }\n}\n\nif (typeof variantContent.length === \"number\") {\n    variantContent = {};\n}\n\nmodelAppData.setData(variantContent);\nmodelAppData.refresh();\n\nreport.variantApply(variant);\n\nreport.run();\ndiaVariant.close();\n","translation":[]},{"attribute":"alternateRowColors","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]},{"attribute":"headerText","grouping":"Properties","value":"Variants","script":"","translation":[]}],"fieldPos":82},{"fieldNo":"eebc0a1d-5766-4c39-a167-bdfcc81eb07c","fieldName":"coltabVariantName","fieldParent":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":83},{"fieldNo":"ac0e46ac-5674-4e53-86d1-aed8fa02b24a","fieldName":"colHtabVariantname","fieldParent":"eebc0a1d-5766-4c39-a167-bdfcc81eb07c","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Name","script":"","translation":[]}],"fieldPos":84},{"fieldNo":"950f3826-6a08-4f61-fd2e-0a2c4be5d1fa","fieldName":"coltabVariantDesc","fieldParent":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":85},{"fieldNo":"982ab57c-2e6f-46cb-e914-9445a8799988","fieldName":"colHtabVariantDesc","fieldParent":"950f3826-6a08-4f61-fd2e-0a2c4be5d1fa","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Description","script":"","translation":[]}],"fieldPos":86},{"fieldNo":"66d48963-1315-4ca3-c75c-97d68c187616","fieldName":"coltabVariantpublic","fieldParent":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"80px","script":"","translation":[]}],"fieldPos":87},{"fieldNo":"5b7f18e8-1cae-4aa4-ea18-3da2ff5e6420","fieldName":"colHtabVariantpublic","fieldParent":"66d48963-1315-4ca3-c75c-97d68c187616","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Public","script":"","translation":[]}],"fieldPos":88},{"fieldNo":"dcad4a59-6702-409e-ffac-1180b62f1f34","fieldName":"coltabVariantActions","fieldParent":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"width","grouping":"Properties","value":"80px","script":"","translation":[]}],"fieldPos":89},{"fieldNo":"71640451-368e-4d6f-9399-b102c44b0f52","fieldName":"colItemtabVariant","fieldParent":"f245d7d7-b8db-4978-a5d2-c3121311ba6c","fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"selected","grouping":"Properties","value":"{Variants>selected}","script":"","translation":[]},{"attribute":"highlight","grouping":"Properties","value":"{=  ${Variants>selected}  && ${Variants>modified}? 'Warning' : ${Variants>selected} ? 'Success' : 'None'}","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Apply Variant","script":"","translation":[]}],"fieldPos":90},{"fieldNo":"bc74749e-cc0b-4c9a-9101-497991ec1349","fieldName":"txttabVariantname","fieldParent":"71640451-368e-4d6f-9399-b102c44b0f52","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{Variants>name}","script":"","translation":[]}],"fieldPos":91},{"fieldNo":"621f3416-7233-46f5-c69a-012d3f52102d","fieldName":"txttabVariantDesc","fieldParent":"71640451-368e-4d6f-9399-b102c44b0f52","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{Variants>description}","script":"","translation":[]}],"fieldPos":92},{"fieldNo":"799648e6-0751-491d-c3b3-8fd7cabbf810","fieldName":"txttabVariantpublic","fieldParent":"71640451-368e-4d6f-9399-b102c44b0f52","fieldType":"sap.m.Switch","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"state","grouping":"Properties","value":"{Variants>ispublic}","script":"","translation":[]},{"attribute":"enabled","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":93},{"fieldNo":"f6897d63-ff03-49e3-e871-752d64c36497","fieldName":"boxVariantActions","fieldParent":"71640451-368e-4d6f-9399-b102c44b0f52","fieldType":"sap.m.HBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":94},{"fieldNo":"ae5fe948-fc2d-4b84-9d0f-0e2fa3feb001","fieldName":"butVariantEdit","fieldParent":"f6897d63-ff03-49e3-e871-752d64c36497","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Transparent","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Edit Variant","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://edit","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const selectedItem = oEvent.oSource.getBindingContext(\"Variants\")?.getObject();\n\nif (!selectedItem) {\n    return;\n}\nmodelpageVariantSave.setData(selectedItem);\n\nconst variantFilters = Object.entries(selectedItem.content).map(([key, value]) => ({\n    field: key,\n    filter: value,\n}));\nmodeltabVariantFilters.setData(variantFilters);\n\n[butVariantBack, butVariantApply, butVariantUpdateApply, butVariantDelete].forEach((btn) => btn.setVisible(true));\n[butVariantClear, butVariantNew, butVariantCancel, butVariantSave].forEach((btn) => btn.setVisible(false));\n\nnavVariant.to(pageVariantSave);\n","translation":[]}],"fieldPos":95},{"fieldNo":"1788e10f-4f5a-494c-da72-4ea5d985d144","fieldName":"pageVariantSave","fieldParent":"8efa3213-f8a7-4c81-d0d9-3613ae54fa88","fieldType":"sap.m.Page","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"title","grouping":"Properties","value":"Manage","script":"","translation":[]},{"attribute":"showNavButton","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":96},{"fieldNo":"75ff4999-efe3-4f71-a0d8-24d98b68e138","fieldName":"panVariant","fieldParent":"1788e10f-4f5a-494c-da72-4ea5d985d144","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepFormInput","script":"","translation":[]},{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Transparent","script":"","translation":[]}],"fieldPos":97},{"fieldNo":"a6890795-42cd-4288-87da-6fa28a975a91","fieldName":"scrollVariantFilters","fieldParent":"75ff4999-efe3-4f71-a0d8-24d98b68e138","fieldType":"sap.m.ScrollContainer","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"height","grouping":"Properties","value":"100%","script":"","translation":[]},{"attribute":"horizontal","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"vertical","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":98},{"fieldNo":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldName":"formVariant","fieldParent":"a6890795-42cd-4288-87da-6fa28a975a91","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"columnsL","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}],"fieldPos":99},{"fieldNo":"61c126bb-808a-44d1-aae6-84801e019d58","fieldName":"titleVariant","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.ui.core.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Settings","script":"","translation":[]},{"attribute":"level","grouping":"Properties","value":"H3","script":"","translation":[]}],"fieldPos":100},{"fieldNo":"eba77c4d-92b4-4cdd-c339-ffacd5b15419","fieldName":"lblformVariantname","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Name","script":"","translation":[]}],"fieldPos":101},{"fieldNo":"53099276-b90c-4693-bcbe-402a5adcc13d","fieldName":"informVariantname","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/name}","script":"","translation":[]}],"fieldPos":102},{"fieldNo":"8bf50bfc-f703-4262-9234-4aa1a8967544","fieldName":"lblformVariantDesc","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Description","script":"","translation":[]}],"fieldPos":103},{"fieldNo":"8af604d0-d37d-42d6-98ff-593da9588179","fieldName":"informVariantDesc","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/description}","script":"","translation":[]}],"fieldPos":104},{"fieldNo":"0c812927-d014-4e6a-f887-db9f0e6e8bdd","fieldName":"lblformVariantpublic","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":105},{"fieldNo":"89264ffe-1414-445c-8d78-ec06e68b9433","fieldName":"informVariantpublic","fieldParent":"f8170d80-776a-4543-e2a6-249b30b0ac7c","fieldType":"sap.m.CheckBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Public","script":"","translation":[]},{"attribute":"selected","grouping":"Properties","value":"{/ispublic}","script":"","translation":[]}],"fieldPos":106},{"fieldNo":"e4c5af10-27c6-4fea-ff8c-b379923dc05b","fieldName":"tabVariantFilters","fieldParent":"a6890795-42cd-4288-87da-6fa28a975a91","fieldType":"sap.m.Table","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showNoData","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"rememberSelections","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"mode","grouping":"Properties","value":"None","script":"","translation":[]},{"attribute":"fixedLayout","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"sticky","grouping":"Properties","value":"[\"ColumnHeaders\"]","script":"","translation":[]},{"attribute":"noDataText","grouping":"Properties","value":"No Active Filters","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiSmallMarginTopBottom","script":"","translation":[]}],"fieldPos":107},{"fieldNo":"00374943-122c-4b36-98cc-072d25aca698","fieldName":"coltabVariantField","fieldParent":"e4c5af10-27c6-4fea-ff8c-b379923dc05b","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":108},{"fieldNo":"2cc14120-65fc-4abb-866d-1d3bc7ef722f","fieldName":"colHtabFilterFieldVariant","fieldParent":"00374943-122c-4b36-98cc-072d25aca698","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Field","script":"","translation":[]}],"fieldPos":109},{"fieldNo":"e29297aa-5418-403a-fb0a-d692ce8634e2","fieldName":"coltabFilterVariant","fieldParent":"e4c5af10-27c6-4fea-ff8c-b379923dc05b","fieldType":"sap.m.Column","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":110},{"fieldNo":"543ef1a9-885e-45fe-b30a-9f38c3899cd1","fieldName":"colHtabFilterVariant","fieldParent":"e29297aa-5418-403a-fb0a-d692ce8634e2","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Filter","script":"","translation":[]}],"fieldPos":111},{"fieldNo":"9e846201-0158-4678-ce83-4a309f477943","fieldName":"colItemtabFilterVariant","fieldParent":"e4c5af10-27c6-4fea-ff8c-b379923dc05b","fieldType":"sap.m.ColumnListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":112},{"fieldNo":"0480b7eb-d8da-455a-fea3-4ecba4987138","fieldName":"txttabVariantField","fieldParent":"9e846201-0158-4678-ce83-4a309f477943","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{field}","script":"","translation":[]}],"fieldPos":113},{"fieldNo":"982a68fa-6af9-42f4-bc5d-9a3b9ac5a2a8","fieldName":"txttabVariantFilter","fieldParent":"9e846201-0158-4678-ce83-4a309f477943","fieldType":"sap.m.Text","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{filter}","script":"","translation":[]}],"fieldPos":114},{"fieldNo":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldName":"formVariantDates","fieldParent":"a6890795-42cd-4288-87da-6fa28a975a91","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"layout","grouping":"Properties","value":"ResponsiveGridLayout","script":"","translation":[]},{"attribute":"labelSpanM","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"labelSpanL","grouping":"Properties","value":"12","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"columnsL","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"backgroundDesign","grouping":"Properties","value":"Solid","script":"","translation":[]}],"fieldPos":115},{"fieldNo":"49abb455-76c4-49ac-b2ab-be8479469f80","fieldName":"titleVariantDates","fieldParent":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldType":"sap.ui.core.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Dates","script":"","translation":[]},{"attribute":"level","grouping":"Properties","value":"H3","script":"","translation":[]}],"fieldPos":116},{"fieldNo":"a9a9f4f4-b86e-4d00-ef80-4c3dc82819e7","fieldName":"lblformVariantupdatedAt","fieldParent":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Updated At","script":"","translation":[]}],"fieldPos":117},{"fieldNo":"cd825df0-b231-41b6-e504-de48a4e6eac2","fieldName":"informVariantupdatedAt","fieldParent":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/updatedAt}","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"value","grouping":"Formatter","value":"date:BrowserSetting","script":"","translation":[]}],"fieldPos":118},{"fieldNo":"51c85dbd-1e13-460d-dd24-65c136983090","fieldName":"lblformVariantchangedBy","fieldParent":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldType":"sap.m.Label","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Updated By","script":"","translation":[]}],"fieldPos":119},{"fieldNo":"dbf32aa2-4b49-4f78-bf37-75589fc7e9e6","fieldName":"informVariantchangedBy","fieldParent":"8afe2552-def9-487d-eb2f-a9e939bccc55","fieldType":"sap.m.Input","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"value","grouping":"Properties","value":"{/changedBy}","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"false","script":"","translation":[]}],"fieldPos":120},{"fieldNo":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldName":"diaVariantButtons","fieldParent":"96c14769-0ab6-4677-ebb4-068220e74123","fieldType":"neptune.DialogButtons","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":121},{"fieldNo":"6f19a24a-e165-4375-e067-b25157de5648","fieldName":"butVariantBack","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Ghost","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Back","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const selectedItem = modelVariants.getData().find((item) => item.selected);\n\nreport.getVariantList().then((data) => {\n    modelVariants.setData(data);\n    if (selectedItem) {\n        report.variantApply(selectedItem);\n    }\n});\n\n[butVariantBack, butVariantApply, butVariantSave, butVariantUpdateApply, butVariantDelete, butVariantCancel].forEach((btn) => btn.setVisible(false));\n[butVariantClear, butVariantNew].forEach((btn) => btn.setVisible(true));\n\nnavVariant.to(pageVariantList);\n","translation":[]}],"fieldPos":122},{"fieldNo":"858bbc45-5050-4bce-a2fe-125fb66785a7","fieldName":"butVariantSave","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Create","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const variantData = modelpageVariantSave.getData();\ntry {\n    const savedVariant = await report.variantSave({\n        name: variantData.name,\n        description: variantData.description,\n        ispublic: informVariantpublic.getSelected(),\n        content: modelAppData.getData(),\n    });\n\n    diaVariant.close();\n\n    const updatedVariants = await report.getVariantList();\n    modelVariants.setData(updatedVariants);\n    report.variantApply(savedVariant);\n} catch (error) {\n    console.error(\"Error saving or updating variants:\", error);\n}\n","translation":[]}],"fieldPos":123},{"fieldNo":"53b222fc-9914-4a26-8dbb-0eb0530cce23","fieldName":"butVariantApply","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Ghost","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Apply","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const variant = modelpageVariantSave.getData();\n\nlet variantContent = JSON.parse(JSON.stringify(variant.content));\nfor (let key in variantContent) {\n    const field = ModelData.FindFirst(modelAppConfig.oData.settings.fieldsSel, \"name\", key);\n\n    if (field.type === \"DateRange\") {\n        variantContent[key] = new Date(variantContent[key]);\n        variantContent[key + \"_end\"] = new Date(variantContent[key + \"_end\"]);\n    }\n}\n\nif (typeof variantContent.length === \"number\") {\n    variantContent = {};\n}\n\nmodelAppData.setData(variantContent);\nmodelAppData.refresh();\n\nreport.variantApply(variant);\n\nreport.run();\ndiaVariant.close();\n","translation":[]}],"fieldPos":124},{"fieldNo":"a3fd9c38-d4d9-48aa-bd5c-b6a4ceeb10b0","fieldName":"butVariantUpdateApply","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Update and Apply","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const variantData = modelpageVariantSave.getData();\n\ntry {\n    const savedVariant = await report.variantSave({\n        id: variantData.id,\n        name: variantData.name,\n        description: variantData.description,\n        ispublic: informVariantpublic.getSelected(),\n        content: modelAppData.getData(),\n    });\n\n    diaVariant.close();\n\n    const updatedVariants = await report.getVariantList();\n    modelVariants.setData(updatedVariants);\n    report.variantApply(savedVariant);\n} catch (error) {\n    console.error(\"Error saving or updating variants:\", error);\n}\n","translation":[]}],"fieldPos":125},{"fieldNo":"978f10a0-f921-4264-8227-a540f956e687","fieldName":"butVariantDelete","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Reject","script":"","translation":[]},{"attribute":"tooltip","grouping":"Properties","value":"Delete variant","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://far/trash-can","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const selectedItem = modelVariants.getData().find((item) => item.selected);\nconst variantData = modelpageVariantSave.getData();\n\nsap.m.MessageBox.show(\"Do you want to delete this variant? \", {\n    title: \"Delete\",\n    icon: sap.m.MessageBox.Icon.ERROR,\n    actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n    onClose: function (oAction) {\n        if (oAction === \"YES\") {\n            report.variantDelete(variantData.id).then(() => {\n                const updatedVariants = modelVariants.getData().filter((item) => item.id !== variantData.id);\n                modelVariants.setData(updatedVariants);\n\n                if (selectedItem?.id === variantData.id) {\n                    modelAppData.setData({});\n                    report.variantApply();\n                    report.run();\n                    diaVariant.close();\n                } else {\n                    report.variantApply(selectedItem);\n                    [butVariantBack, butVariantApply, butVariantSave, butVariantUpdateApply, butVariantDelete, butVariantCancel].forEach((btn) => btn.setVisible(false));\n                    [butVariantClear, butVariantNew].forEach((btn) => btn.setVisible(true));\n\n                    navVariant.to(pageVariantList);\n                }\n            });\n        }\n    },\n});\n","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":126},{"fieldNo":"81492021-d4c4-4251-d814-e70c372a4829","fieldName":"butVariantNew","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"type","grouping":"Properties","value":"Emphasized","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Create Variant with Active Filter","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"modelpageVariantSave.setData({\n    public: false,\n});\nmodelpageVariantSave.refresh();\n\n[butVariantNew, butVariantApply, butVariantSave, butVariantUpdateApply, butVariantDelete, butVariantClear].forEach((btn) => btn.setVisible(false));\n[butVariantBack, butVariantSave, butVariantCancel].forEach((btn) => btn.setVisible(true));\n\nconst activeFilters = modeltabActiveFilters.getData();\nmodeltabVariantFilters.setData(activeFilters);\n\nnavVariant.to(pageVariantSave);\n","translation":[]}],"fieldPos":127},{"fieldNo":"b3362b2d-c059-4075-daa1-ffe5fbdc9ba0","fieldName":"butVariantClear","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.getVariantList().then((data) => {\n    modelVariants.setData(data);\n    modelAppData.setData({});\n    diaVariant.close();\n    report.variantApply();\n    report.run();\n});\n","translation":[]},{"attribute":"text","grouping":"Properties","value":"Clear","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Ghost","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":128},{"fieldNo":"6ba2c20e-b072-402a-e128-9380f3cb6f35","fieldName":"butVariantCancel","fieldParent":"f99298c9-0dd8-47a1-9c1f-88c5780bdfa3","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"press","grouping":"Events","value":"diaVariant.close();","script":"diaVariant.close();","translation":[]},{"attribute":"text","grouping":"Properties","value":"Cancel","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Ghost","script":"","translation":[]},{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMarginBegin","script":"","translation":[]}],"fieldPos":129},{"fieldNo":"7b1cc921-5d84-4410-a449-d0573589fc9a","fieldName":"popHeader","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Popover","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"showArrow","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"placement","grouping":"Properties","value":"Bottom","script":"","translation":[]},{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"contentWidth","grouping":"Properties","value":"250px","script":"","translation":[]}],"fieldPos":130},{"fieldNo":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldName":"listHeaderOptions","fieldParent":"7b1cc921-5d84-4410-a449-d0573589fc9a","fieldType":"sap.m.List","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":131},{"fieldNo":"574a3f7b-cacc-40ce-bb00-672784f301eb","fieldName":"listHeaderOptionsSorting","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.GroupHeaderListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableSort} ? true:false}","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Sorting","script":"","translation":[]}],"fieldPos":132},{"fieldNo":"d824efd8-7ae3-4bb1-c39b-7efeffe23e21","fieldName":"listHeaderOptionsSortASC","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableSort} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Sort Ascending","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sort-ascending","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.sortBy = modelpopHeader.oData.name;\nreport.sortOrder = \"ASC\";\n\nif (modelAppConfig.oData.settings.properties.table.enablePagination) {\n    report.run();\n} else {\n    report.handleSortingClient();\n}\n\nreport.handleTableSortIndicator();\n\npopHeader.close();\n\n\n","translation":[]}],"fieldPos":133},{"fieldNo":"00520173-143b-4409-e3d7-bf721965b0be","fieldName":"listHeaderOptionsSortDESC","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableSort} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Sort Descending","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sort-descending","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.sortBy = modelpopHeader.oData.name\nreport.sortOrder = 'DESC';\n\nif (modelAppConfig.oData.settings.properties.table.enablePagination) {\n    report.run();\n} else {\n    report.handleSortingClient();\n}\n\nreport.handleTableSortIndicator();\n\npopHeader.close();\n","translation":[]}],"fieldPos":134},{"fieldNo":"efe98293-f429-4a2c-ef4d-bb4cb7b1f180","fieldName":"listHeaderOptionsGrouping","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.GroupHeaderListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableGroup} ? true:false}","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Grouping","script":"","translation":[]}],"fieldPos":135},{"fieldNo":"ad27b909-64dd-4f0d-c785-f5fa01e54dad","fieldName":"listHeaderOptionsGroupASC","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableGroup} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Group Ascending","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sort-ascending","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.groupBy = modelpopHeader.oData.name;\nreport.groupOrder = 'ASC';\n\nif (modelAppConfig.oData.settings.properties.table.enablePagination) {\n    report.run();\n} else {\n    report.handleSortingClient();\n}\n\npopHeader.close();","translation":[]}],"fieldPos":136},{"fieldNo":"5276cc8a-cc3c-41d4-bc0a-e2776411e0d4","fieldName":"listHeaderOptionsGroupDESC","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableGroup} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Group Descending","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://sort-descending","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.groupBy = modelpopHeader.oData.name;\nreport.groupOrder = 'DESC';\n\nif (modelAppConfig.oData.settings.properties.table.enablePagination) {\n    report.run();\n} else {\n    report.handleSortingClient();\n}\n\npopHeader.close();","translation":[]}],"fieldPos":137},{"fieldNo":"65a0e09b-3325-4b2c-ecbc-3edb78309488","fieldName":"listHeaderOptionsGroupClear","fieldParent":"08b08442-152c-4077-f9ec-a6283a9a708b","fieldType":"sap.m.StandardListItem","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{=${/enableGroup} ? true:false}","script":"","translation":[]},{"attribute":"type","grouping":"Properties","value":"Active","script":"","translation":[]},{"attribute":"title","grouping":"Properties","value":"Ungroup","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://fa-regular/object-ungroup","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"report.groupBy = null;\n\nif (modelAppConfig.oData.settings.properties.table.enablePagination) {\n    report.run();\n} else {\n    report.handleSortingClient();\n}\n\npopHeader.close();","translation":[]}],"fieldPos":138},{"fieldNo":"8628f985-ce92-442a-e6ee-a451c94f258d","fieldName":"btnExportData","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Export","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"const { valuesIndex, csvDelimiterIndex } = modelformExportImport.getData();\nconst exportFormatted = radioGroupValues.getButtons()[valuesIndex]?.getText() === \"Formatted values\";\nconst csvDelimiter = radioGroupDelimiter.getButtons()[csvDelimiterIndex]?.getText() === \"Comma\" ? \",\" : \";\";\n\nreport.export(csvDelimiter, exportFormatted);\ndiaExportImportData.close();\n","language":"typescript","translation":[]}],"fieldPos":139},{"fieldNo":"e657fe08-4fae-4e8a-eae9-9a9d0544170c","fieldName":"btnImportData","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Button","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Import","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"Anonymous Function","script":"$(\"#adaptiveListImport\").click();\n\ndiaExportImportData.close();\n","language":"typescript","translation":[]}],"fieldPos":140},{"fieldNo":"6b092ca0-7029-4643-9d95-69270675f85f","fieldName":"diaExportImportData","fieldParent":"40e42cca-5e2c-4f66-d405-ebc7fabab603","fieldType":"sap.m.Dialog","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"verticalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]},{"attribute":"showHeader","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"horizontalScrolling","grouping":"Properties","value":"false","script":"","translation":[]},{"attribute":"draggable","grouping":"Properties","value":"true","script":"","translation":[]}],"fieldPos":141},{"fieldNo":"bb113076-d915-4f9c-f1c1-17a0295f85ab","fieldName":"subHeaderExport","fieldParent":"6b092ca0-7029-4643-9d95-69270675f85f","fieldType":"sap.m.Bar","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"sapContrast sapContrastPlus","script":"","translation":[]},{"attribute":"design","grouping":"Properties","value":"Footer","script":"","translation":[]},{"attribute":"position","grouping":"Parent","value":"setCustomHeader","script":"","translation":[]}],"fieldPos":142},{"fieldNo":"3e6598a4-2a4f-4f56-c167-10dda3cc0d25","fieldName":"Right","fieldParent":"bb113076-d915-4f9c-f1c1-17a0295f85ab","fieldType":"neptune.BarContent","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"position","grouping":"Parent","value":"ContentRight","script":"","translation":[]}],"fieldPos":143},{"fieldNo":"56955e4c-a6a3-4f23-a576-4a2b25fa6e74","fieldName":"diaExportClose","fieldParent":"3e6598a4-2a4f-4f56-c167-10dda3cc0d25","fieldType":"sap.m.Button","script":"","customComponent":false,"onlyDeclare":true,"request":[],"response":[],"attributes":[{"attribute":"styleClass","grouping":"Properties","value":"nepCloseBtn","script":"","translation":[]},{"attribute":"icon","grouping":"Properties","value":"sap-icon://decline","script":"","translation":[]},{"attribute":"press","grouping":"Events","value":"diaExportImportData.close();","script":"diaExportImportData.close();","translation":[]}],"fieldPos":144},{"fieldNo":"9b74f381-5183-40c8-e5ba-496b2ea54676","fieldName":"panelExportData","fieldParent":"6b092ca0-7029-4643-9d95-69270675f85f","fieldType":"sap.m.Panel","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"styleClassPadding","grouping":"Properties","value":"sapUiNoContentPadding","script":"","translation":[]}],"fieldPos":145},{"fieldNo":"a9c59b50-953e-41f3-9b62-6d22e60858ff","fieldName":"flexExportForm","fieldParent":"9b74f381-5183-40c8-e5ba-496b2ea54676","fieldType":"sap.m.FlexBox","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"enableCompactMode","grouping":"Properties","value":"true","script":"","translation":[]},{"attribute":"direction","grouping":"Properties","value":"Column","script":"","translation":[]},{"attribute":"alignItems","grouping":"Properties","value":"Center","script":"","translation":[]}],"fieldPos":146},{"fieldNo":"e9557901-fb00-4fac-b682-8d08e75a654c","fieldName":"formExportImport","fieldParent":"a9c59b50-953e-41f3-9b62-6d22e60858ff","fieldType":"sap.ui.layout.form.SimpleForm","script":"","customComponent":false,"bindingValue":"Generic Object","bindingType":"u","bindingSource":"P9","request":[],"response":[],"attributes":[{"attribute":"styleClassMargin","grouping":"Properties","value":"sapUiTinyMargin","script":"","translation":[]},{"attribute":"maxContainerCols","grouping":"Properties","value":"1","script":"","translation":[]},{"attribute":"width","grouping":"Properties","value":"90%","script":"","translation":[]}],"fieldPos":147},{"fieldNo":"bd66c6e6-2387-4ac8-d1fe-fa9e08fe89b1","fieldName":"titleValues","fieldParent":"e9557901-fb00-4fac-b682-8d08e75a654c","fieldType":"sap.ui.core.Title","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"{/title}","script":"","translation":[]}],"fieldPos":148},{"fieldNo":"61a93a76-adfe-47cf-b593-6e20d3c22ce2","fieldName":"radioGroupValues","fieldParent":"e9557901-fb00-4fac-b682-8d08e75a654c","fieldType":"sap.m.RadioButtonGroup","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"selectedIndex","grouping":"Properties","value":"{/valuesIndex}","script":"","translation":[]}],"fieldPos":149},{"fieldNo":"cc0874e6-8e81-4408-dedf-e0bfa4b0c45b","fieldName":"radioRaw","fieldParent":"61a93a76-adfe-47cf-b593-6e20d3c22ce2","fieldType":"sap.m.RadioButton","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Raw values (recommended)","script":"","translation":[]}],"fieldPos":150},{"fieldNo":"a4d1b023-d371-4d5a-e162-ebc93060d420","fieldName":"radioFormatted","fieldParent":"61a93a76-adfe-47cf-b593-6e20d3c22ce2","fieldType":"sap.m.RadioButton","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Formatted values","script":"","translation":[]}],"fieldPos":151},{"fieldNo":"c2dcea1f-7b18-4268-eb7d-853e113e55f6","fieldName":"titleDelimiter","fieldParent":"e9557901-fb00-4fac-b682-8d08e75a654c","fieldType":"sap.ui.core.Title","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"CSV delimiter","script":"","translation":[]}],"fieldPos":152},{"fieldNo":"510acbdc-1ff3-49f8-b14b-4e8761475244","fieldName":"radioGroupDelimiter","fieldParent":"e9557901-fb00-4fac-b682-8d08e75a654c","fieldType":"sap.m.RadioButtonGroup","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"selectedIndex","grouping":"Properties","value":"{/csvDelimiterIndex}","script":"","translation":[]},{"attribute":"editable","grouping":"Properties","value":"{/export}","script":"","translation":[]}],"fieldPos":153},{"fieldNo":"54327b53-b984-46c1-a018-6bb2887c6a3b","fieldName":"radioSemicolon","fieldParent":"510acbdc-1ff3-49f8-b14b-4e8761475244","fieldType":"sap.m.RadioButton","script":"","customComponent":false,"request":[],"response":[],"attributes":[{"attribute":"text","grouping":"Properties","value":"Semicolon (recommended)","script":"","translation":[]}],"fieldPos":154},{"fieldNo":"26c1b53a-b376-4fb4-f912-b5129008015e","fieldName":"radioComma","fieldParent":"510acbdc-1ff3-49f8-b14b-4e8761475244","fieldType":"sap.m.RadioButton","script":"","customComponent":false,"bindingType":"h","request":[],"response":[],"attributes":[{"attribute":"visible","grouping":"Properties","value":"{/export}","script":"","translation":[]},{"attribute":"text","grouping":"Properties","value":"Comma","script":"","translation":[]}],"fieldPos":155},{"fieldNo":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldName":"Adaptive","fieldParent":99999,"fieldType":"neptune.folder","script":"","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":156},{"fieldNo":"ac602687-7eb8-4428-d360-48adc75264b1","fieldName":"Variants","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":157},{"fieldNo":"9538462d-31af-41f6-b485-465a0b64b6a4","fieldName":"AppConfig","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","dataModel":{},"request":[],"response":[],"attributes":[],"fieldPos":158},{"fieldNo":"9e2b250b-e03e-44f5-a57f-dbe049e6e316","fieldName":"AppData","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.model","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","dataModel":{},"request":[],"response":[],"attributes":[],"fieldPos":159},{"fieldNo":"ad0c8b54-1779-44d7-a630-67d81249d56a","fieldName":"ExportData","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.model.array","script":"","customComponent":false,"bindingValue":"Generic Array","bindingType":"h","bindingSource":"P9","request":[],"response":[],"attributes":[],"fieldPos":160},{"fieldNo":"61074b18-571e-46e0-e14e-efcaa8180dc6","fieldName":"jQuery","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.Script","script":"jQuery.sap.require('sap.ui.core.util.Export');\njQuery.sap.require('sap.ui.core.util.ExportTypeCSV');\n\nfunction jsonRequest({ type, url, data, success, error }) {\n    return $.ajax({\n        type: type || 'POST',\n        contentType: 'application/json',\n        url,\n        data,\n        success,\n        error,\n    });\n}","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":161},{"fieldNo":"81e6918d-ffa1-4951-a2e7-dc0863642505","fieldName":"helpers","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.Script","script":"function getFieldBindingText(field) {\n    const k = field.name;\n    return field.valueType ? `{${k}_value}` : `{${k}}`;\n}\n\nfunction onFieldChangeEvent(oEvent, events) {\n    const ctx = oEvent.oSource.getBindingContext();\n    events.onTableChange(ctx.getObject());\n}\n\nfunction getFieldWrapping(field) {\n    return field.wrapping || false;\n}\n\nfunction getFieldPlaceholder(field) {\n    return field.placeholder || '';\n}\n\nfunction isFieldEditable(field) {\n    return field.editable ? true : false;\n}\n\nfunction getDateFormatter(fieldName) {\n    if (typeof fieldName === 'undefined' || fieldName === null) return;\n    if (typeof fieldName === 'string' && fieldName.length === 13) return new Date(parseInt(fieldName));\n    return new Date(fieldName);\n}\n\nconst mKeyToText = {\n    MultiSelectLookup: 'MultiSelect Lookup',\n    MultiSelectScript: 'MultiSelect Script',\n    SingleSelectLookup: 'SingleSelect Lookup',\n    SingleSelectScript: 'SingleSelect Script',\n};\n\nfunction keyToText(k) {\n    return mKeyToText[k] !== undefined ? mKeyToText[k] : k;\n}\n\nfunction valuesToKeyText(values) {\n    return values.map(function (v) {\n        if (v.includes('|')) {\n            const [key, text] = v.split('|');\n            return { key, text };\n        }\n\n        return { key: v, text: keyToText(v) };\n    });\n}\n\nfunction distinctValuesToKeyText(values) {\n    return values.map(function ([key, text]) {\n        return { key, text };\n    });\n}\n\nfunction getAdaptiveEditorPreviewLanguage() {\n    // poSettings is the custom component popover settings introduced in 22-LTS\n    if (typeof poSettings !== 'undefined' && typeof poSettings.getPreviewLanguage !== 'undefined') {\n        return poSettings.getPreviewLanguage();\n    }\n    \n    if (typeof toolMenuTranslation !== 'undefined') {\n        // toolMenuTranslation was the drop inside AdaptiveDesigner which got replaced with poSettings above\n        return toolMenuTranslation.getSelectedKey();\n    }\n    \n    return false;\n}\n\nfunction sortObjects(objArray, properties) {\n    var primers = arguments[2] || {};\n\n    properties = properties.map(function (prop) {\n        if (!(prop instanceof Array)) {\n            prop = [prop, \"asc\"];\n        }\n        if (prop[1].toLowerCase() == \"desc\") {\n            prop[1] = -1;\n        } else {\n            prop[1] = 1;\n        }\n        return prop;\n    });\n\n    function valueCmp(x, y) {\n        return x > y ? 1 : x < y ? -1 : 0;\n    }\n\n    function arrayCmp(a, b) {\n        var arr1 = [],\n            arr2 = [];\n        properties.forEach(function (prop) {\n            var aValue = a[prop[0]],\n                bValue = b[prop[0]];\n            if (typeof primers[prop[0]] != \"undefined\") {\n                aValue = primers[prop[0]](aValue);\n                bValue = primers[prop[0]](bValue);\n            }\n            arr1.push(prop[1] * valueCmp(aValue, bValue));\n            arr2.push(prop[1] * valueCmp(bValue, aValue));\n        });\n        return arr1 < arr2 ? -1 : 1;\n    }\n\n    objArray.sort(function (a, b) {\n        return arrayCmp(a, b);\n    });\n    \n}\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":162},{"fieldNo":"800a40be-379c-4cb1-e080-75d3ae58bdb8","fieldName":"metadata","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.Script","script":"// Visibility Bindings\nconst vb = {\n    reportEnableCreate: \"{= ${appData>/settings/properties/report/enableCreate} ? true : false }\",\n    reportEnableMultiSelect: \"{= ${appData>/settings/properties/report/enableMultiSelect} ? true : false }\",\n    reportEnableClose: \"{= ${appData>/settings/properties/report/enableClose} ? true : false }\",\n    reportEnableExport: \"{= ${appData>/settings/properties/report/enableExport} ? true : false }\",\n    reportEnableImport: \"{= ${appData>/settings/properties/report/enableImport} ? true : false }\",\n    reportEnableRun: \"{= ${appData>/settings/properties/report/enableRun} ? true : false }\",\n    reportEnableVariant: \"{appData>/settings/properties/report/enableVariant}\",\n\n    tableEnableAction1: \"{= ${appData>/settings/properties/table/enableAction1} ? true : false }\",\n    tableEnableAction2: \"{= ${appData>/settings/properties/table/enableAction2} ? true : false }\",\n    tableEnableAction3: \"{= ${appData>/settings/properties/table/enableAction3} ? true : false }\",\n    tableEnableAction4: \"{= ${appData>/settings/properties/table/enableAction4} ? true : false }\",\n    tableEnableAction5: \"{= ${appData>/settings/properties/table/enableAction5} ? true : false }\",\n\n    typeMultiOrSingleSelectLookup: \"{= ${/type} === 'MultiSelectLookup' || ${/type} === 'SingleSelectLookup' ? true : false }\",\n    typeMultiOrSingleSelectScript: \"{= ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectScript' ? true : false }\",\n    typeLink: \"{= ${/type} === 'Link' ? true : false }\",\n    typeButton: \"{= ${/type} === 'Button' ? true : false }\",\n\n    typeEvents: \"{= ${/type} === 'Link' || ${/type} === 'Button'? true : false }\",\n\n    buttonTypes: [\"Accept\", \"Attention\", \"Critical\", \"Back\", \"Default\", \"Emphasized\", \"Ghost\", \"Neutral\", \"Reject\", \"Transparent\", \"Unstyled\", \"Up\"],\n\n    typeFixed: \"{= ${/valueType} === 'Fixed' ? true : false }\",\n    typeLookup: \"{= ${/valueType} === 'Lookup' ? true : false }\",\n    typeRule: \"{= ${/valueType} === 'Rule' ? true : false }\",\n\n    typeCustomNumberFormat: \"{= ${/formatter} === 'numberCustom' ? true : false }\",\n\n    typeObjectAllowIcon: \"{= ${/type} === 'ObjectStatus' || ${/type} === 'Button'? true : false }\",\n    typeObjectStatus: \"{= ${/type} === 'ObjectStatus' ? true : false }\",\n    typeObjectNumber: \"{= ${/type} === 'ObjectNumber' ? true : false }\",\n    typeDateTimePicker: \"{= ${/type} === 'DateTimePicker' ? true : false }\",\n    typeDateOrDateTimePicker: \"{= ${/type} === 'DatePicker' || ${/type} === 'DateTimePicker' ? true : false }\",\n\n    typeValueHelp: \"{= ${/type} === 'ValueHelp'  ? true : false }\",\n\n    typeLinkFixed: \"{= ${/type} === 'Link' && ${/linkHrefType} === 'Fixed' ? true : false }\",\n    typeLinkRule: \"{= ${/type} === 'Link' && ${/linkHrefType} === 'Rule' ? true : false }\",\n    typeLinkBinding: \"{= ${/type} === 'Link' && ${/linkHrefType} === 'Binding' ? true : false }\",\n    typeLinkLookup: \"{= ${/type} === 'Link' && ${/linkHrefType} === 'Lookup'  ? true : false }\",\n\n    typeObjectStatusIconTypeFixed: \"{= (${/type} === 'ObjectStatus' || ${/type} === 'Button') && ${/statusIconType} === 'Fixed' ? true : false }\",\n    typeObjectStatusIconTypeRule: \"{= (${/type} === 'ObjectStatus' || ${/type} === 'Button') && ${/statusIconType} === 'Rule' ? true : false }\",\n    typeObjectStatusIconTypeBinding: \"{= (${/type} === 'ObjectStatus' || ${/type} === 'Button') && ${/statusIconType} === 'Binding' ? true : false }\",\n    typeObjectStatusIconTypeLookup: \"{= (${/type} === 'ObjectStatus' || ${/type} === 'Button') && ${/statusIconType} === 'Lookup'  ? true : false }\",\n\n    typeObjectStatusTitleTypeFixed: \"{= ${/type} === 'ObjectStatus' && ${/statusTitleType} === 'Fixed'? true : false }\",\n    typeObjectStatusTitleTypeRule: \"{= ${/type} === 'ObjectStatus' && ${/statusTitleType} === 'Rule'? true : false }\",\n    typeObjectStatusTitleTypeBinding: \"{= ${/type} === 'ObjectStatus' && ${/statusTitleType} === 'Binding'? true : false }\",\n    typeObjectStatusTitleTypeLookup: \"{= ${/type} === 'ObjectStatus' && ${/statusTitleType} === 'Lookup'? true : false }\",\n\n    typeObjectStatusStateTypeFixed: \"{= ${/type} === 'ObjectStatus' && ${/statusStateType} === 'Fixed' ? true : false }\",\n    typeObjectStatusStateTypeRule: \"{= ${/type} === 'ObjectStatus' && ${/statusStateType} === 'Rule'? true : false }\",\n    typeObjectStatusStateTypeBinding: \"{= ${/type} === 'ObjectStatus' && ${/statusStateType} === 'Binding'? true : false }\",\n    typeObjectStatusStateTypeLookup: \"{= ${/type} === 'ObjectStatus' && ${/statusStateType} === 'Lookup'? true : false }\",\n\n    typeObjectStatusNumberUnitTypeFixed: \"{= ${/type} === 'ObjectNumber' && ${/numberUnitType} === 'Fixed'? true : false }\",\n    typeObjectStatusNumberUnitTypeRule: \"{= ${/type} === 'ObjectNumber' && ${/numberUnitType} === 'Rule'? true : false }\",\n    typeObjectStatusNumberUnitTypeBinding: \"{= ${/type} === 'ObjectNumber' && ${/numberUnitType} === 'Binding'? true : false }\",\n    typeObjectStatusNumberUnitTypeLookup: \"{= ${/type} === 'ObjectNumber' && ${/numberUnitType} === 'Lookup'? true : false }\",\n\n    typeObjectStatusNumberStateTypeFixed: \"{= ${/type} === 'ObjectNumber' && ${/numberStateType} === 'Fixed'? true : false }\",\n    typeObjectStatusNumberStateTypeRule: \"{= ${/type} === 'ObjectNumber' && ${/numberStateType} === 'Rule'? true : false }\",\n    typeObjectStatusNumberStateTypeBinding: \"{= ${/type} === 'ObjectNumber' && ${/numberStateType} === 'Binding'? true : false }\",\n    typeObjectStatusNumberStateTypeLookup: \"{= ${/type} === 'ObjectNumber' && ${/numberStateType} === 'Lookup'? true : false }\",\n\n    placeholder:\n        \"{= ${/type} === 'DatePicker' || ${/type} === 'DateTimePicker' || ${/type} === 'Input' || ${/type} === 'MultiSelectLookup' || ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectLookup' || ${/type} === 'SingleSelectScript'  ? true : false }\",\n    editable:\n        \"{= ${/type} === 'CheckBox' || ${/type} === 'DatePicker' || ${/type} === 'Input' || ${/type} === 'MultiSelectLookup' || ${/type} === 'MultiSelectScript' || ${/type} === 'SingleSelectLookup' || ${/type} === 'SingleSelectScript' || ${/type} === 'Switch' ? true : false}\",\n};\n\nconst metadata = {\n    properties: {\n        docLink: \"https://community.neptune-software.com/documentation/adaptive-template-list\",\n        enableForm: true,\n        formUsage: \"INPUT\",\n        enableTable: true,\n        tableUsage: \"OUTPUT\",\n        titleForm: \"Filter\",\n        titleTable: \"Table\",\n        iconForm: typeof getIconURL !== \"undefined\" ? \"filter.svg\" : \"/public/icons/s_b_filt.gif\",\n        iconTable: typeof getIconURL !== \"undefined\" ? \"table.svg\" : \"/public/icons/s_wdvtlc.gif\",\n\n        report: {\n            titleGeneral: { type: \"Title\", label: \"General\" },\n            title: { type: \"Input\", label: \"Title\", translate: true },\n            subTitle: { type: \"Input\", label: \"Subtitle\", translate: true },\n\n            avatarIcon: { type: \"Icon\", label: \"Icon\" },\n            avatarBackgroundColor: {\n                type: \"SingleSelect\",\n                label: \"Icon Color\",\n                items: valuesToKeyText([\"\", \"Accent1\", \"Accent2\", \"Accent3\", \"Accent4\", \"Accent5\", \"Accent6\", \"Accent7\", \"Accent8\", \"Accent9\", \"Accent10\", \"Random\"]),\n            },\n            showIcon: { type: \"CheckBox\", label: \"Icon Visible\", default: true },\n            actionButtonLeft: { type: \"CheckBox\", label: \"Action Button Left\", default: false },\n            hideHeader: { type: \"CheckBox\", label: \"Hide Header\", default: false },\n\n            titleNavigation: { type: \"Title\", label: \"Event\" },\n            navigationCreate: {\n                type: \"Navigation\",\n                label: \"Create\",\n                visible: vb.reportEnableCreate,\n            },\n            navigationItemPress: { type: \"Navigation\", label: \"Item Press\" },\n            navigationMultiSelect: {\n                type: \"Navigation\",\n                label: \"Multiple Selection\",\n                visible: vb.reportEnableMultiSelect,\n            },\n\n            titleButtonClose: {\n                type: \"Title\",\n                label: \"Close Button\",\n                visible: vb.reportEnableClose,\n            },\n            iconButtonClose: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableClose,\n            },\n            textButtonClose: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Close\",\n                translate: true,\n                visible: vb.reportEnableClose,\n            },\n            typeButtonClose: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.reportEnableClose,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonCreate: {\n                type: \"Title\",\n                label: \"Create Button\",\n                visible: vb.reportEnableCreate,\n            },\n            iconButtonCreate: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableCreate,\n            },\n            textButtonCreate: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Create\",\n                translate: true,\n                visible: vb.reportEnableCreate,\n            },\n            typeButtonCreate: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Emphasized\",\n                visible: vb.reportEnableCreate,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonExport: {\n                type: \"Title\",\n                label: \"Export Button\",\n                visible: vb.reportEnableExport,\n            },\n            iconButtonExport: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"sap-icon://excel-attachment\",\n                visible: vb.reportEnableExport,\n            },\n            textButtonExport: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                translate: true,\n                visible: vb.reportEnableExport,\n            },\n            typeButtonExport: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.reportEnableExport,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonImport: {\n                type: \"Title\",\n                label: \"Import Button\",\n                visible: vb.reportEnableImport,\n            },\n            iconButtonImport: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"sap-icon://fa-solid/file-import\",\n                visible: vb.reportEnableImport,\n            },\n            textButtonImport: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                translate: true,\n                visible: vb.reportEnableImport,\n            },\n            typeButtonImport: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.reportEnableImport,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonMultiSelect: {\n                type: \"Title\",\n                label: \"Multiple Selection Button\",\n                visible: vb.reportEnableMultiSelect,\n            },\n            iconButtonMultiSelect: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableMultiSelect,\n            },\n            textButtonMultiSelect: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"MultiSelect\",\n                translate: true,\n                visible: vb.reportEnableMultiSelect,\n            },\n            typeButtonMultiSelect: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Emphasized\",\n                visible: vb.reportEnableMultiSelect,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleButtonRun: { type: \"Title\", label: \"Run Button\", visible: vb.reportEnableRun },\n            iconButtonRun: {\n                type: \"Icon\",\n                label: \"Icon\",\n                default: \"\",\n                visible: vb.reportEnableRun,\n            },\n            textButtonRun: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"Update\",\n                translate: true,\n                visible: vb.reportEnableRun,\n            },\n            typeButtonRun: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Emphasized\",\n                visible: vb.reportEnableRun,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n\n            titleProperties: { type: \"Title\", label: \"Properties\" },\n            enableRun: { type: \"CheckBox\", label: \"Enable Run\", default: true },\n            enableCreate: { type: \"CheckBox\", label: \"Enable Create\", default: false },\n            enableClose: { type: \"CheckBox\", label: \"Enable Close\", default: false },\n            enableDelete: { type: \"CheckBox\", label: \"Enable Delete\", default: false },\n            enableExport: { type: \"CheckBox\", label: \"Enable Export\", default: false },\n            enableImport: { type: \"CheckBox\", label: \"Enable Import\", default: false },\n            enableMultiSelect: { type: \"CheckBox\", label: \"Enable Multiple Selection\", default: false },\n            enableVariant: { type: \"CheckBox\", label: \"Enable Variant\", default: false },\n            // hideHeader: { type: \"CheckBox\", label: \"Hide Header\", default: false },\n            autoRun: { type: \"CheckBox\", label: \"Run At Start\", default: false },\n            autoRunFocus: { type: \"CheckBox\", label: \"Run At Focus\", default: false },\n\n            // Translation Fields\n            searchLabel: {\n                type: \"Input\",\n                label: \"Search Label\",\n                default: \"Search\",\n                visible: false,\n                translate: true,\n            },\n            searchPlaceholder: {\n                type: \"Input\",\n                label: \"Search Placeholder\",\n                default: \"\",\n                visible: false,\n                translate: true,\n            },\n            requiredFieldsToast: {\n                default: \"Please fill in all required fields\",\n                translate: true,\n                visible: false,\n            },\n            textConfirmDelete: {\n                default: \"Do you want to delete this entry? \",\n                translate: true,\n                visible: false,\n            },\n            titleConfirmDelete: {\n                default: \"Delete\",\n                translate: true,\n                visible: false,\n            },\n            odataValueList: {\n                default: \"Field does not have any OData ValueListReference\",\n                translate: true,\n                visible: false,\n            },\n        },\n\n        form: {\n            titleProperties: { type: \"Title\", label: \"Properties\" },\n            enableCompact: { type: \"CheckBox\", label: \"Compact Mode\", default: false },\n            headerExpanded: { type: \"CheckBox\", label: \"Filter Expanded\", default: true },\n            headerPreserveState: { type: \"CheckBox\", label: \"Preserve Header\", default: false },\n            enableSearchWildcard: { type: \"CheckBox\", label: \"Enable '%' as Search Wildcard\", default: false },\n        },\n\n        table: {\n            titleGeneral: { type: \"Title\", label: \"General\" },\n            headerText: { type: \"Input\", label: \"Header Text\", translate: true },\n            footerText: { type: \"Input\", label: \"Footer Text\", translate: true },\n            noDataText: { type: \"Input\", label: \"No Data Text\", translate: true },\n\n            titleTableGroup: { type: \"Title\", label: \"Initial Grouping\" },\n            initialGroupField: { type: \"TableFieldLocal\", label: \"Field\" },\n            initialGroupOrder: {\n                type: \"SingleSelect\",\n                label: \"Order\",\n                items: distinctValuesToKeyText([\n                    [\"\", \"\"],\n                    [\"ASC\", \"Ascending\"],\n                    [\"DESC\", \"Descending\"],\n                ]),\n            },\n\n            titleTableSort: { type: \"Title\", label: \"Initial Sorting\" },\n            initialSortField: { type: \"TableFieldLocal\", label: \"Field\" },\n            initialSortOrder: {\n                type: \"SingleSelect\",\n                label: \"Order\",\n                items: distinctValuesToKeyText([\n                    [\"\", \"\"],\n                    [\"ASC\", \"Ascending\"],\n                    [\"DESC\", \"Descending\"],\n                ]),\n            },\n\n            titlePagination: { type: \"Title\", label: \"Pagination\" },\n            enablePagination: { type: \"CheckBox\", label: \"Enable Pagination\", default: false },\n            paginationShowSelection: {\n                type: \"CheckBox\",\n                label: \"Show Items per Page\",\n                default: false,\n            },\n            paginationRows: { type: \"Input\", label: \"Default Number of Items\", default: 25 },\n\n            titlePostProcessingScript: { type: \"Title\", label: \"Postprocessing\" },\n            postProcessingScript: { type: \"Script\", label: \"Script\" },\n\n            // Properties\n            titleTable: { type: \"Title\", label: \"Properties\" },\n            showSeparators: {\n                type: \"SingleSelect\",\n                label: \"Show Separators\",\n                default: \"All\",\n                items: valuesToKeyText([\"All\", \"Inner\", \"None\"]),\n            },\n            alternateRowColors: { type: \"CheckBox\", label: \"Alternate Row Colors\", default: false },\n            fixedLayout: { type: \"CheckBox\", label: \"Fixed Layout\", default: false },\n            inset: { type: \"CheckBox\", label: \"Inset\", default: false },\n            enableCompact: { type: \"CheckBox\", label: \"Compact Mode\", default: false },\n            enableAutoPopin: { type: \"CheckBox\", label: \"Enable Autopopin\", default: false },\n            enableAction1: { type: \"CheckBox\", label: \"Enable Row Action 1\", default: false },\n            enableAction2: { type: \"CheckBox\", label: \"Enable Row Action 2\", default: false },\n            enableAction3: { type: \"CheckBox\", label: \"Enable Row Action 3\", default: false },\n            enableAction4: { type: \"CheckBox\", label: \"Enable Row Action 4\", default: false },\n            enableAction5: { type: \"CheckBox\", label: \"Enable Row Action 5\", default: false },\n\n            // Row Action 1\n            titleAction1: { type: \"Title\", label: \"Row Action 1\", visible: vb.tableEnableAction1 },\n            action1Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                visible: vb.tableEnableAction1,\n            },\n            action1Icon: { type: \"Icon\", label: \"Icon\", visible: vb.tableEnableAction1 },\n            action1Width: {\n                type: \"Input\",\n                label: \"Width\",\n                placeholder: \"Example 100px or 50%\",\n                visible: vb.tableEnableAction1,\n            },\n            action1Type: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.tableEnableAction1,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            action1Tooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.tableEnableAction1, translate: true },\n            action1Nav: { type: \"Navigation\", label: \"Press\", visible: vb.tableEnableAction1 },\n\n            action1VisibleCond: {\n                type: \"Title\",\n                label: \"Row Action 1 - Conditional Visibility\",\n                visible: vb.tableEnableAction1,\n            },\n            action1VisibleFieldName: {\n                type: \"TableFieldLocal\",\n                label: \"Field\",\n                visible: vb.tableEnableAction1,\n            },\n            action1VisibleCondition: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                    { key: \"empty\", text: \"No data\" },\n                ],\n                visible: vb.tableEnableAction1,\n            },\n            action1VisibleFixedValue: {\n                type: \"Input\",\n                label: \"Fixed Value\",\n                visible: \"{= ${appData>/settings/properties/table/enableAction1} && ${appData>/settings/properties/table/action1VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action1VisibleSystemValue: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: distinctValuesToKeyText([\n                    [\"\", \"\"],\n                    [\"UserName\", \"UserName\"],\n                ]),\n                visible: \"{= ${appData>/settings/properties/table/enableAction1} && ${appData>/settings/properties/table/action1VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action1VisibleInverse: {\n                type: \"CheckBox\",\n                label: \"Hide Instead of Show\",\n                visible: vb.tableEnableAction1,\n            },\n\n            // Row Action 2\n            titleAction2: { type: \"Title\", label: \"Row Action 2\", visible: vb.tableEnableAction2 },\n            action2Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                visible: vb.tableEnableAction2,\n            },\n            action2Icon: { type: \"Icon\", label: \"Icon\", visible: vb.tableEnableAction2 },\n            action2Width: {\n                type: \"Input\",\n                label: \"Width\",\n                placeholder: \"Example 100px or 50%\",\n                visible: vb.tableEnableAction2,\n            },\n            action2Type: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.tableEnableAction2,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            action2Tooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.tableEnableAction2, translate: true },\n            action2Nav: { type: \"Navigation\", label: \"Press\", visible: vb.tableEnableAction2 },\n\n            action2VisibleCond: {\n                type: \"Title\",\n                label: \"Row Action 2 - Conditional Visibility\",\n                visible: vb.tableEnableAction2,\n            },\n            action2VisibleFieldName: {\n                type: \"TableFieldLocal\",\n                label: \"Field\",\n                visible: vb.tableEnableAction2,\n            },\n            action2VisibleCondition: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                    { key: \"empty\", text: \"No data\" },\n                ],\n                visible: vb.tableEnableAction2,\n            },\n            action2VisibleFixedValue: {\n                type: \"Input\",\n                label: \"Fixed Value\",\n                visible: \"{= ${appData>/settings/properties/table/enableAction2} && ${appData>/settings/properties/table/action2VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action2VisibleSystemValue: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n                visible: \"{= ${appData>/settings/properties/table/enableAction2} && ${appData>/settings/properties/table/action2VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action2VisibleInverse: {\n                type: \"CheckBox\",\n                label: \"Hide Instead of Show\",\n                visible: vb.tableEnableAction2,\n            },\n\n            // Row Action 3\n            titleAction3: { type: \"Title\", label: \"Row Action 3\", visible: vb.tableEnableAction3 },\n            action3Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                visible: vb.tableEnableAction3,\n            },\n            action3Icon: { type: \"Icon\", label: \"Icon\", visible: vb.tableEnableAction3 },\n            action3Width: {\n                type: \"Input\",\n                label: \"Width\",\n                placeholder: \"Example 100px or 50%\",\n                visible: vb.tableEnableAction3,\n            },\n            action3Type: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.tableEnableAction3,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            action3Tooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.tableEnableAction3, translate: true },\n            action3Nav: { type: \"Navigation\", label: \"Press\", visible: vb.tableEnableAction3 },\n\n            action3VisibleCond: {\n                type: \"Title\",\n                label: \"Row Action 3 - Conditional Visibility\",\n                visible: vb.tableEnableAction3,\n            },\n            action3VisibleFieldName: {\n                type: \"TableFieldLocal\",\n                label: \"Field\",\n                visible: vb.tableEnableAction3,\n            },\n            action3VisibleCondition: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                    { key: \"empty\", text: \"No data\" },\n                ],\n                visible: vb.tableEnableAction3,\n            },\n            action3VisibleFixedValue: {\n                type: \"Input\",\n                label: \"Fixed Value\",\n                visible: \"{= ${appData>/settings/properties/table/enableAction3} && ${appData>/settings/properties/table/action3VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action3VisibleSystemValue: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n                visible: \"{= ${appData>/settings/properties/table/enableAction3} && ${appData>/settings/properties/table/action3VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action3VisibleInverse: {\n                type: \"CheckBox\",\n                label: \"Hide Instead of Show\",\n                visible: vb.tableEnableAction3,\n            },\n\n            // Row Action 4\n            titleAction4: { type: \"Title\", label: \"Row Action 4\", visible: vb.tableEnableAction4 },\n            action4Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                visible: vb.tableEnableAction4,\n            },\n            action4Icon: { type: \"Icon\", label: \"Icon\", visible: vb.tableEnableAction4 },\n            action4Width: {\n                type: \"Input\",\n                label: \"Width\",\n                placeholder: \"Example 100px or 50%\",\n                visible: vb.tableEnableAction4,\n            },\n            action4Type: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.tableEnableAction4,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            action4Tooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.tableEnableAction4, translate: true },\n            action4Nav: { type: \"Navigation\", label: \"Press\", visible: vb.tableEnableAction4 },\n\n            action4VisibleCond: {\n                type: \"Title\",\n                label: \"Row Action 4 - Conditional Visibility\",\n                visible: vb.tableEnableAction4,\n            },\n            action4VisibleFieldName: {\n                type: \"TableFieldLocal\",\n                label: \"Field\",\n                visible: vb.tableEnableAction4,\n            },\n            action4VisibleCondition: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                    { key: \"empty\", text: \"No data\" },\n                ],\n                visible: vb.tableEnableAction4,\n            },\n            action4VisibleFixedValue: {\n                type: \"Input\",\n                label: \"Fixed Value\",\n                visible: \"{= ${appData>/settings/properties/table/enableAction4} && ${appData>/settings/properties/table/action4VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action4VisibleSystemValue: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n                visible: \"{= ${appData>/settings/properties/table/enableAction4} && ${appData>/settings/properties/table/action4VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action4VisibleInverse: {\n                type: \"CheckBox\",\n                label: \"Hide Instead of Show\",\n                visible: vb.tableEnableAction4,\n            },\n\n            // Row Action 5\n            titleAction5: { type: \"Title\", label: \"Row Action 5\", visible: vb.tableEnableAction5 },\n            action5Text: {\n                type: \"Input\",\n                label: \"Text\",\n                default: \"\",\n                visible: vb.tableEnableAction5,\n            },\n            action5Icon: { type: \"Icon\", label: \"Icon\", visible: vb.tableEnableAction5 },\n            action5Width: {\n                type: \"Input\",\n                label: \"Width\",\n                placeholder: \"Example 100px or 50%\",\n                visible: vb.tableEnableAction5,\n            },\n            action5Type: {\n                type: \"SingleSelect\",\n                label: \"Type\",\n                default: \"Transparent\",\n                visible: vb.tableEnableAction5,\n                items: valuesToKeyText(vb.buttonTypes),\n            },\n            action5Tooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.tableEnableAction5, translate: true },\n            action5Nav: { type: \"Navigation\", label: \"Press\", visible: vb.tableEnableAction5 },\n\n            action5VisibleCond: {\n                type: \"Title\",\n                label: \"Row Action 5 - Conditional Visibility\",\n                visible: vb.tableEnableAction5,\n            },\n            action5VisibleFieldName: {\n                type: \"TableFieldLocal\",\n                label: \"Field\",\n                visible: vb.tableEnableAction5,\n            },\n            action5VisibleCondition: {\n                type: \"SingleSelect\",\n                label: \"Operator\",\n                items: [\n                    { key: \"\", text: \"\" },\n                    { key: \"===\", text: \"Equal\" },\n                    { key: \"!==\", text: \"Not Equal\" },\n                    { key: \">=\", text: \"Greater than or Equal To\" },\n                    { key: \"<=\", text: \"Less than or Equal To\" },\n                    { key: \">\", text: \"Greater Than\" },\n                    { key: \"<\", text: \"Less Than\" },\n                    { key: \"empty\", text: \"No data\" },\n                ],\n                visible: vb.tableEnableAction5,\n            },\n            action5VisibleFixedValue: {\n                type: \"Input\",\n                label: \"Fixed Value\",\n                visible: \"{= ${appData>/settings/properties/table/enableAction5} && ${appData>/settings/properties/table/action5VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action5VisibleSystemValue: {\n                type: \"SingleSelect\",\n                label: \"System Variable\",\n                items: valuesToKeyText([\"\", \"UserName\"]),\n                visible: \"{= ${appData>/settings/properties/table/enableAction5} && ${appData>/settings/properties/table/action5VisibleCondition} !== 'empty' ? true : false }\",\n            },\n            action5VisibleInverse: {\n                type: \"CheckBox\",\n                label: \"Inverse Logic\",\n                visible: vb.tableEnableAction5,\n            },\n        },\n    },\n\n    fieldsSel: {\n        titleGeneral: { type: \"Title\", label: \"General\" },\n        text: { type: \"Input\", label: \"Label\" },\n        type: {\n            type: \"SingleSelect\",\n            label: \"Type\",\n            items: valuesToKeyText([\n                \"Input\",\n                \"CheckBox\",\n                \"DateRange\",\n                \"MultiSelect\",\n                \"MultiSelectLookup\",\n                \"MultiSelectScript\",\n                \"SingleSelect\",\n                \"SingleSelectLookup\",\n                \"SingleSelectScript\",\n                \"Switch\",\n                \"ValueHelp\",\n                \"ValueHelpOData\",\n            ]),\n        },\n\n        titleLookup: {\n            type: \"Title\",\n            label: \"Data Source\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupTable: { type: \"Table\", label: \"Table\", visible: vb.typeMultiOrSingleSelectLookup },\n        lookupFieldKey: {\n            type: \"TableField\",\n            label: \"Key Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupFieldText: {\n            type: \"TableField\",\n            label: \"Text Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupFieldAdditional: {\n            type: \"TableField\",\n            label: \"Additional Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupFieldGrouping1: {\n            type: \"CheckBox\",\n            label: \"Group by Add. Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupShowOnlyText: {\n            type: \"CheckBox\",\n            label: \"Hide Key Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n\n        titleValueHelp: { type: \"Title\", label: \"ValueHelp Source\", visible: vb.typeValueHelp },\n        valueRequestKey: { type: \"Input\", label: \"Field to Return\", visible: vb.typeValueHelp },\n        navigation: { type: \"Navigation\", label: \"Open\", visible: vb.typeValueHelp },\n\n        titleSelectScript: {\n            type: \"Title\",\n            label: \"Data Source\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n        scriptSelect: {\n            type: \"Script\",\n            label: \"Server Script\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n        lookupFieldGrouping2: {\n            type: \"CheckBox\",\n            label: \"Group by Add. Field\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n\n        titleDefault: { type: \"Title\", label: \"Default Value\" },\n        default: { type: \"Input\", label: \"Fixed Value\" },\n        sysvarValue: {\n            type: \"SingleSelect\",\n            label: \"System Variable\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"UserName\", \"UserName\"],\n                [\"TOMORROW\", \"DateRange: Tomorrow\"],\n                [\"TODAY\", \"DateRange: Today\"],\n                [\"YESTERDAY\", \"DateRange: Yesterday\"],\n                [\"LAST_7\", \"DateRange: Last 7 Days\"],\n                [\"LAST_30\", \"DateRange: Last 30 Days\"],\n                [\"LAST_60\", \"DateRange: Last 60 Days\"],\n                [\"LAST_90\", \"DateRange: Last 90 Days\"],\n                [\"LAST_180\", \"DateRange: Last 180 Days\"],\n                [\"NEXT_30\", \"DateRange: Next 30 Days\"],\n                [\"NEXT_60\", \"DateRange: Next 60 Days\"],\n                [\"NEXT_7\", \"DateRange: Next 7 Days\"],\n                [\"NEXT_90\", \"DateRange: Next 90 Days\"],\n                [\"NEXT_180\", \"DateRange: Next 180 Days\"],\n            ]),\n        },\n        scriptValue: { type: \"Script\", label: \"Script Value\" },\n\n        titleSettings: { type: \"Title\", label: \"Properties\" },\n        selEqual: { type: \"CheckBox\", label: \"Strict Search\", visible: \"{= ${/type} === 'Input' || ! ${/type} || ${/type} === 'ValueHelp' ? true : false }\" },\n        required: { type: \"CheckBox\", label: \"Required\", default: false },\n        visible: { type: \"CheckBox\", label: \"Visible\", default: true },\n    },\n\n    fieldsRun: {\n        titleGeneral: { type: \"Title\", label: \"General\" },\n        text: { type: \"Input\", label: \"Label\" },\n        type: {\n            type: \"SingleSelect\",\n            label: \"Type\",\n            items: valuesToKeyText([\n                \"|Text\",\n                \"Button\",\n                \"CheckBox\",\n                \"DatePicker\",\n                \"DateTimePicker\",\n                \"ExpandableText\",\n                \"Icon\",\n                \"Input\",\n                \"Image\",\n                \"Link\",\n                \"MultiSelectLookup\",\n                \"MultiSelectScript\",\n                \"ObjectNumber\",\n                \"ObjectStatus\",\n                \"SingleSelectLookup\",\n                \"SingleSelectScript\",\n                \"Switch\",\n                \"StepInput\",\n                \"JSON\",\n            ]),\n        },\n\n        inputType: {\n            type: \"SingleSelect\",\n            label: \"Input Type\",\n            visible: \"{= ${/type} === 'Input' ? true : false }\",\n            items: valuesToKeyText([\"\", \"Email\", \"Number\", \"Password\", \"Tel\", \"Text\", \"Url\"]),\n        },\n\n        expandableTextPopover: {\n            type: \"CheckBox\",\n            label: \"Show Text in Popover\",\n            visible: \"{= ${/type} === 'ExpandableText' ? true : false }\",\n        },\n\n        statusInverted: { type: \"CheckBox\", label: \"Inverted\", visible: \"{= ${/type} === 'ObjectStatus' || ${/type} === 'ObjectNumber' ? true : false }\" },\n\n        stepInputTextAlign: {\n            type: \"SingleSelect\",\n            label: \"Text Align\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n            items: valuesToKeyText([\"\", \"Begin\", \"Center\", \"End\", \"Initial\", \"Left\", \"Right\"]),\n        },\n\n        buttonType: {\n            type: \"SingleSelect\",\n            label: \"Button Type\",\n            default: \"Transparent\",\n            visible: vb.typeButton,\n            items: valuesToKeyText(vb.buttonTypes),\n        },\n\n        buttonTypeTooltip: { type: \"Input\", label: \"Tooltip\", visible: vb.typeButton, translate: true },\n\n        titleNavigation: { type: \"Title\", label: \"Event\", visible: vb.typeEvents },\n        navigation: { type: \"Navigation\", label: \"Press\", visible: vb.typeEvents },\n\n        // Value\n        titleValue: { type: \"Title\", label: \"Value\" },\n        valueType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            items: distinctValuesToKeyText([\n                [\"\", \"Source Value\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        valueFixed: { type: \"Input\", label: \"Fixed Value\", visible: vb.typeFixed },\n        valueLookup: { type: \"Lookup\", label: \"Lookup\", visible: vb.typeLookup },\n        valueRule: { type: \"Rule\", label: \"Rules Engine\", visible: vb.typeRule },\n\n        formatter: {\n            type: \"SingleSelect\",\n            label: \"Formatter\",\n            visible: \"{= ${/type} === 'DatePicker' || ${/type} === 'DateTimePicker' || ${/type} === 'Input' ? false : true }\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"date00\", \"Date Browser Format\"],\n                [\"date01\", \"Date (dd.mm.yyyy)\"],\n                [\"date02\", \"Date (mm-dd-yyyy)\"],\n                [\"date03\", \"Date (Month)\"],\n                [\"date04\", \"Date (Quarter)\"],\n                [\"date05\", \"Time (hh:mm)\"],\n                [\"sapdate01\", \"SAP Date (dd.mm.yyyy)\"],\n                [\"sapdate02\", \"SAP Date (mm-dd-yyyy)\"],\n                [\"zero\", \"Remove Leading Zero\"],\n                [\"uppercase\", \"Upper Case\"],\n                [\"lowercase\", \"Lower Case\"],\n                [\"number00\", \"Number Browser Format\"],\n                [\"number01\", \"Number Decimals 0\"],\n                [\"number02\", \"Number Decimals 1 Comma\"],\n                [\"number03\", \"Number Decimals 2 Comma\"],\n                [\"number04\", \"Number Decimals 3 Comma\"],\n                [\"number05\", \"Number Decimals 1 Point\"],\n                [\"number06\", \"Number Decimals 2 Point\"],\n                [\"number07\", \"Number Decimals 3 Point\"],\n                [\"numberCustom\", \"Number Custom Decimals\"],\n                [\"file\", \"File Size\"],\n            ]),\n        },\n        formatNumberDecimals: {\n            type: \"Input\",\n            label: \"Decimals\",\n            visible: vb.typeCustomNumberFormat,\n            placeholder: \"0\",\n        },\n\n        formatNumberSeparator: {\n            type: \"SingleSelect\",\n            label: \"Decimal Separator\",\n            visible: vb.typeCustomNumberFormat,\n            items: distinctValuesToKeyText([\n                [\"browserDefault\", \"Browser Default\"],\n                [\"comma\", \"Comma\"],\n                [\"point\", \"Point\"],\n            ]),\n        },\n\n        displayFormat: {\n            type: \"Input\",\n            label: \"Date Format\",\n            visible: vb.typeDateOrDateTimePicker,\n        },\n\n        titleLookup: {\n            type: \"Title\",\n            label: \"Data Source\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupTable: { type: \"Table\", label: \"Table\", visible: vb.typeMultiOrSingleSelectLookup },\n        lookupFieldKey: {\n            type: \"TableField\",\n            label: \"Key Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupFieldText: {\n            type: \"TableField\",\n            label: \"Text Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupFieldAdditional: {\n            type: \"TableField\",\n            label: \"Additional Text Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n        lookupShowOnlyText: {\n            type: \"CheckBox\",\n            label: \"Hide Key Field\",\n            visible: vb.typeMultiOrSingleSelectLookup,\n        },\n\n        titleSelectScript: {\n            type: \"Title\",\n            label: \"Data Source\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n        scriptSelect: {\n            type: \"Script\",\n            label: \"Server Script\",\n            visible: vb.typeMultiOrSingleSelectScript,\n        },\n\n        // StepInput - Min\n        titleStepInputMin: {\n            type: \"Title\",\n            label: \"Min\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n        },\n\n        stepInputMinType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n            ]),\n        },\n\n        stepInputMinFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMinType} === 'Fixed' ? true : false }\",\n        },\n\n        stepInputMinRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMinType} === 'Rule' ? true : false }\",\n        },\n\n        stepInputMinBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMinType} === 'Binding' ? true : false }\",\n        },\n\n        stepInputMinLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMinType} === 'Lookup' ? true : false }\",\n        },\n\n        // StepInput - Max\n        titleStepInputMax: {\n            type: \"Title\",\n            label: \"Max\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n        },\n\n        stepInputMaxType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n            ]),\n        },\n\n        stepInputMaxFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMaxType} === 'Fixed' ? true : false }\",\n        },\n\n        stepInputMaxRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMaxType} === 'Rule' ? true : false }\",\n        },\n\n        stepInputMaxBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMaxType} === 'Binding' ? true : false }\",\n        },\n\n        stepInputMaxLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputMaxType} === 'Lookup' ? true : false }\",\n        },\n\n        // StepInput - Step\n        titleStepInputStep: {\n            type: \"Title\",\n            label: \"Step\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n        },\n\n        stepInputStepType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: \"{= ${/type} === 'StepInput' ? true : false }\",\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n            ]),\n        },\n\n        stepInputStepFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputStepType} === 'Fixed' ? true : false }\",\n        },\n\n        stepInputStepRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputStepType} === 'Rule' ? true : false }\",\n        },\n\n        stepInputStepBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputStepType} === 'Binding' ? true : false }\",\n        },\n\n        stepInputStepLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: \"{= ${/type} === 'StepInput'  && ${/stepInputStepType} === 'Lookup' ? true : false }\",\n        },\n\n        // Link - Href\n        titleLinkHref: { type: \"Title\", label: \"Value: URL\", visible: vb.typeLink },\n        linkHrefType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeLink,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        linkHrefFixed: { type: \"Input\", label: \"Fixed Value\", visible: vb.typeLinkFixed },\n        linkHrefRule: { type: \"Rule\", label: \"Rules Engine\", visible: vb.typeLinkRule },\n        linkHrefBinding: { type: \"TableFieldLocal\", label: \"Binding\", visible: vb.typeLinkBinding },\n        linkHrefLookup: { type: \"Lookup\", label: \"Lookup Value\", visible: vb.typeLinkLookup },\n        linkTargetOpen: {\n            type: \"SingleSelect\",\n            label: \"Open in\",\n            visible: vb.typeLink,\n            items: distinctValuesToKeyText([\n                [\"_blank\", \"New tab\"],\n                [\"_self\", \"Same tab\"],\n            ]),\n        },\n        linkRelative: { type: \"CheckBox\", label: \"Relative URL\", visible: vb.typeLink },\n\n        // ObjectStatus - Icon\n        titleStatusIcon: { type: \"Title\", label: \"Value: Icon\", visible: vb.typeObjectAllowIcon },\n        statusIconType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeObjectAllowIcon,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        statusIconFixed: {\n            type: \"Icon\",\n            label: \"Fixed Value\",\n            visible: vb.typeObjectStatusIconTypeFixed,\n        },\n        statusIconRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: vb.typeObjectStatusIconTypeRule,\n        },\n        statusIconBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: vb.typeObjectStatusIconTypeBinding,\n        },\n        statusIconLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: vb.typeObjectStatusIconTypeLookup,\n        },\n\n        // ObjectStatus - Title\n        titleStatusTitle: { type: \"Title\", label: \"Value: Title\", visible: vb.typeObjectStatus },\n        statusTitleType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeObjectStatus,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        statusTitleFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: vb.typeObjectStatusTitleTypeFixed,\n        },\n        statusTitleRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: vb.typeObjectStatusTitleTypeRule,\n        },\n        statusTitleBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: vb.typeObjectStatusTitleTypeBinding,\n        },\n        statusTitleLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: vb.typeObjectStatusTitleTypeLookup,\n        },\n        statusTitleFormatter: {\n            type: \"SingleSelect\",\n            label: \"Formatter\",\n            visible: vb.typeObjectStatus,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"date00\", \"Date Browser Format\"],\n                [\"date01\", \"Date (dd.mm.yyyy)\"],\n                [\"date02\", \"Date (mm-dd-yyyy)\"],\n                [\"date03\", \"Date (Month)\"],\n                [\"date04\", \"Date (Quarter)\"],\n                [\"sapdate01\", \"SAP Date (dd.mm.yyyy)\"],\n                [\"sapdate02\", \"SAP Date (mm-dd-yyyy)\"],\n                [\"zero\", \"Remove Leading Zero\"],\n                [\"uppercase\", \"Upper Case\"],\n                [\"lowercase\", \"Lower Case\"],\n                [\"number00\", \"Number Browser Format\"],\n                [\"number01\", \"Number Decimals 0\"],\n                [\"number02\", \"Number Decimals 1 Comma\"],\n                [\"number03\", \"Number Decimals 2 Comma\"],\n                [\"number04\", \"Number Decimals 3 Comma\"],\n                [\"number05\", \"Number Decimals 1 Point\"],\n                [\"number06\", \"Number Decimals 2 Point\"],\n                [\"number07\", \"Number Decimals 3 Point\"],\n                [\"file\", \"File Size\"],\n            ]),\n        },\n\n        // ObjectStatus - State\n        titleStatusState: { type: \"Title\", label: \"Value: State\", visible: vb.typeObjectStatus },\n        statusStateType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeObjectStatus,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        statusStateFixed: {\n            type: \"SingleSelect\",\n            label: \"Fixed Value\",\n            visible: vb.typeObjectStatusStateTypeFixed,\n            items: valuesToKeyText([\n                \"\",\n                \"None\",\n                \"Error\",\n                \"Warning\",\n                \"Success\",\n                \"Information\",\n                \"Indication01\",\n                \"Indication02\",\n                \"Indication03\",\n                \"Indication04\",\n                \"Indication05\",\n                \"Indication06\",\n                \"Indication07\",\n                \"Indication08\",\n            ]),\n        },\n        statusStateRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: vb.typeObjectStatusStateTypeRule,\n        },\n        statusStateBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: vb.typeObjectStatusStateTypeBinding,\n        },\n        statusStateLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: vb.typeObjectStatusStateTypeLookup,\n        },\n\n        // ObjectNumber - Unit\n        titleNumberUnit: { type: \"Title\", label: \"Value: Unit\", visible: vb.typeObjectNumber },\n        numberUnitType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeObjectNumber,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        numberUnitFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: vb.typeObjectStatusNumberUnitTypeFixed,\n        },\n        numberUnitRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: vb.typeObjectStatusNumberUnitTypeRule,\n        },\n        numberUnitBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: vb.typeObjectStatusNumberUnitTypeBinding,\n        },\n        numberUnitLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: vb.typeObjectStatusNumberUnitTypeLookup,\n        },\n        numberUnitFormatter: {\n            type: \"SingleSelect\",\n            label: \"Formatter\",\n            visible: vb.typeObjectNumber,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"date00\", \"Date Browser Format\"],\n                [\"date01\", \"Date (dd.mm.yyyy)\"],\n                [\"date02\", \"Date (mm-dd-yyyy)\"],\n                [\"date03\", \"Date (Month)\"],\n                [\"date04\", \"Date (Quarter)\"],\n                [\"sapdate01\", \"SAP Date (dd.mm.yyyy)\"],\n                [\"sapdate02\", \"SAP Date (mm-dd-yyyy)\"],\n                [\"zero\", \"Remove Leading Zero\"],\n                [\"uppercase\", \"Upper Case\"],\n                [\"lowercase\", \"Lower Case\"],\n                [\"number00\", \"Number Browser Format\"],\n                [\"number01\", \"Number Decimals 0\"],\n                [\"number02\", \"Number Decimals 1 Comma\"],\n                [\"number03\", \"Number Decimals 2 Comma\"],\n                [\"number04\", \"Number Decimals 3 Comma\"],\n                [\"number05\", \"Number Decimals 1 Point\"],\n                [\"number06\", \"Number Decimals 2 Point\"],\n                [\"number07\", \"Number Decimals 3 Point\"],\n                [\"file\", \"File Size\"],\n            ]),\n        },\n\n        // ObjectNumber - State\n        titleNumberState: { type: \"Title\", label: \"Value: State\", visible: vb.typeObjectNumber },\n        numberStateType: {\n            type: \"SingleSelect\",\n            label: \"Source\",\n            visible: vb.typeObjectNumber,\n            items: distinctValuesToKeyText([\n                [\"\", \"\"],\n                [\"Binding\", \"Binding\"],\n                [\"Fixed\", \"Fixed Value\"],\n                [\"Lookup\", \"Lookup\"],\n                [\"Rule\", \"Rules Engine\"],\n                [\"Script\", \"Script (from post processing)\"],\n            ]),\n        },\n        numberStateFixed: {\n            type: \"Input\",\n            label: \"Fixed Value\",\n            visible: vb.typeObjectStatusNumberStateTypeFixed,\n        },\n        numberStateRule: {\n            type: \"Rule\",\n            label: \"Rules Engine\",\n            visible: vb.typeObjectStatusNumberStateTypeRule,\n        },\n        numberStateBinding: {\n            type: \"TableFieldLocal\",\n            label: \"Binding\",\n            visible: vb.typeObjectStatusNumberStateTypeBinding,\n        },\n        numberStateLookup: {\n            type: \"Lookup\",\n            label: \"Lookup Value\",\n            visible: vb.typeObjectStatusNumberStateTypeLookup,\n        },\n\n        // Layout\n        titleLayout: { type: \"Title\", label: \"Layout\" },\n        hAlign: {\n            type: \"SingleSelect\",\n            label: \"Horizontal Align\",\n            items: valuesToKeyText([\"\", \"Begin\", \"Center\", \"End\", \"Initial\", \"Left\", \"Right\"]),\n        },\n        vAlign: {\n            type: \"SingleSelect\",\n            label: \"Vertical Align\",\n            items: valuesToKeyText([\"\", \"Bottom\", \"Inherit\", \"Middle\", \"Top\"]),\n        },\n        minScreenWidth: {\n            type: \"SingleSelect\",\n            label: \"MinScreenSize\",\n            items: [\n                { key: \"\", text: \"\" },\n                { key: \"2560px\", text: \"2560px\" },\n                { key: \"2240px\", text: \"2240px\" },\n                { key: \"1920px\", text: \"1920px\" },\n                { key: \"1680px\", text: \"1680px\" },\n                { key: \"1536px\", text: \"1536px\" },\n                { key: \"1440px\", text: \"1440px\" },\n                { key: \"1280px\", text: \"1280px\" },\n                { key: \"XXLarge\", text: \"1120px\" },\n                { key: \"Desktop\", text: \"1024px\" },\n                { key: \"XLarge\", text: \"960px\" },\n                { key: \"Tablet\", text: \"600px\" },\n                { key: \"Medium\", text: \"560px\" },\n                { key: \"Small\", text: \"480px\" },\n                { key: \"XSmall\", text: \"320px\" },\n                { key: \"Phone\", text: \"240px\" },\n                { key: \"XXSmall\", text: \"240px\" },\n            ],\n        },\n\n        demandPopin: { type: \"CheckBox\", label: \"Demand Popin\", visible: \"{= ${appData>/settings/properties/table/enableAutoPopin} ? false : true }\" },\n\n        popinDisplay: {\n            type: \"SingleSelect\",\n            label: \"Popin Display\",\n            default: \"Inline\",\n            items: [\n                { key: \"Block\", text: \"Block\" },\n                { key: \"Inline\", text: \"Inline\" },\n                { key: \"WithoutHeader\", text: \"Without Header\" },\n            ],\n        },\n\n        placeholder: { type: \"Input\", label: \"Placeholder\", visible: vb.placeholder },\n        dateTimePickerMinutesStep: {\n            type: \"Input\",\n            label: \"Step Minutes\",\n            visible: vb.typeDateTimePicker,\n        },\n        dateTimePickerSecondsStep: {\n            type: \"Input\",\n            label: \"Step Seconds\",\n            visible: vb.typeDateTimePicker,\n        },\n        width: { type: \"Input\", label: \"Width\", placeholder: \"Example 100px or 50%\" },\n        wrapping: { type: \"CheckBox\", label: \"Wrapping\", default: false },\n\n        titleSettings: { type: \"Title\", label: \"Properties\" },\n        editable: { type: \"CheckBox\", label: \"Editable\", default: false, visible: vb.editable },\n        enableGroup: { type: \"CheckBox\", label: \"Grouping\", default: false },\n        enableFilter: { type: \"CheckBox\", label: \"Search\", default: true },\n        enableSort: { type: \"CheckBox\", label: \"Sorting\", default: true },\n        visible: { type: \"CheckBox\", label: \"Visible\", default: true },\n\n        enableSum: { type: \"CheckBox\", label: \"Sum\", default: false, visible: vb.typeObjectNumber },\n        sumCalculation: {\n            type: \"SingleSelect\",\n            label: \"Sum Calculation\",\n            default: \"\",\n            visible: vb.typeObjectNumber,\n            items: [\n                { key: \"\", text: \"Sum\" },\n                { key: \"Average\", text: \"Average\" },\n            ],\n        },\n    },\n};\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":163},{"fieldNo":"ab6de925-f229-4718-b25d-83c69f386c39","fieldName":"report","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.Script","script":"const report = {\n    metadata: metadata,\n    childPage: null,\n    groupBy: null,\n    groupOrder: null,\n    sortBy: null,\n    sortOrder: null,\n    pages: {},\n    initId: null,\n    tabObject: null,\n    filterObject: null,\n    colHeaders: null,\n    valueListTarget: {},\n\n    pagination: {\n        take: 100,\n        index: 0,\n        count: 0,\n    },\n\n    events: {\n        afterChildLoad: function () {\n            let parentApp = oApp;\n\n            if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.sourceTarget) {\n                parentApp = sap.ui.getCore().byId(modelAppConfig.oData.settings.navigation.sourceTarget);\n            }\n\n            parentApp.to(report.childPage);\n        },\n        afterChildSave: function () {\n            report.run();\n        },\n        onChildBack: function () {\n            let parentApp = oApp;\n\n            if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.sourceTarget) {\n                parentApp = sap.ui.getCore().byId(modelAppConfig.oData.settings.navigation.sourceTarget);\n            }\n\n            parentApp.back();\n        },\n        onNavigatePage: function (page) {\n            let parentApp = oApp;\n\n            if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.sourceTarget) {\n                parentApp = sap.ui.getCore().byId(modelAppConfig.oData.settings.navigation.sourceTarget);\n            }\n\n            if (!report.pages[page.sId]) parentApp.addPage(page);\n            report.childPage = page;\n            report.pages[page.sId] = true;\n            parentApp.to(page);\n        },\n        onHeaderClick: function (field, button) {\n            modelpopHeader.setData(field);\n            popHeader.openBy(button);\n        },\n        onNavigateDialog: function (dialog) {\n            dialog.open();\n        },\n        onTableChange: function (data) {\n            report.save(data);\n        },\n        refresh: function () {\n            report.run();\n        },\n        onScriptSuccess: function (data, navigation) {\n            if (navigation?.displayResponse) {\n                const responseTitle = data?.title || navigation.scriptSuccessTitle || \"Success\";\n                const responseMessage = data?.message || navigation.scriptSuccessMessage || \"Event completed successfully\";\n                sap.m.MessageBox.success(responseMessage, {\n                    title: responseTitle,\n                });\n            }\n        },\n        onScriptError: function (result, navigation) {\n            if (navigation?.displayResponse) {\n                const responseTitle = navigation.scriptErrorTitle || \"Error\";\n                const responseMessage = navigation.scriptErrorMessage || result?.responseJSON?.status;\n                sap.m.MessageBox.error(responseMessage, {\n                    title: responseTitle,\n                });\n            }\n        },\n    },\n\n    start: function () {\n        if (!neptune?.Adaptive) {\n            console.error(\"Neptune Adaptive Framework not found\");\n            return;\n        }\n\n        neptune.Adaptive.initApp(this);\n    },\n\n    init: function (config, runtime) {\n        // Check current config\n        if (report.initId === config.id) {\n            if (!config.settings.properties.report.autoRunFocus && runtime) return;\n        } else {\n            report.initId = config.id;\n            modelAppData.setData({});\n        }\n\n        // Layout\n        report.tabObject = tabData;\n        report.filterObject = oPanFilter;\n        oApp.to(oPageDynamic);\n\n        // Set Default Values\n        neptune.Adaptive.setDefaultData(config, metadata);\n\n        // Prevent Back Button in Launchpad\n        sap.n.Shell.attachBeforeBack(function (oEvent) {\n            if (oApp.getCurrentPage() !== oPageDynamic) {\n                oApp.back();\n                oEvent.preventDefault();\n            }\n        });\n\n        if (typeof monaco !== \"undefined\") {\n            textAreaJSON.setVisible(false);\n            htmlContentJSON.setVisible(true);\n        }\n\n        const t = config.settings.properties.table;\n\n        if (t.paginationRows) {\n            report.pagination.take = parseInt(t.paginationRows);\n            toolPaginationItemDefault.setKey(t.paginationRows);\n            toolPaginationItemDefault.setText(t.paginationRows);\n        }\n\n        if (config.settings.properties.report.avatarBackgroundColor) {\n            oPageHeaderIcon.setBackgroundColor(config.settings.properties.report.avatarBackgroundColor);\n        } else {\n            oPageHeaderIcon.setBackgroundColor();\n        }\n\n        // Table Mode\n        if (!config.settings.properties.report.enableDelete && !config.settings.properties.report.enableMultiSelect) report.tabObject.setMode(\"None\");\n        if (config.settings.properties.report.enableDelete && !config.settings.properties.report.enableMultiSelect) report.tabObject.setMode(\"Delete\");\n        if (config.settings.properties.report.enableMultiSelect) report.tabObject.setMode(\"MultiSelect\");\n\n        if (report.tabObject.setAutoPopinMode) {\n            if (config.settings.properties.table.enableAutoPopin) {\n                report.tabObject.setAutoPopinMode(true);\n            } else {\n                report.tabObject.setAutoPopinMode(false);\n            }\n        }\n\n        report.sortBy = t.initialSortField || null;\n        report.sortOrder = t.initialSortOrder || \"ASC\";\n        report.groupBy = t.initialGroupField || null;\n        report.groupOrder = t.initialGroupOrder || \"ASC\";\n        report.tabObject.getModel().setData();\n\n        // Language\n        if (runtime) {\n            if (AppCache && AppCache.userInfo && AppCache.userInfo.language) config.language = AppCache.userInfo.language;\n        } else {\n            const language = getAdaptiveEditorPreviewLanguage();\n            if (language) {\n                config.language = language;\n            }\n        }\n\n        modelAppConfig.setData(config);\n        modelAppConfig.refresh();\n\n        // Hide Header\n        const hideHeader = config.settings.properties.report.hideHeader;\n        oPageTitle.setVisible(!hideHeader);\n\n        // Action Button Left\n        if (config.settings.properties.report.actionButtonLeft) {\n            oPageTitle.addStyleClass(\"nepFlexLeft\");\n            oPageHeaderBox.addStyleClass(\"sapUiSmallMarginBottom\");\n        } else {\n            oPageTitle.removeStyleClass(\"nepFlexLeft\");\n            oPageHeaderBox.removeStyleClass(\"sapUiSmallMarginBottom\");\n        }\n\n        // Translation - Properties\n        oPageHeaderTitle.setText(neptune.Adaptive.translateProperty(\"report\", \"title\", config));\n        oPageHeaderSubTitle.setText(neptune.Adaptive.translateProperty(\"report\", \"subTitle\", config));\n        oPageExport.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonExport\", config));\n        oPageImport.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonImport\", config));\n        oPageMultiSelect.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonMultiSelect\", config));\n        oPageCreate.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonCreate\", config));\n        oPageUpdate.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonRun\", config));\n        oPageClose.setText(neptune.Adaptive.translateProperty(\"report\", \"textButtonClose\", config));\n\n        report.tabObject.setHeaderText(neptune.Adaptive.translateProperty(\"table\", \"headerText\", config));\n        report.tabObject.setFooterText(neptune.Adaptive.translateProperty(\"table\", \"footerText\", config));\n        report.tabObject.setNoDataText(neptune.Adaptive.translateProperty(\"table\", \"noDataText\", config));\n\n        // Variant\n        if (config.settings.properties.report.enableVariant) {\n            report.getVariantList().then((data) => {\n                modelVariants.setData(data);\n                report.variantApply();\n            });\n        }\n\n        // Init\n        neptune.Adaptive.init({ id: modelAppConfig.oData.id })\n            .then(function (data) {\n                // Open Dialog\n                if (oApp.getParent() && oApp.getParent().getParent() && oApp.getParent().getParent().open) {\n                    oApp.getParent().getParent().open();\n                }\n\n                const s = modelAppConfig.oData.settings;\n\n                if (runtime) {\n                    s.fieldsSel = data.fieldsSelection;\n                    s.fieldsRun = data.fieldsReport;\n\n                    if (s.fieldsSel) s.fieldsSel.sort(sort_by(\"fieldPos\"));\n                    if (s.fieldsRun) s.fieldsRun.sort(sort_by(\"fieldPos\"));\n                } else {\n                    s.fieldsSel.forEach(function (selField) {\n                        let selFieldRun = ModelData.FindFirst(data.fieldsSelection, \"name\", selField.name);\n                        if (selFieldRun && selFieldRun.items) selField.items = selFieldRun.items;\n                        if (selFieldRun && selFieldRun.default) selField.default = selFieldRun.default;\n                    });\n\n                    s.fieldsRun.forEach(function (runField) {\n                        let selFieldRun = ModelData.FindFirst(data.fieldsReport, \"name\", runField.name);\n                        if (selFieldRun && selFieldRun.items) runField.items = selFieldRun.items;\n                        if (selFieldRun && selFieldRun.default) runField.default = selFieldRun.default;\n                    });\n                }\n\n                // Key Fields for GET Record\n                if (s.navigation && s.navigation.keyField && s.navigation.keyField.length) {\n                    s.navigation.keyField.forEach(function (mapping) {\n                        if (mapping.value) modelAppData.oData[mapping.fieldName] = mapping.value;\n                        if (mapping.key) modelAppData.oData[mapping.fieldName] = s.data[mapping.key];\n                    });\n                }\n\n                // Display Search Filter\n                let showSearchField = true;\n                if (s.properties.table.enablePagination) {\n                    showSearchField = false;\n                } else {\n                    const searchFields = ModelData.Find(s.fieldsRun, \"enableFilter\", true);\n                    if (!searchFields.length) showSearchField = false;\n                }\n\n                // Show/Hide Header\n                if (!showSearchField) {\n                    let selFields = ModelData.Find(s.fieldsSel, \"visible\", true);\n                    if (!selFields.length) {\n                        oPageHeader.setVisible(false);\n                    } else {\n                        oPageHeader.setVisible(true);\n                    }\n                } else {\n                    oPageHeader.setVisible(true);\n                }\n\n                // Parse Extra Data from FieldCatalog\n                report.valueListTarget = {};\n                data.fieldCatalog.forEach(function (catField) {\n                    if (catField.valueListTarget) report.valueListTarget[catField.name] = catField.valueListTarget;\n                });\n\n                // Build Filter\n                report.buildTableFilter(report.filterObject, report.tabObject, modelAppConfig.oData, modelAppData.oData, showSearchField, report.run);\n\n                // Build Table Columns\n                report.buildTableColumns(report.tabObject, modelAppConfig.oData, report.events);\n\n                // Auto Run\n                if (s.properties.report.autoRun) report.run();\n            })\n            .catch(function (data) {\n                if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\n            });\n    },\n\n    handleTableSortIndicator: function () {\n        if (!report.sortBy) return;\n\n        // Clear All\n        const keys = Object.keys(report.colHeaders);\n\n        keys.forEach(function (key) {\n            report.colHeaders[key].setSortIndicator(\"None\");\n        });\n\n        if (report.colHeaders[report.sortBy]) {\n            const sortIndicator = report.sortOrder === \"ASC\" ? \"Ascending\" : \"Descending\";\n            report.colHeaders[report.sortBy].setSortIndicator(sortIndicator);\n        }\n    },\n\n    handlePagination: function () {\n        let maxIndex = report.pagination.count / report.pagination.take;\n        maxIndex = Math.ceil(maxIndex);\n\n        if (report.pagination.count <= report.pagination.take) maxIndex = 1;\n\n        toolPaginationFirst.setEnabled(true);\n        toolPaginationPrev.setEnabled(true);\n        toolPaginationNext.setEnabled(true);\n        toolPaginationLast.setEnabled(true);\n\n        if (report.pagination.index < 0) report.pagination.index = 0;\n\n        if (report.pagination.index === 0) {\n            toolPaginationFirst.setEnabled(false);\n            toolPaginationPrev.setEnabled(false);\n        }\n\n        if (report.pagination.index + 1 >= maxIndex) {\n            toolPaginationNext.setEnabled(false);\n            toolPaginationLast.setEnabled(false);\n        }\n\n        toolPaginationPages.destroyItems();\n\n        let numItems = 0;\n        let maxItems = 6;\n        let startItem = report.pagination.index - maxItems / 2;\n\n        if (startItem < 0) startItem = 0;\n\n        for (i = startItem; i < maxIndex; i++) {\n            if (numItems <= maxItems) toolPaginationPages.addItem(new sap.m.SegmentedButtonItem({ text: i + 1, key: i }));\n            numItems++;\n        }\n\n        toolPaginationPages.setSelectedKey(report.pagination.index);\n        toolPaginationTitle.setNumber(report.pagination.index + 1 + \"/\" + maxIndex);\n    },\n\n    sel: function () {\n        neptune.Adaptive.sel(modelAppConfig.oData).then(function (data) {\n            if (data.status) {\n                sap.m.MessageToast.show(data.status);\n                return;\n            }\n        });\n    },\n\n    run: function (keepIndex) {\n        const d = modelAppData.getData();\n        const { fieldsRun, properties } = modelAppConfig.oData.settings;\n\n        // Sorting, if no field is set, find first visible field\n        if (!report.sortBy && fieldsRun.length) {\n            fieldsRun.forEach(function (field) {\n                if (report.sortBy) return;\n                if (field.visible) report.sortBy = field.name;\n            });\n        }\n\n        // Apply Initial SortingIndicator\n        report.handleTableSortIndicator();\n\n        // Pagination\n        if (properties.table.enablePagination) {\n            if (!keepIndex) report.pagination.index = 0;\n\n            // Records to Get\n            const { pagination, groupBy, sortBy } = report;\n            d._pagination = {\n                take: pagination.take,\n                skip: pagination.take * pagination.index,\n            };\n\n            d._order = {};\n            if (groupBy) d._order[groupBy] = report.groupOrder;\n            if (sortBy) d._order[sortBy] = report.sortOrder;\n        } else {\n            delete d._pagination;\n            delete d._order;\n        }\n\n        // POST Data Formatting\n        modelAppConfig.oData.settings.fieldsSel.forEach(function (selField) {\n            const { type, name } = selField;\n\n            if ([\"CheckBox\", \"Switch\"].includes(type)) {\n                if (!d[name]) d[name] = false;\n            }\n\n            if ([\"MultiSelect\", \"MultiSelectLookup\", \"MultiSelectScript\"].includes(type)) {\n                if (d[name] && !d[name].length) delete d[selField.name];\n            }\n\n            if ([\"ValueHelpOData\"].includes(type)) {\n                const filter = sap.ui.getCore().byId(\"filter\" + name);\n                const tokens = filter.getTokens();\n\n                if (tokens && tokens.length) {\n                    d[name] = [];\n                    for (let i = 0; i < tokens.length; i++) {\n                        const token = tokens[i];\n                        d[name].push(token.getKey());\n                    }\n                } else {\n                    delete d[name];\n                }\n            }\n\n            if (d[name] === \"\") delete d[name];\n            if (Array.isArray(d[name]) && !d[name].length) delete d[name];\n        });\n\n        report.tabObject.setBusy(true);\n\n        neptune.Adaptive.run(modelAppConfig.oData, d, \"List\")\n            .then(function (data) {\n                // Required\n                if (data.status && data.status === \"required\") {\n                    const requiredFieldsMsg = neptune.Adaptive.translateProperty(\"report\", \"requiredFieldsToast\", modelAppConfig.getData());\n                    sap.m.MessageToast.show(requiredFieldsMsg);\n                    return;\n                }\n\n                // Message from Server Script\n                if (data.message && data.message.text) {\n                    if (data.message.type) {\n                        sap.m.MessageBox[data.message.type](data.message.text);\n                    } else {\n                        sap.m.MessageBox.information(data.message.text);\n                    }\n                    return;\n                }\n\n                // Error\n                if (data.status && data.status === \"ERROR\") {\n                    console.log(data);\n                    sap.m.MessageBox.information(\"Error fetching data. Please see console.log for further information\");\n                    return;\n                }\n\n                // set to the correct data source\n                const reportData = data.hasOwnProperty(\"result\") ? data.result : data;\n\n                // AfterRun Formatting of Data\n                modelAppConfig.oData.settings.fieldsRun.forEach(function (runField) {\n                    if ([\"MultiSelectLookup\", \"MultiSelectScript\"].includes(runField.type)) {\n                        reportData.forEach(function (data) {\n                            if (data && data[runField.name]) {\n                                const dataArray = data[runField.name].split(\",\");\n                                if (dataArray.length > 0) data[runField.name] = dataArray;\n                            }\n                        });\n                    }\n\n                    // If lookup and no lookup is configured + items from setup script -> local lookup\n                    if (runField.valueType === \"Lookup\" && !runField.valueLookup && runField.items) {\n                        reportData.forEach(function (data) {\n                            if (data && data[runField.name]) {\n                                const lookupData = runField.items.find((obj) => obj.key === data[runField.name]);\n                                if (lookupData) {\n                                    data[runField.name + \"_value\"] = lookupData.text;\n                                } else {\n                                    data[runField.name + \"_value\"] = data[runField.name];\n                                }\n                            }\n                        });\n                    }\n                });\n\n                // Set Table Data\n                report.tabObject.getModel().setData(reportData);\n\n                if (data.hasOwnProperty(\"result\")) {\n                    oPageHeaderNumber.setNumber(`(${data.count})`);\n                    report.pagination.count = data.count;\n                    report.handlePagination();\n                } else {\n                    oPageHeaderNumber.setNumber(`(${data.length})`);\n                }\n\n                // IconTabBarFilter Counter - Used as Child\n                let tabFilter = oApp.getParent().getParent();\n\n                if (tabFilter && tabFilter.getMetadata()._sClassName === \"sap.m.IconTabFilter\") {\n                    if (data.count) {\n                        tabFilter.setCount(data.count);\n                    } else {\n                        tabFilter.setCount(data.length);\n                    }\n\n                    oPageHeaderTitle.addStyleClass(\"nepTitleSmall\");\n                    oPageHeaderNumber.addStyleClass(\"nepCounterSmall\");\n                    oPageHeaderNumber.setVisible(false);\n                    oPageHeaderIcon.setDisplaySize(\"XS\");\n                }\n\n                // Sorting Client Side\n                report.handleSortingClient();\n\n                // Sum\n                const sumFields = ModelData.Find(modelAppConfig.oData.settings.fieldsRun, [\"enableSum\", \"type\"], [true, \"ObjectNumber\"]);\n\n                if (sumFields.length) {\n                    const props = modelAppConfig.oData.settings.properties;\n                    props.table._sum = {};\n\n                    // Set all sum to 0\n                    sumFields.forEach(function (sumField) {\n                        props.table._sum[sumField.name] = 0;\n                    });\n\n                    // Calculate sum\n                    report.tabObject.getModel().oData.forEach(function (data) {\n                        sumFields.forEach(function (sumField) {\n                            const { name } = sumField;\n                            props.table._sum[name] += parseFloat(data[name]);\n\n                            if (sumField.numberUnitType) {\n                                props.table._sum[`${name}_unit`] = data[name + \"_unit_value\"];\n                            }\n                        });\n                    });\n\n                    // Calculate average\n                    sumFields.forEach(function (sumField) {\n                        if (sumField.sumCalculation === \"Average\") {\n                            props.table._sum[sumField.name] = props.table._sum[sumField.name] / report.tabObject.getModel().oData.length;\n                        }\n                    });\n\n                    // Format Number\n                    sumFields.forEach(function (sumField) {\n                        if (sumField.formatter) {\n                            props.table._sum[sumField.name] = neptune.Adaptive.formatter(\n                                props.table._sum[sumField.name],\n                                sumField.formatter,\n                                sumField.formatNumberDecimals,\n                                sumField.formatNumberSeparator\n                            );\n                        }\n                    });\n\n                    modelAppConfig.refresh();\n                }\n            })\n            .catch(function ({ responseJSON }) {\n                if (responseJSON && responseJSON.status) sap.m.MessageToast.show(responseJSON.status);\n            })\n            .finally(function () {\n                modelAppData.refresh(true);\n                report.tabObject.setBusy(false);\n            });\n    },\n\n    handleSortingClient: function () {\n        let sorters = [];\n        let binding = report.tabObject.getBinding(\"items\");\n\n        // Handle Group\n        if (report.groupBy) {\n            let ui5GroupOrder = null;\n\n            if (report.groupOrder === \"ASC\" || report.groupOrder === \"DESC\") {\n                ui5GroupOrder = report.groupOrder === \"ASC\" ? false : true;\n            } else {\n                ui5GroupOrder = report.groupOrder;\n            }\n\n            sorters.push(\n                new sap.ui.model.Sorter(report.groupBy, ui5GroupOrder, function (oContext) {\n                    return neptune.Adaptive.grouping(modelAppConfig.oData, report.groupBy, oContext);\n                })\n            );\n        }\n\n        // Handle Sorting\n        if (report.sortBy && !modelAppConfig.oData.settings.properties.table.enablePagination) {\n            let ui5SortOrder = null;\n            if (report.sortOrder === \"ASC\" || report.sortOrder === \"DESC\") {\n                ui5SortOrder = report.sortOrder === \"ASC\" ? false : true;\n            } else {\n                ui5SortOrder = report.sortOrder;\n            }\n\n            let sortField = ModelData.FindFirst(modelAppConfig.oData.settings.fieldsRun, \"name\", report.sortBy);\n            let sortBy = sortField.valueType ? sortField.name + \"_value\" : sortField.name;\n\n            sorters.push(new sap.ui.model.Sorter(sortBy, ui5SortOrder, false));\n        }\n\n        binding.sort(sorters);\n    },\n\n    delete: function (data) {\n        const config = modelAppConfig.getData();\n        const deleteMessage = neptune.Adaptive.translateProperty(\"report\", \"textConfirmDelete\", config);\n        const deleteTitle = neptune.Adaptive.translateProperty(\"report\", \"titleConfirmDelete\", config);\n        sap.m.MessageBox.show(deleteMessage, {\n            title: deleteTitle,\n            icon: sap.m.MessageBox.Icon.ERROR,\n            actions: [sap.m.MessageBox.Action.YES, sap.m.MessageBox.Action.CANCEL],\n            onClose: function (oAction) {\n                if (oAction === \"YES\") {\n                    const { id } = data;\n                    neptune.Adaptive.run(config, { id, data }, \"Delete\").then(function (data) {\n                        // Message from Server Script\n                        if (data.message && data.message.text) {\n                            if (data.message.type) {\n                                sap.m.MessageBox[data.message.type](data.message.text);\n                            } else {\n                                sap.m.MessageBox.information(data.message.text);\n                            }\n                            return;\n                        }\n\n                        report.run();\n\n                        if (sap.n.Shell.closeSidepanelTab) sap.n.Shell.closeSidepanelTab(id);\n                    });\n                }\n            },\n        });\n    },\n\n    create: function () {\n        // Pass mapped data\n        let postData = null;\n        const s = modelAppConfig.oData.settings;\n        if (s.properties.report._navigationCreate) {\n            if (s.properties.report._navigationCreate.keyField) {\n                postData = { _defaultData: {} };\n\n                s.properties.report._navigationCreate.keyField.forEach(function (mapping) {\n                    if (mapping.value) postData._defaultData[mapping.fieldName] = mapping.value;\n\n                    if (mapping.key) {\n                        if (modelAppConfig.oData.settings && modelAppConfig.oData.settings.data && modelAppConfig.oData.settings.data[mapping.key]) {\n                            postData._defaultData[mapping.fieldName] = modelAppConfig.oData.settings.data[mapping.key];\n                        } else {\n                            postData._defaultData[mapping.fieldName] = modelAppData.oData[mapping.key];\n                        }\n                    }\n                });\n            }\n\n            neptune.Adaptive.navigation(s.properties.report._navigationCreate, postData, report.events);\n        } else {\n            let tabModel = report.tabObject.getModel();\n            if (!tabModel.oData) tabModel.oData = [];\n            tabModel.oData.push({});\n            tabModel.refresh();\n        }\n    },\n\n    close: function () {\n        const isDialog = oApp.getParent() && oApp.getParent().getParent() && oApp.getParent().getParent().close;\n\n        if (isDialog) {\n            oApp.getParent().getParent().close();\n            return;\n        } else if (modelAppConfig.oData.settings.events && modelAppConfig.oData.settings.events.onChildBack) {\n            modelAppConfig.oData.settings.events.onChildBack();\n            return;\n        } else if (AppCache && AppCache.Back) {\n            AppCache.Back();\n            return;\n        }\n\n        if (sap.n.Shell && sap.n.Shell.closeAllSidepanelTabs) sap.n.Shell.closeAllSidepanelTabs();\n\n        if (!isDialog && sap.n.HashNavigation && sap.n.HashNavigation.deleteNavItem) {\n            sap.n.HashNavigation.deleteNavItem();\n        }\n    },\n\n    multiselect: function () {\n        const dataSelected = [];\n        report.tabObject.getModel().oData.forEach(function (data) {\n            if (data._sel) dataSelected.push(data);\n        });\n\n        neptune.Adaptive.navigation(modelAppConfig.oData.settings.properties.report._navigationMultiSelect, dataSelected, report.events);\n    },\n\n    export: function (delimiter = \";\", exportFormatted) {\n        report.tabObject.setBusy(true);\n\n        // Pagination\n        if (modelAppConfig.oData.settings.properties.table.enablePagination) {\n            delete modelAppData.oData._pagination;\n\n            neptune.Adaptive.run(modelAppConfig.oData, modelAppData.oData, \"List\")\n                .then(function (data) {\n                    if (data.result) {\n                        modelExportData.setData(data.result);\n                    } else {\n                        modelExportData.setData(data);\n                    }\n\n                    report.exportDownload(delimiter, exportFormatted);\n                })\n                .catch(function (data) {\n                    if (data.responseJSON && data.responseJSON.status) sap.m.MessageToast.show(data.responseJSON.status);\n                    report.tabObject.setBusy(false);\n                });\n        } else {\n            modelExportData.setData(report.tabObject.getModel().oData);\n            report.exportDownload(delimiter, exportFormatted);\n        }\n    },\n\n    exportDownload: function (delimiter, exportFormatted) {\n        let columns = [];\n        const s = modelAppConfig.oData.settings;\n\n        columns.push({ name: \"id\", template: { content: { path: \"id\" } } });\n        s.fieldsRun.forEach(function (field) {\n            let fieldName = field.valueType ? field.name + \"_value\" : field.name;\n            const colType = s.fieldCatalog.find((item) => item.name === field.name)?.type;\n\n            if (colType === \"json\") {\n                columns.push({\n                    name: field.text,\n                    template: {\n                        content: {\n                            parts: [fieldName],\n                            formatter: function (fieldName) {\n                                if (typeof fieldName === \"undefined\" || fieldName === null) return;\n                                if (typeof fieldName === \"object\") {\n                                    try {\n                                        return JSON.stringify(fieldName);\n                                    } catch (e) {\n                                        return fieldName;\n                                    }\n                                }\n                                return fieldName;\n                            },\n                        },\n                    },\n                });\n            } else if (field.formatter && exportFormatted) {\n                columns.push({\n                    name: field.text,\n                    template: {\n                        content: {\n                            parts: [fieldName],\n                            formatter: function (fieldName) {\n                                if (typeof fieldName === \"undefined\" || fieldName === null) return;\n                                const formattedField = neptune.Adaptive.formatter(fieldName, field.formatter, field.formatNumberDecimals, field.formatNumberSeparator, false);\n                                if ([\"decimal\", \"integer\", \"smallInt\", \"bigInt\"].includes(colType)) {\n                                    return formattedField.replace(/\\s/g, \"\");\n                                }\n                                return formattedField;\n                            },\n                        },\n                    },\n                });\n            } else {\n                columns.push({\n                    name: field.text,\n                    template: {\n                        content: {\n                            path: fieldName,\n                        },\n                    },\n                });\n            }\n        });\n\n        let oExport = new sap.ui.core.util.Export({\n            exportType: new sap.ui.core.util.ExportTypeCSV({ separatorChar: delimiter }),\n            models: modelExportData,\n            rows: { path: \"/\" },\n            columns: columns,\n        });\n\n        oExport\n            .generate()\n            .done(function (sContent) {\n                let fileName = s.properties.report.title;\n                if (s.properties.report.subTitle) fileName += \"_\" + s.properties.report.subTitle;\n                oExport.saveFile(fileName);\n            })\n            .always(function () {\n                this.destroy();\n            });\n\n        report.tabObject.setBusy(false);\n    },\n\n    importFile: function (file) {\n        try {\n            function importData(data) {\n                if (data.length === 0) {\n                    sap.m.MessageToast.show(\"Import completed\");\n                    oApp.setBusy(false);\n                    report.run();\n\n                    document.getElementById(\"adaptiveListImport\").value = \"\";\n                    return;\n                }\n\n                const COUNT = 500;\n                Promise.all(\n                    data.slice(0, COUNT).map(function (item) {\n                        return neptune.Adaptive.run(modelAppConfig.oData, item, \"Save\");\n                    })\n                )\n                    .catch(function (_) {})\n                    .finally(function (_) {\n                        importData(data.slice(COUNT));\n                    });\n            }\n\n            const reader = new FileReader();\n            reader.onload = function (event) {\n                const base64Encoded = event.target.result.split(\",\")[1];\n                const csv = Base64.decode(base64Encoded);\n                const data = report.convertCSVtoJSON(csv);\n                importData(data);\n            };\n            reader.readAsDataURL(file);\n        } catch (e) {\n            oApp.setBusy(false);\n            console.log(e);\n            document.getElementById(\"adaptiveListImport\").value = \"\";\n        }\n    },\n\n    import: function (evt) {\n        oApp.setBusy(true);\n        const files = evt.target.files;\n        for (let i = 0; i < files.length; i++) {\n            const file = files[i];\n            report.importFile(file);\n        }\n    },\n\n    mapCSVHeaderLabelToFieldName: function (headerLabel) {\n        const fieldCatalog = modelAppConfig.oData.settings.fieldCatalog;\n\n        // try to map header labels to exact field names\n        for (let i = 0; i < fieldCatalog.length; i++) {\n            const { name } = fieldCatalog[i];\n\n            // exact match, with field name\n            if (headerLabel === name) return name;\n        }\n\n        // if all exact name match fails, we try to match header labels\n        // to title text\n        for (let i = 0; i < fieldCatalog.length; i++) {\n            const { name, label } = fieldCatalog[i];\n\n            // exact match, with field label\n            if (headerLabel === label) return name;\n        }\n\n        // if all matches fail return header label as is\n        return headerLabel;\n    },\n\n    convertCSVtoJSON: function (csv) {\n        try {\n            const importSettings = modelformExportImport.getData();\n            const importFormatted = radioGroupValues.getButtons()[importSettings.valuesIndex]?.getText() === \"Formatted values\";\n            const csvDelimiter = radioGroupDelimiter.getButtons()[importSettings.csvDelimiterIndex]?.getText() === \"Comma\" ? \",\" : \";\";\n\n            const rows = csv.split(\"\\n\");\n\n            const exclude = [];\n            const headers = rows[0].split(csvDelimiter).map((field) => {\n                const label = field.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n                const fieldRun = modelAppConfig.getData().settings.fieldsRun.find((item) => item.text === label);\n                if (fieldRun) {\n                    if (fieldRun.valueType) {\n                        exclude.push(fieldRun.name);\n                    }\n                    return fieldRun.name;\n                }\n                return report.mapCSVHeaderLabelToFieldName(label);\n            });\n\n            return rows\n                .slice(1)\n                .filter((row) => !!row.length)\n                .map((row) => {\n                    const obj = {};\n                    row.split(csvDelimiter)\n                        .filter((field) => !exclude.includes(field))\n                        .forEach((field, i) => {\n                            const fieldCleaned = field.replace(/(\\r\\n|\\n|\\r)/gm, \"\");\n                            const column = modelAppConfig.getData().settings.fieldCatalog.find((col) => col.name === headers[i]);\n\n                            if (column?.type === \"json\") {\n                                const cleanedJSON = fieldCleaned.toString().replaceAll('\"\"', '\"').replace(/^\"|\"$/g, \"\");\n                                try {\n                                    obj[headers[i]] = JSON.parse(cleanedJSON);\n                                } catch (error) {\n                                    obj[headers[i]] = cleanedJSON;\n                                }\n                                return;\n                            }\n\n                            if (importFormatted && typeof neptune.Adaptive.parseFormatting !== \"undefined\") {\n                                const fieldString = fieldCleaned.toString().replace(/^\"|\"$/g, \"\");\n                                obj[headers[i]] = neptune.Adaptive.parseFormatting(fieldString, column?.type);\n                            } else {\n                                obj[headers[i]] = fieldCleaned;\n                            }\n\n                            if ((column?.type === \"uuid\" || headers[i] === \"id\") && (typeof obj[headers[i]] !== \"string\" || obj[headers[i]].trim() === \"\")) {\n                                delete obj[headers[i]];\n                            }\n                        });\n                    return obj;\n                });\n        } catch (e) {\n            console.log(e);\n            document.getElementById(\"adaptiveListImport\").value = \"\";\n        }\n    },\n\n    save: function (data) {\n        function getStatusMessage(status) {\n            const d = modelAppConfig.oData;\n            if ((status.includes(\"UNIQUE constraint failed\") || status.includes(\"duplicate key value\")) && d.settings.properties.report.textUnique) {\n                return neptune.Adaptive.translateProperty(\"report\", \"textUnique\", d);\n            }\n\n            return status;\n        }\n\n        const config = modelAppConfig.oData;\n\n        // ensure all required fields are attached\n        config.settings.fieldsSel\n            .filter(function (f) {\n                return f.required;\n            })\n            .forEach(function (f) {\n                const k = f.name;\n                const k2 = `${f.name}_value`;\n\n                if (!data[k] && modelAppData.oData[k]) {\n                    data[k] = data[k2] = modelAppData.oData[k];\n                }\n\n                if (!data[k2] && modelAppData.oData[k2]) {\n                    data[k] = data[k2] = modelAppData.oData[k2];\n                }\n            });\n\n        const autoUpdate = !data.id ? true : false;\n        neptune.Adaptive.run(config, data, \"Save\")\n            .then(function (_data) {\n                if (autoUpdate) report.run();\n            })\n            .catch(function (res) {\n                const j = res.responseJSON;\n                if (j && j.status) {\n                    sap.m.MessageToast.show(getStatusMessage(j.status));\n                }\n            });\n    },\n\n    getVariantList: function () {\n        return new Promise((resolve) => {\n            jsonRequest({\n                url: `${AppCache.Url}/api/functions/Variant/List`,\n                data: JSON.stringify({\n                    objectType: \"Adaptive\",\n                    objectKey: report.initId,\n                }),\n                success: resolve,\n            });\n        });\n    },\n\n    variantSave: function ({ id, name, ispublic, content, description }) {\n        let data = {\n            objectKey: report.initId,\n            objectType: \"Adaptive\",\n            name,\n            description,\n            ispublic,\n            content,\n        };\n\n        if (id) {\n            data.id = id;\n        }\n\n        return new Promise((resolve) => {\n            jsonRequest({\n                url: `${AppCache.Url}/api/functions/Variant/Save`,\n                data: JSON.stringify(data),\n                success: resolve,\n            });\n        });\n    },\n\n    variantApply: function (variant) {\n        if (variant) {\n            modelVariants.getData().forEach((item) => {\n                item.selected = item.id === variant.id;\n            });\n            modelVariants.refresh();\n        }\n        oPageHeaderVariant.setText(variant?.name ?? \"Variant\");\n    },\n\n    variantDelete: function (id) {\n        return new Promise((resolve) => {\n            jsonRequest({\n                url: `${AppCache.Url}/api/functions/Variant/Delete`,\n                data: JSON.stringify({ id }),\n                success: resolve,\n            });\n        });\n    },\n\n    checkVariantModified: function () {\n        const selectedVariant = modelVariants.getData().find((item) => item.selected);\n        if (!selectedVariant) {\n            return;\n        }\n        const activeFilters = modelAppData.getData();\n        const isModified = JSON.stringify(activeFilters) !== JSON.stringify(selectedVariant.content);\n        selectedVariant.modified = isModified;\n        modelVariants.refresh();\n        oPageHeaderVariant.setText(isModified ? `${selectedVariant.name} *` : selectedVariant.name);\n    },\n\n    buildTableColumns: function (table, config, events) {\n        try {\n            report.colHeaders = {};\n            const props = config.settings.properties;\n            if (props.table.enableCompact) {\n                table.addStyleClass(\"sapUiSizeCompact\");\n            } else {\n                table.removeStyleClass(\"sapUiSizeCompact\");\n            }\n\n            try {\n                table.destroyColumns();\n            } catch (e) {}\n\n            let col = new sap.m.ColumnListItem({ selected: \"{_sel}\" });\n\n            // Handle Item Press\n            if (config.settings.events && config.settings.events.valueRequest) {\n                col.setType(\"Active\");\n                col.attachPress(function (evt) {\n                    let ctx = evt.oSource.getBindingContext();\n                    let colData = ctx.getObject();\n\n                    let fieldValue = colData[config.settings.events.valueRequestKey] || colData[\"id\"];\n                    let fieldComp = sap.ui.getCore().byId(config.settings.events.valueRequestField);\n\n                    if (fieldValue && fieldComp) {\n                        fieldComp.setValue(fieldValue);\n                        fieldComp.fireSubmit();\n                    }\n\n                    report.close();\n                });\n            } else {\n                const nav = props.report._navigationItemPress;\n                if (nav) {\n                    col.setType(\"Active\");\n                    col.attachPress(function (evt) {\n                        let ctx = evt.oSource.getBindingContext();\n                        let colData = ctx.getObject();\n\n                        if (nav.dialogTitleField) {\n                            nav.dialogTitleFieldText = colData[nav.dialogTitleField + \"_value\"] || colData[nav.dialogTitleField];\n                        }\n\n                        if (modelAppConfig.oData.settings.navigation && modelAppConfig.oData.settings.navigation.sourceTarget) {\n                            nav.sourceTarget = modelAppConfig.oData.settings.navigation.sourceTarget;\n                        } else {\n                            nav.sourceTarget = oApp.sId;\n                        }\n\n                        neptune.Adaptive.navigation(nav, colData, events, table.sId);\n                    });\n                }\n            }\n\n            function onChange(oEvent) {\n                onFieldChangeEvent(oEvent, events);\n            }\n\n            // Build Columns\n            config.settings.fieldsRun.forEach(function (f) {\n                if (!f.visible) return;\n\n                let ColumnHeader = new sap.m.Column({\n                    width: f.width,\n                    minScreenWidth: f.minScreenWidth,\n                });\n\n                if (f.hAlign) ColumnHeader.setHAlign(f.hAlign);\n                if (f.vAlign) ColumnHeader.setVAlign(f.vAlign);\n                if (f.demandPopin) ColumnHeader.setDemandPopin(f.demandPopin);\n                if (f.popinDisplay) ColumnHeader.setPopinDisplay(f.popinDisplay);\n\n                // Sorting\n                if (f.enableSort || f.enableGroup) {\n                    var _column_delegate = {\n                        onclick: function (e) {\n                            if (events.onHeaderClick) events.onHeaderClick(f, ColumnHeader);\n                        },\n                    };\n                    ColumnHeader.addEventDelegate(_column_delegate);\n\n                    ColumnHeader.exit = function () {\n                        ColumnHeader.removeEventDelegate(_column_delegate);\n                    };\n\n                    ColumnHeader.setStyleClass(\"nepMTableSortCell\");\n\n                    report.colHeaders[f.name] = ColumnHeader;\n                }\n\n                // Enable Sum\n                if (f.enableSum && f.type === \"ObjectNumber\") {\n                    const prefix = \"AppConfig>/settings/properties/table/_sum/\";\n                    let sumField = new sap.m.ObjectNumber({\n                        number: `{${prefix}${f.name}}`,\n                        unit: `{${prefix}${f.name}_unit}`,\n                    });\n                    ColumnHeader.setFooter(sumField);\n                }\n\n                ColumnHeader.setHeader(\n                    new sap.m.Label({\n                        text: neptune.Adaptive.translateFieldLabel(f, config),\n                        // wrapping: true,\n                    })\n                );\n\n                table.addColumn(ColumnHeader);\n\n                let newField = null;\n                let formatterProp = f.type === \"ObjectNumber\" ? \"number\" : \"text\";\n                let opts;\n\n                switch (f.type) {\n                    case \"Link\":\n                        opts = {\n                            text: getFieldBindingText(f),\n                            wrapping: getFieldWrapping(f),\n                            press: function (oEvent) {\n                                if (!f._navigation) {\n                                    oEvent.preventDefault();\n                                    const url = oEvent.oSource?.getProperty(\"href\");\n                                    const absoluteURL = !f.linkRelative;\n                                    let path = url;\n                                    if (absoluteURL && !url.startsWith(\"http\")) {\n                                        path = `https://${url}`;\n                                    }\n                                    const newTab = f.linkTargetOpen ? f.linkTargetOpen === \"_blank\" : true;\n                                    sap.m.URLHelper.redirect(path, newTab);\n                                    return;\n                                }\n\n                                const ctx = oEvent.oSource.getBindingContext();\n                                const colData = ctx.getObject();\n\n                                // Sidepanel Lookup Text\n                                if (f?._navigation?.openAs === \"S\") {\n                                    const k = f._navigation.dialogTitleField;\n                                    const { valueType } = ModelData.FindFirst(config.settings.fieldsRun, \"name\", k);\n                                    f._navigation.dialogTitleFieldText = colData[valueType ? `${k}_value` : k];\n                                }\n\n                                // Add pressed fieldname\n                                events.objectPressed = f.name;\n\n                                neptune.Adaptive.navigation(f._navigation, colData, events, newField.sId);\n                            },\n                        };\n\n                        if (f.linkHrefType) {\n                            opts.href = `{${f.name}_href}`;\n                        }\n\n                        newField = new sap.m.Link(opts);\n                        break;\n\n                    case \"JSON\":\n                        newField = new sap.m.Input({\n                            value: `{${f.name}}`,\n                            editable: true,\n                            placeholder: getFieldPlaceholder(f),\n                            textAlign: f.hAlign,\n                            change: onChange,\n                            type: f.inputType,\n                            showValueHelp: true,\n                            valueHelpOnly: true,\n                            valueHelpRequest: function (oEvent) {\n                                const context = oEvent.oSource.getBindingContext();\n                                currentData = context.getObject();\n                                editorData = { fieldName: f.name, content: currentData[f.name] };\n                                diaJSON.open();\n                            },\n                        });\n\n                        newField.bindProperty(\"value\", {\n                            parts: [f.name],\n                            formatter: function (value) {\n                                if (!value) return;\n                                if (typeof value === \"object\") {\n                                    try {\n                                        return JSON.stringify(value);\n                                    } catch (e) {\n                                        return \"Error parsing json data: \" + e.message;\n                                    }\n                                }\n                                return value;\n                            },\n                        });\n                        break;\n\n                    case \"ObjectNumber\":\n                        opts = {\n                            number: getFieldBindingText(f),\n                        };\n\n                        if (f.statusInverted) opts.inverted = true;\n                        if (f.numberUnitType) opts.unit = `{${f.name}_unit}`;\n                        if (f.numberStateType) opts.state = `{${f.name}_state}`;\n\n                        newField = new sap.m.ObjectNumber(opts);\n\n                        if (f.numberUnitType && f.numberUnitFormatter) {\n                            newField.bindProperty(\"unit\", {\n                                parts: [`${f.name}_unit`],\n                                formatter: function (fieldName) {\n                                    if (typeof fieldName === \"undefined\" || fieldName === null) return;\n                                    return neptune.Adaptive.formatter(fieldName, f.numberUnitFormatter);\n                                },\n                            });\n                        }\n                        break;\n\n                    case \"ObjectStatus\":\n                        opts = {\n                            text: getFieldBindingText(f),\n                        };\n\n                        if (f.statusInverted) opts.inverted = true;\n                        if (f.statusTitleType) opts.title = `{${f.name}_title}`;\n                        if (f.statusIconType) opts.icon = `{${f.name}_icon}`;\n                        if (f.statusStateType) opts.state = `{${f.name}_state}`;\n\n                        newField = new sap.m.ObjectStatus(opts);\n\n                        if (f.statusTitleType && f.statusTitleFormatter) {\n                            newField.bindProperty(\"title\", {\n                                parts: [`${f.name}_title`],\n                                formatter: function (name) {\n                                    if (typeof name === \"undefined\" || name === null) return;\n                                    return neptune.Adaptive.formatter(name, f.statusTitleFormatter, f.formatNumberDecimals, f.formatNumberSeparator);\n                                },\n                            });\n                        }\n                        break;\n\n                    case \"CheckBox\":\n                        newField = new sap.m.CheckBox({\n                            selected: getFieldBindingText(f),\n                            editable: isFieldEditable(f),\n                            wrapping: getFieldWrapping(f),\n                            select: onChange,\n                        });\n                        break;\n\n                    case \"Button\":\n                        opts = {\n                            text: getFieldBindingText(f),\n                            type: f.buttonType,\n                            visible: \"{= ${\" + f.name + \"} ? true:false }\",\n                            press: function (oEvent) {\n                                if (!f._navigation) return;\n\n                                const ctx = oEvent.oSource.getBindingContext();\n                                const colData = ctx.getObject();\n\n                                // Sidepanel Lookup Text\n                                if (f?._navigation?.openAs === \"S\") {\n                                    const k = f._navigation.dialogTitleField;\n                                    const { valueType } = ModelData.FindFirst(config.settings.fieldsRun, \"name\", k);\n                                    f._navigation.dialogTitleFieldText = colData[valueType ? `${k}_value` : k];\n                                }\n\n                                // Add pressed fieldname\n                                events.objectPressed = f.name;\n\n                                neptune.Adaptive.navigation(f._navigation, colData, events, newField.sId);\n                            },\n                        };\n\n                        if (f.statusIconType) opts.icon = `{${f.name}_icon}`;\n                        if (f.buttonTypeTooltip) opts.tooltip = f.buttonTypeTooltip;\n\n                        newField = new sap.m.Button(opts);\n                        newField.addStyleClass(\"sapUiSizeCompact\");\n                        break;\n\n                    case \"Switch\":\n                        newField = new sap.m.Switch({\n                            state: getFieldBindingText(f),\n                            enabled: isFieldEditable(f),\n                            change: onChange,\n                        });\n                        break;\n\n                    case \"Image\":\n                        newField = new sap.m.Image({\n                            src: getFieldBindingText(f),\n                            height: \"32px\",\n                        });\n                        break;\n\n                    case \"ExpandableText\":\n                        newField = new sap.m.ExpandableText({\n                            text: getFieldBindingText(f),\n                            maxCharacters: 50,\n                            // renderWhitespace: true\n                        });\n                        if (f.expandableTextPopover) newField.setOverflowMode(\"Popover\");\n                        break;\n\n                    case \"StepInput\":\n                        opts = {\n                            value: getFieldBindingText(f),\n                            placeholder: getFieldPlaceholder(f),\n                            change: onChange,\n                        };\n\n                        if (f.stepInputMinType) opts.min = `{${f.name}_min}`;\n                        if (f.stepInputMaxType) opts.max = `{${f.name}_max}`;\n                        if (f.stepInputStepType) opts.step = `{${f.name}_step}`;\n                        if (f.stepInputTextAlign) opts.textAlign = f.stepInputTextAlign;\n\n                        newField = new sap.m.StepInput(opts);\n                        break;\n\n                    case \"Icon\":\n                        newField = new sap.ui.core.Icon({\n                            src: getFieldBindingText(f),\n                        });\n                        break;\n\n                    case \"Input\":\n                        newField = new sap.m.Input({\n                            value: getFieldBindingText(f),\n                            editable: isFieldEditable(f),\n                            placeholder: getFieldPlaceholder(f),\n                            textAlign: f.hAlign,\n                            change: onChange,\n                            type: f.inputType,\n                        });\n                        break;\n\n                    case \"DatePicker\":\n                        newField = new sap.m.DatePicker({\n                            visible: f.visible,\n                            editable: isFieldEditable(f),\n                            placeholder: getFieldPlaceholder(f),\n                            displayFormat: f.displayFormat,\n                            dateValue: getFieldBindingText(f),\n                            change: onChange,\n                        });\n\n                        newField.bindProperty(\"dateValue\", {\n                            parts: [f.name],\n                            formatter: getDateFormatter(f.name),\n                        });\n                        break;\n\n                    case \"DateTimePicker\":\n                        newField = new sap.m.DateTimePicker({\n                            visible: f.visible,\n                            editable: isFieldEditable(f),\n                            placeholder: getFieldPlaceholder(f),\n                            secondsStep: parseInt(f.dateTimePickerSecondsStep) || 1,\n                            minutesStep: parseInt(f.dateTimePickerMinutesStep) || 1,\n                            dateValue: getFieldBindingText(f),\n                            change: onChange,\n                        });\n\n                        newField.bindProperty(\"dateValue\", {\n                            parts: [f.name],\n                            formatter: getDateFormatter(f.name),\n                        });\n                        break;\n\n                    case \"SingleSelectLookup\":\n                    case \"SingleSelectScript\":\n                        newField = new sap.m.ComboBox({\n                            width: \"100%\",\n                            visible: f.visible,\n                            editable: isFieldEditable(f),\n                            placeholder: getFieldPlaceholder(f),\n                            selectedKey: getFieldBindingText(f),\n                            showSecondaryValues: true,\n                            selectionChange: onChange,\n                        });\n\n                        if (f.items) f.items.sort(sort_by(\"text\"));\n\n                        newField.addItem(new sap.ui.core.Item({ key: \"\", text: \"\" }));\n                        f.items.forEach(function (item) {\n                            newField.addItem(\n                                new sap.ui.core.ListItem({\n                                    key: item.key,\n                                    text: item.text,\n                                    additionalText: item.additionalText,\n                                })\n                            );\n                        });\n                        break;\n\n                    case \"MultiSelectLookup\":\n                    case \"MultiSelectScript\":\n                        newField = new sap.m.MultiComboBox({\n                            width: \"100%\",\n                            visible: f.visible,\n                            selectedKeys: getFieldBindingText(f),\n                            placeholder: getFieldPlaceholder(f),\n                            showSecondaryValues: true,\n                            showSelectAll: true,\n                            selectionChange: onChange,\n                        });\n\n                        if (f.items) f.items.sort(sort_by(\"text\"));\n\n                        f.items.forEach(function (item) {\n                            newField.addItem(\n                                new sap.ui.core.ListItem({\n                                    key: item.key,\n                                    text: item.text,\n                                    additionalText: item.additionalText,\n                                })\n                            );\n                        });\n                        break;\n\n                    default:\n                        newField = new sap.m.Text({\n                            text: getFieldBindingText(f),\n                            wrapping: getFieldWrapping(f),\n                        });\n                        break;\n                }\n\n                col.addCell(newField);\n\n                // Formatter\n                if (f.formatter) {\n                    let fieldName = f.valueType ? f.name + \"_value\" : f.name;\n                    newField.bindProperty(formatterProp, {\n                        parts: [fieldName],\n                        formatter: function (fieldName) {\n                            if (typeof fieldName === \"undefined\" || fieldName === null) return;\n                            return neptune.Adaptive.formatter(fieldName, f.formatter, f.formatNumberDecimals, f.formatNumberSeparator);\n                        },\n                    });\n                }\n            });\n\n            // Row Action 1\n            const t = config.settings.properties.table;\n            if (t.enableAction1) {\n                let ColumnHeader = new sap.m.Column({\n                    width: t.action1Width || \"\",\n                });\n                table.addColumn(ColumnHeader);\n\n                let newField = new sap.m.Button({\n                    text: t.action1Text,\n                    icon: t.action1Icon,\n                    type: t.action1Type,\n                    press: function (oEvent) {\n                        if (!t._action1Nav) return;\n\n                        let context = oEvent.oSource.getBindingContext();\n                        let columnData = context.getObject();\n\n                        if (t._action1Nav.dialogTitleField) {\n                            t._action1Nav.dialogTitleFieldText = columnData[t._action1Nav.dialogTitleField + \"_value\"] || columnData[t._action1Nav.dialogTitleField];\n                        }\n\n                        neptune.Adaptive.navigation(t._action1Nav, columnData, events, table.sId);\n                    },\n                    visible: report.buildVisibleProp(\"1\"),\n                }).addStyleClass(\"sapUiSizeCompact\");\n\n                if (t.action1Tooltip) newField.setTooltip(t.action1Tooltip);\n\n                col.addCell(newField);\n            }\n\n            // Row Action 2\n            if (t.enableAction2) {\n                let ColumnHeader = new sap.m.Column({\n                    width: t.action2Width || \"\",\n                });\n\n                table.addColumn(ColumnHeader);\n                let newField = new sap.m.Button({\n                    text: t.action2Text,\n                    icon: t.action2Icon,\n                    type: t.action2Type,\n                    width: t.action2Width || \"\",\n                    press: function (oEvent) {\n                        if (!t._action2Nav) return;\n\n                        let context = oEvent.oSource.getBindingContext();\n                        let columnData = context.getObject();\n                        if (t._action2Nav.dialogTitleField) {\n                            t._action2Nav.dialogTitleFieldText = columnData[t._action2Nav.dialogTitleField + \"_value\"] || columnData[t._action2Nav.dialogTitleField];\n                        }\n\n                        neptune.Adaptive.navigation(t._action2Nav, columnData, events, table.sId);\n                    },\n                    visible: report.buildVisibleProp(\"2\"),\n                }).addStyleClass(\"sapUiSizeCompact\");\n\n                if (t.action2Tooltip) newField.setTooltip(t.action2Tooltip);\n\n                col.addCell(newField);\n            }\n\n            // Row Action 3\n            if (t.enableAction3) {\n                let ColumnHeader = new sap.m.Column({\n                    width: t.action3Width || \"\",\n                });\n\n                table.addColumn(ColumnHeader);\n                let newField = new sap.m.Button({\n                    text: t.action3Text,\n                    icon: t.action3Icon,\n                    type: t.action3Type,\n                    width: t.action3Width || \"\",\n                    press: function (oEvent) {\n                        if (!t._action3Nav) return;\n\n                        let context = oEvent.oSource.getBindingContext();\n                        let columnData = context.getObject();\n\n                        if (t._action3Nav.dialogTitleField) {\n                            t._action3Nav.dialogTitleFieldText = columnData[t._action3Nav.dialogTitleField + \"_value\"] || columnData[t._action3Nav.dialogTitleField];\n                        }\n\n                        neptune.Adaptive.navigation(t._action3Nav, columnData, events, table.sId);\n                    },\n                    visible: report.buildVisibleProp(\"3\"),\n                }).addStyleClass(\"sapUiSizeCompact\");\n\n                if (t.action3Tooltip) newField.setTooltip(t.action3Tooltip);\n\n                col.addCell(newField);\n            }\n\n            // Row Action 4\n            if (t.enableAction4) {\n                let ColumnHeader = new sap.m.Column({\n                    width: t.action4Width || \"\",\n                });\n\n                table.addColumn(ColumnHeader);\n                let newField = new sap.m.Button({\n                    text: t.action4Text,\n                    icon: t.action4Icon,\n                    type: t.action4Type,\n                    width: t.action4Width || \"\",\n                    press: function (oEvent) {\n                        if (!t._action4Nav) return;\n\n                        let context = oEvent.oSource.getBindingContext();\n                        let columnData = context.getObject();\n\n                        if (t._action4Nav.dialogTitleField) {\n                            t._action4Nav.dialogTitleFieldText = columnData[t._action4Nav.dialogTitleField + \"_value\"] || columnData[t._action4Nav.dialogTitleField];\n                        }\n\n                        neptune.Adaptive.navigation(t._action4Nav, columnData, events, table.sId);\n                    },\n                    visible: report.buildVisibleProp(\"4\"),\n                }).addStyleClass(\"sapUiSizeCompact\");\n\n                if (t.action4Tooltip) newField.setTooltip(t.action4Tooltip);\n\n                col.addCell(newField);\n            }\n\n            // Row Action 5\n            if (t.enableAction5) {\n                let ColumnHeader = new sap.m.Column({\n                    width: t.action5Width || \"\",\n                });\n\n                table.addColumn(ColumnHeader);\n                let newField = new sap.m.Button({\n                    text: t.action5Text,\n                    icon: t.action5Icon,\n                    type: t.action5Type,\n                    width: t.action5Width || \"\",\n                    press: function (oEvent) {\n                        if (!t._action5Nav) return;\n\n                        let context = oEvent.oSource.getBindingContext();\n                        let columnData = context.getObject();\n\n                        if (t._action5Nav.dialogTitleField) {\n                            t._action5Nav.dialogTitleFieldText = columnData[t._action5Nav.dialogTitleField + \"_value\"] || columnData[t._action5Nav.dialogTitleField];\n                        }\n\n                        neptune.Adaptive.navigation(t._action5Nav, columnData, events, table.sId);\n                    },\n                    visible: report.buildVisibleProp(\"5\"),\n                }).addStyleClass(\"sapUiSizeCompact\");\n\n                if (t.action5Tooltip) newField.setTooltip(t.action5Tooltip);\n\n                col.addCell(newField);\n            }\n\n            // Table - Aggregation\n            table.bindAggregation(\"items\", { path: \"/\", template: col, templateShareable: false });\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    buildVisibleProp: function (field) {\n        if (field === \"1\" || field === \"2\" || field === \"3\" || field === \"4\" || field === \"5\") {\n            field = {\n                visible: true,\n                visibleFixedValue: modelAppConfig.oData.settings.properties.table[\"action\" + field + \"VisibleFixedValue\"],\n                visibleSystemValue: modelAppConfig.oData.settings.properties.table[\"action\" + field + \"VisibleSystemValue\"],\n                visibleFieldName: modelAppConfig.oData.settings.properties.table[\"action\" + field + \"VisibleFieldName\"],\n                visibleCondition: modelAppConfig.oData.settings.properties.table[\"action\" + field + \"VisibleCondition\"],\n                visibleInverse: modelAppConfig.oData.settings.properties.table[\"action\" + field + \"VisibleInverse\"],\n            };\n        }\n\n        let visibleCond = field.visible;\n\n        let visibleValue = field.visibleFixedValue ? field.visibleFixedValue : field.visibleSystemValue;\n\n        let visibleStatement = field.visibleInverse ? \"false:true\" : \"true:false\";\n\n        if (field.visibleFieldName && field.visibleCondition && visibleValue) {\n            if (isNaN(visibleValue)) {\n                visibleCond = \"{= ${\" + field.visibleFieldName + \"}.toString() \" + field.visibleCondition + \" '\" + visibleValue + \"' ? \" + visibleStatement + \" }\";\n            } else {\n                visibleCond = \"{= parseInt(${\" + field.visibleFieldName + \"}) \" + field.visibleCondition + parseInt(visibleValue) + \" ? \" + visibleStatement + \" }\";\n            }\n        }\n\n        if (field.visibleFieldName && field.visibleCondition === \"empty\") {\n            if (field.visibleInverse) {\n                visibleCond = \"{= ${\" + field.visibleFieldName + \"} ? true:false }\";\n            } else {\n                visibleCond = \"{= ${\" + field.visibleFieldName + \"} ? false:true }\";\n            }\n        }\n\n        return visibleCond;\n    },\n\n    setDateRange: function (days, state) {\n        let date = new Date();\n\n        if (state === \"to\") {\n            date.setHours(23, 59, 00);\n        } else {\n            date.setHours(00, 00, 00);\n        }\n\n        date = new Date(date);\n        date = date.setDate(date.getDate() + days);\n        return new Date(date);\n    },\n\n    buildTableFilter: function (parent, table, config, appdata, enableSearch, run) {\n        try {\n            parent.destroyContent();\n\n            if (!config) return;\n\n            var numFields = ModelData.Find(config.settings.fieldsSel, \"visible\", true);\n            var numFilters = numFields ? numFields.length : 1;\n            if (enableSearch) numFilters++;\n\n            var columnsM = 2;\n            var columnsL = 2;\n\n            switch (numFilters) {\n                case 3:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                    columnsL = 3;\n                    break;\n                default:\n                    break;\n            }\n\n            var form = new sap.ui.layout.form.SimpleForm({\n                layout: \"ColumnLayout\",\n                editable: true,\n                labelSpanL: 12,\n                labelSpanM: 12,\n                columnsM: columnsM,\n                columnsL: columnsL,\n            });\n\n            if (config.settings.properties.form.enableCompact) {\n                form.addStyleClass(\"sapUiSizeCompact\");\n            } else {\n                form.removeStyleClass(\"sapUiSizeCompact\");\n            }\n\n            // Search\n            if (enableSearch) {\n                form.addContent(\n                    new sap.m.Label({\n                        text: neptune.Adaptive.translateProperty(\"report\", \"searchLabel\", config),\n                        width: \"100%\",\n                    })\n                );\n\n                form.addContent(\n                    new sap.m.SearchField({\n                        placeholder: neptune.Adaptive.translateProperty(\"report\", \"searchPlaceholder\", config),\n                        liveChange: function (oEvent) {\n                            var searchField = this;\n                            var filters = [];\n                            var bindingItems = table.getBinding(\"items\");\n                            var fieldsFilter = ModelData.Find(config.settings.fieldsRun, \"enableFilter\", true);\n\n                            const searchValue = searchField.getValue();\n                            const wildcardEnabled = config.settings.properties.form.enableSearchWildcard;\n                            const wildcard = searchValue.includes(\"%\");\n                            if (wildcardEnabled && wildcard) {\n                                const searchStrings = searchValue.split(\"%\").filter((str) => str !== \"\");\n                                fieldsFilter.forEach(({ name, valueType }) => {\n                                    const fieldName = valueType ? `${name}_value` : name;\n                                    const wildcardFilters = new sap.ui.model.Filter({\n                                        filters: searchStrings.map((str) => new sap.ui.model.Filter(fieldName, \"Contains\", str)),\n                                        and: true,\n                                    });\n                                    filters.push(wildcardFilters);\n                                });\n                            } else {\n                                fieldsFilter.forEach(({ name, valueType }) => {\n                                    const fieldName = valueType ? `${name}_value` : name;\n                                    filters.push(new sap.ui.model.Filter(fieldName, \"Contains\", searchValue));\n                                });\n                            }\n\n                            bindingItems.filter([\n                                new sap.ui.model.Filter({\n                                    filters: filters,\n                                    and: false,\n                                }),\n                            ]);\n                        },\n                    })\n                );\n            }\n\n            $.each(config.settings.fieldsSel, function (i, field) {\n                if (field.default) {\n                    if (field.type === \"MultiSelect\" || field.type === \"MultiSelectLookup\" || field.type === \"MultiSelectScript\") {\n                        if (typeof field.default === \"object\") {\n                            appdata[field.name] = field.default;\n                        } else {\n                            if (field.default.indexOf(\"[\") > -1) {\n                                appdata[field.name] = JSON.parse(field.default);\n                            } else {\n                                appdata[field.name] = field.default;\n                            }\n                        }\n                    } else if (field.type === \"Switch\" || field.type === \"CheckBox\") {\n                        if (field.default === \"true\" || field.default === \"1\" || field.default === \"X\") {\n                            appdata[field.name] = true;\n                        } else {\n                            delete appdata[field.name];\n                        }\n                    } else if ([\"DateRange\"].includes(field.type)) {\n                        const dateRange = field.default.split(\"-\");\n                        if (dateRange) {\n                            appdata[field.name] = new Date(dateRange[0]);\n                            appdata[field.name + \"_end\"] = new Date(dateRange[1]);\n                        }\n                    } else if ([\"ValueHelpOData\"].includes(field.type)) {\n                    } else {\n                        appdata[field.name] = field.default;\n                    }\n                }\n\n                // Values from System Variables\n                if (field.sysvarValue) {\n                    switch (field.sysvarValue) {\n                        case \"UserName\":\n                            if (AppCache.userInfo && AppCache.userInfo.username) {\n                                appdata[field.name] = AppCache.userInfo.username;\n                            } else {\n                                appdata[field.name] = systemSettings.user.username;\n                            }\n                            break;\n\n                        default:\n                            break;\n                    }\n\n                    if ([\"DateRange\"].includes(field.type)) {\n                        let daysFrom = 0;\n                        let daysTo = 0;\n\n                        switch (field.sysvarValue) {\n                            case \"TOMORROW\":\n                                daysFrom = 1;\n                                daysTo = 1;\n                                break;\n\n                            case \"YESTERDAY\":\n                                daysFrom = -1;\n                                daysTo = -1;\n                                break;\n\n                            case \"LAST_7\":\n                                daysFrom = -7;\n                                break;\n\n                            case \"LAST_30\":\n                                daysFrom = -30;\n                                break;\n\n                            case \"LAST_60\":\n                                daysFrom = -60;\n                                break;\n\n                            case \"LAST_90\":\n                                daysFrom = -90;\n                                break;\n\n                            case \"LAST_180\":\n                                daysFrom = -180;\n                                break;\n\n                            case \"NEXT_7\":\n                                daysTo = 7;\n                                break;\n\n                            case \"NEXT_30\":\n                                daysTo = 30;\n                                break;\n\n                            case \"NEXT_60\":\n                                daysTo = 60;\n                                break;\n\n                            case \"NEXT_90\":\n                                daysTo = 90;\n                                break;\n\n                            case \"NEXT_180\":\n                                daysTo = 180;\n                                break;\n\n                            default:\n                                break;\n                        }\n\n                        appdata[field.name] = report.setDateRange(daysFrom, \"from\");\n                        appdata[field.name + \"_end\"] = report.setDateRange(daysTo, \"to\");\n                    }\n                }\n\n                if (field.required) delete appdata[field.name + \"ValueState\"];\n\n                // Create Filter Fields\n                switch (field.type) {\n                    case \"MultiSelect\":\n                    case \"MultiSelectLookup\":\n                    case \"MultiSelectScript\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.MultiComboBox({\n                            width: \"100%\",\n                            visible: field.visible,\n                            selectedKeys: \"{AppData>/\" + field.name + \"}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            showSecondaryValues: true,\n                            showSelectAll: true,\n                            selectionChange: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n\n                        if (field.items) {\n                            if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                sortObjects(field.items, [\"additionalText\", \"text\"]);\n                            } else {\n                                field.items.sort(sort_by(\"text\"));\n                            }\n\n                            let lastGroup = \"\";\n\n                            $.each(field.items, function (i, item) {\n                                if ((field.lookupFieldGrouping1 || field.lookupFieldGrouping2) && lastGroup !== item.additionalText) {\n                                    selField.addItem(new sap.ui.core.SeparatorItem({ text: item.additionalText }));\n                                    lastGroup = item.additionalText;\n                                }\n\n                                if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                    selField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text }));\n                                } else {\n                                    selField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text, additionalText: item.additionalText }));\n                                }\n                            });\n                        }\n\n                        form.addContent(selField);\n                        break;\n\n                    case \"SingleSelect\":\n                    case \"SingleSelectLookup\":\n                    case \"SingleSelectScript\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.ComboBox({\n                            width: \"100%\",\n                            visible: field.visible,\n                            selectedKey: \"{AppData>/\" + field.name + \"}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            showSecondaryValues: true,\n                            change: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n\n                        selField.addItem(new sap.ui.core.Item({ key: \"\", text: \"\" }));\n\n                        if (field.items) {\n                            if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                sortObjects(field.items, [\"additionalText\", \"text\"]);\n                            } else {\n                                field.items.sort(sort_by(\"text\"));\n                            }\n\n                            let lastGroup = \"\";\n\n                            $.each(field.items, function (i, item) {\n                                if ((field.lookupFieldGrouping1 || field.lookupFieldGrouping2) && lastGroup !== item.additionalText) {\n                                    selField.addItem(new sap.ui.core.SeparatorItem({ text: item.additionalText }));\n                                    lastGroup = item.additionalText;\n                                }\n\n                                if (field.lookupFieldGrouping1 || field.lookupFieldGrouping2) {\n                                    selField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text }));\n                                } else {\n                                    selField.addItem(new sap.ui.core.ListItem({ key: item.key, text: item.text, additionalText: item.additionalText }));\n                                }\n                            });\n                        }\n\n                        form.addContent(selField);\n                        break;\n\n                    case \"DateRange\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.DateRangeSelection({\n                            width: \"100%\",\n                            visible: field.visible,\n                            dateValue: \"{AppData>/\" + field.name + \"}\",\n                            secondDateValue: \"{AppData>/\" + field.name + \"_end}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            change: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n                        form.addContent(selField);\n                        break;\n\n                    case \"CheckBox\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.CheckBox({\n                            width: \"100%\",\n                            visible: field.visible,\n                            useEntireWidth: true,\n                            selected: \"{AppData>/\" + field.name + \"}\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            select: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n                        form.addContent(selField);\n                        break;\n\n                    case \"Switch\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.Switch({\n                            visible: field.visible,\n                            state: \"{AppData>/\" + field.name + \"}\",\n                            change: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n                        form.addContent(selField);\n                        break;\n\n                    case \"ValueHelp\":\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.Input({\n                            visible: field.visible,\n                            editable: field.editable,\n                            type: \"Text\",\n                            placeholder: field.placeholder || \"\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            showValueHelp: true,\n                            valueHelpRequest: function (oEvent) {\n                                let events = report.events;\n                                events.valueRequest = true;\n                                events.valueRequestField = selField.sId;\n                                events.valueRequestKey = field.valueRequestKey;\n\n                                neptune.Adaptive.navigation(field._navigation, appdata, events);\n                            },\n                            submit: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n                        form.addContent(selField);\n                        break;\n\n                    case \"ValueHelpOData\":\n                        var inputFieldLabel = neptune.Adaptive.translateFieldLabel(field, config);\n\n                        form.addContent(\n                            new sap.m.Label({\n                                text: inputFieldLabel,\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.MultiInput(\"filter\" + field.name, {\n                            visible: field.visible,\n                            editable: field.editable,\n                            type: \"Text\",\n                            enableMultiLineMode: true,\n                            placeholder: field.placeholder || \"\",\n                            valueState: \"{AppData>/\" + field.name + \"ValueState}\",\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            showValueHelp: true,\n                            showClearIcon: true,\n                            valueHelpRequest: function (oEvent) {\n                                const inputField = this;\n\n                                const reqBody = {\n                                    _valueListTarget: report.valueListTarget[field.name],\n                                };\n\n                                if (!reqBody._valueListTarget) {\n                                    const valueRefMissing = neptune.Adaptive.translateProperty(\"report\", \"odataValueList\", config);\n                                    sap.m.MessageToast.show(valueRefMissing);\n                                    return;\n                                }\n\n                                neptune.Adaptive.run(modelAppConfig.oData, reqBody, \"ValueListSetup\").then(function (annotations) {\n                                    report.buildValueList(annotations, inputField, inputFieldLabel, field.name);\n                                });\n                            },\n                            submit: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n\n                        selField.addValidator(function (args) {\n                            return new sap.m.Token({ key: args.text, text: args.text });\n                        });\n\n                        // Add Tokens From Default Value\n                        if (field.default) {\n                            if (field.default.indexOf(\"[\") > -1) {\n                                const values = JSON.parse(field.default);\n                                values.forEach(function (value) {\n                                    selField.addToken(new sap.m.Token({ key: value, text: value }));\n                                });\n                            } else {\n                                selField.addToken(new sap.m.Token({ key: field.default, text: field.default }));\n                            }\n                        }\n\n                        form.addContent(selField);\n                        break;\n\n                    default:\n                        form.addContent(\n                            new sap.m.Label({\n                                text: neptune.Adaptive.translateFieldLabel(field, config),\n                                required: field.required,\n                            })\n                        );\n\n                        var selField = new sap.m.SearchField({\n                            width: \"100%\",\n                            visible: field.visible,\n                            value: \"{AppData>/\" + field.name + \"}\",\n                            search: function (oEvent) {\n                                if (run) {\n                                    run();\n                                    report.checkVariantModified();\n                                }\n                            },\n                        });\n\n                        form.addContent(selField);\n                        break;\n                }\n            });\n\n            parent.addContent(form);\n        } catch (e) {\n            console.log(e);\n        }\n    },\n\n    buildValueList: function (annotations, inputField, inputFieldLabel, fieldName) {\n        // TODO - Pagination ?\n        // TODO - Column Sorting Fields ?\n        // TODO - Save current annotation ?\n\n        const annotation = annotations[0];\n\n        if (!annotation.valueListLabel) annotation.valueListLabel = inputFieldLabel;\n\n        // DIALOG\n        const diaValueList = new sap.m.Dialog({\n            title: inputFieldLabel,\n            verticalScrolling: false,\n            horizontalScrolling: false,\n            contentWidth: \"1280px\",\n            contentHeight: \"800px\",\n            draggable: true,\n        });\n\n        diaValueList.addStyleClass(\"sapUiSizeCompact sapUiNoContentPadding\");\n\n        report.buildValueListContent(annotations, annotation, inputField, diaValueList);\n        diaValueList.open();\n    },\n\n    buildValueListContent: function (annotations, annotation, inputField, diaValueList) {\n        // Init\n        diaValueList.destroyContent();\n\n        // Search Function\n        runSearch = function () {\n            const filterData = {\n                _entitySet: annotation.valueListCollectionPath,\n                ...modelformFilter.oData,\n            };\n            neptune.Adaptive.run(modelAppConfig.oData, filterData, \"ValueListRun\").then(function (res) {\n                if (res.count) {\n                    oPageHeaderNumber.setNumber(\"(\" + res.count + \")\");\n                } else {\n                    oPageHeaderNumber.setNumber(\"(\" + res.result.length + \")\");\n                }\n                modeltabValueList.setData(res.result);\n            });\n        };\n\n        let tokenValues = [];\n        const tokens = inputField.getTokens();\n\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            tokenValues.push(token.getKey());\n        }\n\n        const butClose = new sap.m.Button({\n            text: \"Close\",\n            press: function (oEvent) {\n                diaValueList.close();\n            },\n        });\n\n        const butSelect = new sap.m.Button({\n            text: \"OK\",\n            type: \"Emphasized\",\n            press: function (oEvent) {\n                inputField.removeAllTokens();\n                const selectedItems = tabValueList.getSelectedItems();\n\n                selectedItems.forEach(function (item) {\n                    const context = item.getBindingContext();\n                    const data = context.getObject();\n                    inputField.addToken(new sap.m.Token({ key: data[annotation.valueListKeyField], text: data[annotation.valueListKeyField] }));\n                });\n\n                report.run();\n\n                diaValueList.close();\n            },\n        });\n\n        // FILTER\n        const formFilter = new sap.ui.layout.form.SimpleForm({\n            layout: \"ColumnLayout\",\n            labelSpanS: 12,\n            labelSpanM: 12,\n            labelSpanL: 12,\n            columnsM: 2,\n            columnsL: 3,\n        });\n\n        const modelformFilter = new sap.ui.model.json.JSONModel();\n        formFilter.setModel(modelformFilter);\n\n        if (annotation.valueListSearchSupported) {\n            formFilter.addContent(new sap.m.Label({ text: \"Search\" }));\n            formFilter.addContent(\n                new sap.m.SearchField({\n                    value: \"{/_search}\",\n                    search: function (oEvent) {\n                        runSearch();\n                    },\n                })\n            );\n        }\n\n        annotation.fields.forEach(function (field) {\n            formFilter.addContent(new sap.m.Label({ text: field.label }));\n\n            if (field.valueListTarget) {\n                var selField = new sap.m.MultiInput(\"filter\" + field.name, {\n                    type: \"Text\",\n                    enableMultiLineMode: true,\n                    value: \"{/\" + field.name + \"}\",\n                    showValueHelp: true,\n                    showClearIcon: true,\n                    valueHelpRequest: function (oEvent) {\n                        const inputField = this;\n\n                        const reqBody = {\n                            _valueListTarget: field.valueListTarget,\n                        };\n\n                        if (!reqBody._valueListTarget) {\n                            const valueRefMissing = neptune.Adaptive.translateProperty(\"report\", \"odataValueList\", modelAppConfig.getData());\n                            sap.m.MessageToast.show(valueRefMissing);\n                            return;\n                        }\n\n                        neptune.Adaptive.run(modelAppConfig.oData, reqBody, \"ValueListSetup\").then(function (res) {\n                            report.buildValueList(res, inputField);\n                        });\n                    },\n                    submit: function (oEvent) {\n                        runSearch();\n                    },\n                });\n\n                selField.addValidator(function (args) {\n                    return new sap.m.Token({ key: args.text, text: args.text });\n                });\n            } else {\n                var selField = new sap.m.Input({\n                    showClearIcon: true,\n                    value: \"{/\" + field.name + \"}\",\n                    submit: function (oEvent) {\n                        runSearch();\n                    },\n                });\n            }\n\n            formFilter.addContent(selField);\n        });\n\n        // TABLE\n        const tabValueList = new sap.m.Table({\n            mode: \"MultiSelect\",\n            sticky: [\"ColumnHeaders\"],\n            includeItemInSelection: true,\n            fixedLayout: false,\n            updateFinished: function (oEvent) {\n                const items = this.getItems();\n\n                for (let i = 0; i < items.length; i++) {\n                    const item = items[i];\n                    const context = item.getBindingContext();\n                    const data = context.getObject();\n\n                    if (tokenValues.includes(data[annotation.valueListKeyField])) {\n                        this.setSelectedItem(item);\n                    }\n                }\n            },\n        });\n\n        const tabValueListItems = new sap.m.ColumnListItem();\n\n        annotation.fields.forEach(function (field) {\n            // Header\n            const tabColumn = new sap.m.Column();\n            tabColumn.setHeader(new sap.m.Text({ text: field.label }));\n            tabValueList.addColumn(tabColumn);\n\n            // Item\n            tabValueListItems.addCell(new sap.m.Text({ text: \"{\" + field.name + \"}\" }));\n        });\n\n        const modeltabValueList = new sap.ui.model.json.JSONModel();\n        tabValueList.setModel(modeltabValueList);\n        tabValueList.bindAggregation(\"items\", { path: \"/\", template: tabValueListItems, templateShareable: false });\n\n        // DYNAMIC PAGE\n        const oPageDynamic = new sap.f.DynamicPage({ headerExpanded: true, backgroundDesign: \"Solid\" }).addStyleClass(\"sapUiNoContentPadding\");\n        const oPageTitle = new sap.f.DynamicPageTitle({ backgroundDesign: \"Solid\" }).addStyleClass(\"nepFlexWrap\");\n        const oPageHeaderBox = new sap.m.FlexBox({ fitContainer: true, alignItems: \"Center\" });\n        const oPageHeaderVBox = new sap.m.VBox();\n        const oPageHeaderHBoxTitle = new sap.m.HBox();\n        const oPageHeaderTitle = new sap.m.Title({ text: annotation.valueListLabel, level: \"H1\", wrapping: true });\n        const oPageHeaderNumber = new sap.m.ObjectNumber({ number: \"(0)\", emphasized: false });\n        const oPageHeader = new sap.f.DynamicPageHeader({ pinnable: false, backgroundDesign: \"Solid\" });\n        const oPageContent = new sap.m.VBox();\n\n        oPageDynamic.setTitle(oPageTitle);\n        oPageTitle.setHeading(oPageHeaderBox);\n        oPageHeaderBox.addItem(oPageHeaderVBox);\n        oPageHeaderVBox.addItem(oPageHeaderHBoxTitle);\n\n        if (annotations.length > 1) {\n            const butValueLists = new sap.m.Button({\n                type: \"Transparent\",\n                iconFirst: false,\n                // text: \"Value Lists\",\n                icon: \"sap-icon://navigation-down-arrow\",\n                press: function (oEvent) {\n                    var popValueLists = new sap.m.Popover({\n                        showHeader: false,\n                        placement: \"Bottom\",\n                    });\n\n                    var listValueLists = new sap.m.List();\n                    var itemValueLists = new sap.m.StandardListItem({\n                        type: \"Active\",\n                        title: \"{valueListLabel}\",\n                        press: function (oEvent) {\n                            const context = oEvent.oSource.getBindingContext();\n                            const annotation = context.getObject();\n                            report.buildValueListContent(annotations, annotation, inputField, diaValueList);\n                        },\n                    });\n\n                    var modellistValueLists = new sap.ui.model.json.JSONModel();\n                    listValueLists.setModel(modellistValueLists);\n                    listValueLists.bindAggregation(\"items\", { path: \"/\", template: itemValueLists, templateShareable: false });\n\n                    modellistValueLists.setData(annotations);\n\n                    popValueLists.addContent(listValueLists);\n\n                    popValueLists.openBy(this);\n                },\n            });\n\n            oPageHeaderHBoxTitle.addItem(butValueLists);\n        }\n\n        oPageHeaderHBoxTitle.addItem(oPageHeaderTitle);\n        oPageHeaderHBoxTitle.addItem(oPageHeaderNumber);\n\n        oPageTitle.addNavigationAction(butSelect);\n        oPageTitle.addNavigationAction(butClose);\n\n        oPageDynamic.setHeader(oPageHeader);\n        oPageHeader.addContent(formFilter);\n\n        oPageDynamic.setContent(oPageContent);\n        oPageContent.addItem(tabValueList);\n\n        diaValueList.addContent(oPageDynamic);\n\n        runSearch();\n    },\n};\n\nreport.start();\nwindow.adaptiveListImport = report.import;\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":164},{"fieldNo":"9c23dfd8-4acd-44e2-d725-179a40448fa0","fieldName":"editor","fieldParent":"30dbc543-06c3-426f-cb39-6eeb0da3f348","fieldType":"neptune.Script","script":"if (typeof monaco !== \"undefined\") {\n    sap.ui.getCore().attachThemeChanged(function () {\n        const theme = poSettings.getMonacoTheme();\n        monaco?.editor.setTheme(theme);\n    });\n}\n","customComponent":false,"request":[],"response":[],"attributes":[],"fieldPos":165}],"componentInterface":[],"ver":"24.05.27.0950","application":"planet9_adaptive_list","title":"Adaptive List ","description":"Adaptive List ","enableFileStorage":true,"enableManifest":false,"enableStylesheet":true,"enableObfuscate":false,"onlyRunLaunchpad":true,"disabled":false,"loadLaunchpadCode":null,"loadApplicationCode":null,"appType":"F","ui5_m":true,"ui5_f":true,"ui5_table":false,"ui5_tnt":false,"ui5_uxap":false,"ui5_chart":false,"ui5_theme":"sap_fiori_3","ui5_version":"1.120","ui5_language":null,"ui5_url":"","cus_theme":"","css":".nepVariant {\n    padding: 0;\n    height: 1.6rem;\n}\n\n.nepDynamicPage .sapFDynamicPageTitle {\n    padding: 0.5rem 0.8rem !important;\n}\n\n.nepDynamicPage .sapFDynamicPageHeader.sapFDynamicPageHeaderWithContent {\n    padding: 0 !important;\n}\n\n.sapUiTheme-sap_horizon_dark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeLight .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeDark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl {\n    height: 2.75rem;\n}\n\n.toolPagination {\n    height: 3rem;\n    width: calc(100% - 5px) !important;\n}\n\n.nepFlexWrap .sapFDynamicPageTitleMain {\n    flex-wrap: wrap !important;\n}\n\n.nepFlexLeft .sapFDynamicPageTitleMainInner {\n    width: 100% !important;\n}\n\n.sapUiTheme-sap_horizon_dark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeDark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl {\n    border: 1px solid #2e3742;\n    border-radius: 0.75rem;\n}\n\n.nepTitleSmall {\n    font-size: 1rem !important;\n    padding-top: 3px !important;\n}\n\n.nepCounterSmall {\n    padding-top: 3px !important;\n}\n\n/* Styling for Adaptive Designer */\n\n.nepContentPanelFull .sapMBarLeft {\n    margin-top: 6px;\n}\n\n.nepMTableSortCell,\n.nepMTableSortCell .sapMLabel {\n    cursor: pointer;\n}\n\n.sapMListTblHeader>.sapMTableTH.nepMTableSortCell:hover {\n    background-color: #ebf8ff;\n}\n\n.sapUiTheme-sap_horizon_dark .sapMListTblHeader>.sapMTableTH.nepMTableSortCell:hover,\n.sapUiTheme-sap_fiori_3_dark .sapMListTblHeader>.sapMTableTH.nepMTableSortCell:hover,\n.nepThemeDark .sapMListTblHeader>.sapMTableTH.nepMTableSortCell:hover {\n    background-color: #2a2a2a;\n}\n\n.wholeHeight>* {\n    height: 100%;\n}","compiledCss":".nepVariant {\n  padding: 0;\n  height: 1.6rem;\n}\n\n.nepDynamicPage .sapFDynamicPageTitle {\n  padding: 0.5rem 0.8rem !important;\n}\n\n.nepDynamicPage .sapFDynamicPageHeader.sapFDynamicPageHeaderWithContent {\n  padding: 0 !important;\n}\n\n.sapUiTheme-sap_horizon_dark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeLight .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeDark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl {\n  height: 2.75rem;\n}\n\n.toolPagination {\n  height: 3rem;\n  width: calc(100% - 5px) !important;\n}\n\n.nepFlexWrap .sapFDynamicPageTitleMain {\n  flex-wrap: wrap !important;\n}\n\n.nepFlexLeft .sapFDynamicPageTitleMainInner {\n  width: 100% !important;\n}\n\n.sapUiTheme-sap_horizon_dark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl,\n.nepThemeDark .nepDynamicPage.sapFDynamicPage .sapFDynamicPageFooter .sapFDynamicPageActualFooterControl {\n  border: 1px solid #2e3742;\n  border-radius: 0.75rem;\n}\n\n.nepTitleSmall {\n  font-size: 1rem !important;\n  padding-top: 3px !important;\n}\n\n.nepCounterSmall {\n  padding-top: 3px !important;\n}\n\n/* Styling for Adaptive Designer */\n.nepContentPanelFull .sapMBarLeft {\n  margin-top: 6px;\n}\n\n.nepMTableSortCell,\n.nepMTableSortCell .sapMLabel {\n  cursor: pointer;\n}\n\n.sapMListTblHeader > .sapMTableTH.nepMTableSortCell:hover {\n  background-color: #ebf8ff;\n}\n\n.sapUiTheme-sap_horizon_dark .sapMListTblHeader > .sapMTableTH.nepMTableSortCell:hover,\n.sapUiTheme-sap_fiori_3_dark .sapMListTblHeader > .sapMTableTH.nepMTableSortCell:hover,\n.nepThemeDark .sapMListTblHeader > .sapMTableTH.nepMTableSortCell:hover {\n  background-color: #2a2a2a;\n}\n\n.wholeHeight > * {\n  height: 100%;\n}","header":"","manifest":"","globalScript":"","deleted":false,"libHighchart":false,"libHighmap":false,"publicAccess":false,"ui5_bootstrap":false,"ui5_ionic":false,"useV2AppHandler":false,"compilerTarget":3,"tabWidth":null,"printWidth":200,"generateVersionOnActivation":false,"activationHistoryCount":0,"package":"9a22f09f-1c13-ed11-bd6e-000d3ab1d9ff","apis":[],"customComponents":[]}],"Connector":[{"id":"3531472e-c241-4ac7-8681-e2a9348421d4","createdAt":"2024-02-29T13:18:36.293Z","updatedAt":"2024-04-23T10:49:26.205Z","createdBy":"playwright","changedBy":"playwright","settings":{"hasDocumentation":false,"tableid":"12c4468c-9f52-4a16-bfe9-7d734800d3f0"},"documentation":{},"name":"city_copy","description":null,"group":null,"type":"T","ver":"24.04.23.1049","disabled":false,"package":null,"roles":[]}],"Dictionary":[{"id":"12c4468c-9f52-4a16-bfe9-7d734800d3f0","createdAt":"2024-02-29T13:17:37.843Z","updatedAt":"2024-07-31T15:34:37.708Z","createdBy":"playwright","changedBy":"playwright","fields":[{"id":"95ff8f37-8da0-4413-bd17-4ec3f6cec25c","fieldName":"Code","fieldType":"text","isUnique":false,"isNullable":false},{"id":"c5083498-57f6-4834-9245-864a04433095","fieldName":"City","fieldType":"text","isUnique":false,"isNullable":false},{"id":"6a67dac6-0c60-4d4d-a14a-3080bca5bf13","fieldName":"Json","fieldType":"json","isUnique":false,"isNullable":false},{"id":"e3279e07-8c45-4530-831b-d51f61eb3b21","fieldName":"Population","fieldType":"bigint","isUnique":true,"isNullable":false},{"id":"95e93b71-e60c-406c-a1eb-bf7cad003f9d","fieldName":"uuid","fieldType":"uuid","isUnique":false,"isNullable":true},{"id":"86bcdea2-cafc-4e61-e0e8-e08a4951d7c3","fieldName":"Link","fieldType":"text","isUnique":false,"isNullable":true}],"indices":[],"foreignKeys":[],"name":"city_copy","description":null,"ver":"24.07.31.1534","enableAudit":false,"includeDataInPackage":false,"package":null,"generationStrategy":null,"rolesRead":[],"rolesWrite":[]}]}